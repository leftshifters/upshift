// Code generated by go-bindata.
// sources:
// scripts.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x5a\xfd\x76\xda\xc8\x15\xff\x1b\x9e\x62\x16\xfb\xc4\x71\xd6\x42\x06\x27\x9b\x4f\x6f\x0f\x01\x92\xd0\xb5\x81\x03\x38\x3d\x7b\x92\x1c\xce\x20\x0d\x30\xb5\xa4\x51\x67\x24\x63\xea\xf5\xbe\x41\x9f\xa1\xef\xd1\xa7\xea\x23\xf4\xde\x19\x0d\x48\x40\x9c\xec\x3a\xf9\xa3\x7b\xda\x6c\xd0\x8c\xee\xf7\xc7\xef\x5e\xed\x88\xa9\x64\xe8\x49\x1e\x27\x0f\x0f\xc9\x4d\xb9\xc4\xbc\xb9\x20\xfb\xb5\x72\x49\x05\x8c\xc5\x04\xfe\x12\x28\xe2\x04\xb4\x7c\x5b\x2e\xaf\xef\xd6\xcd\xe5\xf3\xf6\x70\xd8\x78\xdb\x3e\xc5\xfb\x67\xbd\xb7\x6f\x3a\x67\xed\xe1\xe9\x7e\x7d\x8b\x4a\xdd\x52\x21\xf5\x9f\x1f\xd4\xc8\x6f\x24\x61\x8c\xc0\x3d\xa0\xf9\x56\x52\x3f\x60\x7f\x93\x34\x8e\x99\x34\x54\x67\xfa\x11\x59\x98\x67\xeb\x4b\x8b\x11\x55\x97\xe6\x4a\xbf\x31\x68\x9c\x0f\x2d\xdf\x71\xbf\x31\x7a\xa7\xf9\x9e\xd3\x4b\xf6\x46\x04\x3e\x93\xaa\x5c\xaa\xba\x86\xd2\x82\x54\xf6\x6b\x95\x6d\xd6\x43\x96\xa4\xf1\x5b\x16\x1a\x92\x6f\xdb\xe7\x9a\x5e\xb3\xa3\x29\x0d\x84\x48\xfa\x54\xa9\x85\x90\xfe\xe9\xfe\x49\xb9\x5c\xe2\x53\xf2\x01\x28\xd5\x2b\xe4\xf4\x94\x54\x12\x99\xb2\x0a\xf9\xf4\x92\x24\x73\x16\x95\x4b\xa5\x3d\xd2\xec\x10\xae\x08\x3e\x3f\x22\x0b\x46\x22\xb1\x20\x11\x63\x3e\x89\x33\x2a\x70\x29\x23\x71\x52\x21\x3f\x00\x89\xfc\xeb\xc6\x62\x0e\x33\xa7\xbf\x11\x95\xfa\xf0\xf3\x92\x38\x43\x32\x63\x21\xe1\x91\x4a\x68\x10\x68\x93\xc2\xdd\x6b\x9e\x90\x63\xf8\x1b\x0b\x14\x5b\x3d\xc0\xa3\x29\x2f\xdb\x87\x7b\xe4\x42\x31\x49\xd4\x5c\xa4\x81\x4f\x92\x65\xcc\x80\x0a\xb2\xcb\x0b\x64\xd9\x6c\xf1\xb0\x2c\x80\x20\x58\xea\x22\xca\x0e\xff\x3f\xac\x95\x5a\x71\x89\x43\x3b\xd7\xdf\xd5\x68\xbb\x58\x15\x6d\x87\xff\xe4\xc2\xd2\x98\x2f\xbc\xf4\xb9\x24\x4e\x4c\xaa\x69\xac\xe6\x7c\x9a\xb8\x81\x98\x29\x77\xd7\xc1\x24\xe5\x81\x5f\x38\x89\x25\xbf\xa2\x09\xd3\x8e\x89\x31\xc4\x59\x3e\x81\xbd\x54\x82\x30\x53\x35\x3c\x23\xf3\x24\x89\xd5\x0b\xd7\x95\x74\x51\x9d\xf1\x64\x9e\x4e\x52\xd0\xce\x13\x51\xc2\xa2\xa4\xea\x89\xd0\x0d\xd8\x34\xd1\x6c\x40\x32\xd7\x72\x0c\xa9\x82\xdf\x6e\xa6\x58\x55\xcd\xc9\xcf\x24\x3b\xab\x26\x2c\x8c\xc9\x83\x07\xc4\x9b\x87\xc2\x27\x3f\x5e\x6f\x1d\x54\xdd\xcd\x27\x32\x2c\x5c\x5a\x65\xde\x6b\x09\x19\x2d\x44\x60\xc4\x1e\xf5\x7a\x67\x3a\xa2\x26\xf0\xb8\x10\x8b\x99\x39\xb1\x0c\xf0\xa4\x9f\x06\xd9\x0b\x83\xf6\x79\x6f\x64\x4a\xcf\xeb\x41\xa3\xdb\x34\x05\x20\xab\x42\x18\x83\xc5\x62\x00\xfa\x93\x38\xd5\x24\x21\xfd\x0b\xc5\xe0\x24\xa3\x3d\x4c\x27\xa0\x54\x1a\xb0\x4e\xc4\x33\x63\xae\xc8\xd5\x76\x90\x53\xf6\x3e\x88\x0b\x3f\xf3\x24\x6b\x9b\x24\x2f\x62\x1f\x5c\xf6\x87\x88\xa6\xfa\x95\x6d\xb2\x7d\xe1\x77\x8c\x79\xbe\x40\x2e\x06\x0f\x59\x43\xee\xa2\x32\x60\xb1\xf8\x9c\x5c\x17\xc6\x63\x4d\x11\x4d\xf9\xcc\x90\x92\x70\xdd\x0a\xe5\x38\x57\x4c\x4e\x84\xda\x21\xde\x30\xa1\x32\x19\xf2\x30\x0d\x68\x22\xb2\x8a\xde\x6a\xbf\xef\x34\x77\x48\x78\xed\xc9\x34\xd2\x32\xca\x34\x84\x98\x84\x1e\x91\x15\xeb\xda\xcf\xae\xcf\xae\xdc\x28\xcd\x64\x47\xca\x4d\x11\xc6\x1c\xbc\xd3\x1b\x66\x4d\x60\xd0\xfb\x6b\xbb\x39\x1a\x8f\x7e\xed\x1b\xda\xf6\xc1\xaa\x1d\x0c\x9b\xef\xda\xe7\x26\x18\xac\x08\x8f\xf3\x1d\xe3\xc9\x86\x3c\x8a\x25\xc4\x11\x24\xe6\x31\x9b\x52\x1e\x60\xf4\x5e\x7b\xc2\x67\x3a\x07\x89\xa3\x25\xd3\x35\xcd\x51\xde\x9c\x85\x59\xfd\x71\xe6\x1c\x52\x70\xce\x82\xc0\xe4\x61\x3b\xba\xe2\x52\x44\xa8\x10\x5c\xf4\x2f\x09\x8f\xe7\x22\x62\xca\xda\x84\x38\x3e\x34\x52\x1e\xd1\x84\x8b\x88\x54\x62\x78\x38\x15\x32\x3c\xdd\xb8\x76\x14\xd1\x90\x81\xc0\x15\xbc\x0f\x29\xcf\xfc\x16\x4d\x68\x9f\x26\xf3\x8d\xe2\x90\x99\xbf\xb2\xff\x04\x6b\xe1\xb5\x17\x4b\x96\x24\x4b\xdb\xb0\xbf\xa3\xb9\xae\xbd\x04\xf2\xf7\xf3\x76\xf9\x16\xba\x27\x70\x3d\xa7\x20\x6a\xd5\x90\xde\x1c\xcc\xf1\xe7\x14\xb3\x67\xdd\xc6\xf9\x77\x8a\x86\x2f\x38\xcb\xa1\x46\xfc\xe2\xd9\xfe\xe3\xea\xb5\x97\x9d\x10\xfb\xef\xcf\xfa\xb5\x7d\x1d\x0b\xb9\xed\x59\xa3\xd3\x9d\x98\xe8\x0b\x3a\x31\x4d\x38\x33\xb0\xfd\xd9\x8b\xd1\x59\xaa\x1f\x70\x70\x85\xed\x3e\xae\x39\xab\xc6\xfa\xe9\x67\x94\xaa\xe5\x94\xca\x88\x15\x6f\xe4\xcb\x87\x36\x65\x51\xcf\x37\x2c\xf1\xe6\x8d\x08\x2b\x15\xe5\xb2\x2f\xc5\x15\x57\x20\x0a\x8f\x66\xf0\xf7\x29\xd4\x82\xac\x9d\xee\x41\x8b\x06\x34\x01\xdd\x4d\x11\xc5\x67\x73\x7c\xe2\x8b\x45\x14\x08\xea\x13\x2c\x7f\x3c\x4a\xc4\x4a\x74\x32\xd5\xd6\xc0\x4b\x34\xf2\x35\xa6\x20\x58\x87\xb0\xcd\x4f\xd3\xc8\xd3\xa1\xd9\x17\x31\x86\x22\xdb\xc5\xb4\x5c\x6a\x34\x9b\xbd\x8b\xee\x68\xdc\x3e\x6f\x74\x4c\xdb\x42\xb6\x58\x22\x29\x36\xe9\x94\xac\x1e\x59\x31\xc6\x1a\x23\x98\x83\x75\x2b\x77\x57\xcd\xbc\x14\x5e\x91\x47\xd5\x50\x4c\x80\x41\x6c\x79\xae\x7b\x7d\xe9\x4e\x79\xd0\x54\x3c\xf2\x77\x9c\xad\xea\x6f\xfb\xac\xd7\x6f\x0f\xc6\x99\xe0\xa6\x6d\x5e\x74\x5b\x67\xed\x71\xa7\xd5\xee\x8e\x3a\x6f\x3a\xed\x81\x0e\x17\x2d\xb5\x16\x14\xbc\x9a\x21\xe5\xbb\x98\x5b\x0f\xbc\x85\xc8\x42\x0b\x5e\x5c\x74\x5a\x64\x2a\x45\x98\x13\x7e\x6f\x05\x45\x66\x10\x2d\x19\x16\xd1\x00\x24\xbc\x8e\xa5\xfb\xac\x7e\xfc\xac\xfe\xec\x39\xfd\xe9\xc4\xa3\x8f\xd9\x09\x3d\x79\x42\x1f\xe3\x4b\x67\x42\xc4\x40\x53\x8a\x14\x44\x42\xfb\x69\x86\x47\x04\x80\xe1\x52\xa4\x80\xbf\x12\x42\xc9\x45\xab\xd3\x3a\x22\xd4\xd7\x8e\x0c\x09\xf8\x19\xa5\xd0\x51\x29\xa6\x24\x5e\xb9\xac\x90\x06\x1a\x5a\x3a\x3e\xa9\xac\x3d\xe0\x16\xf1\xe9\x08\x88\x6c\x04\x0c\x01\x24\xa2\x12\x85\x88\x51\xa4\xda\xda\x9a\xf4\xe9\x94\x1a\xf0\x08\x85\xcc\xf2\xeb\x42\xf9\x42\xe4\xb8\x22\xbe\xe5\xda\x97\x10\x19\x88\x42\xd3\x94\x03\x62\x7e\xe8\xa6\x4a\xba\x01\x9f\xb0\x6b\xe6\xb9\x3a\xd3\x5e\xa7\xbe\xbf\x24\x8e\x47\x0e\xfa\x12\xc2\x57\xdb\xf5\x80\xe8\xae\xa8\x12\x1f\x68\xbf\x7a\xf5\x8a\xec\x3f\x54\x0c\x00\x1f\x4f\x96\xc4\x0b\xa1\x7b\xb6\x88\xc3\x21\x91\x6e\x72\x62\xdc\xe2\xe4\xb3\x6a\xa6\x87\x87\x65\xe4\xba\x47\x3a\x53\xb4\x1d\xfa\x4a\x6b\x75\x64\xd2\xc0\x13\xf1\x92\xf0\x44\x9b\x18\xc0\xc8\x9c\xaa\xe8\x00\x8c\x1c\x48\x46\x41\x98\x09\x33\x57\x38\x43\x18\x6c\xf1\xf9\x0d\xaa\x70\xbb\x03\xa4\x67\x56\x9e\x92\xdf\xdd\x33\x3e\x91\x54\x2e\xdd\x73\x6d\x84\x16\xbb\xe2\x1e\x73\xf3\xd1\xf4\x91\x58\x73\xba\x19\xc1\xad\x5c\xc8\x53\x06\x05\x86\x70\x18\x25\x01\x88\x3b\x8b\x84\x64\xe6\x71\x8c\xa6\x9a\x6e\x5a\x20\x73\x9c\x85\xf2\x99\x30\x1f\xa3\x8a\x7e\xc9\xce\x03\x7a\x2a\x41\xfd\xf1\x3d\x8c\x23\x13\xc9\x59\xad\xc0\x7f\xbc\x18\xb5\xd9\x32\xef\x37\x51\xaf\x28\xff\x39\x3c\x8d\x66\x64\x43\x8d\x0f\xd9\xbb\x9f\x50\xba\x0d\x2d\x70\x88\x29\x6d\x46\x26\x8e\x57\x65\x7b\xe8\x43\x83\x2d\xaf\xc7\xaa\xc2\x4d\x3d\xa5\xe1\xed\xc2\x90\xb5\x39\x31\x59\xe9\x5a\xa9\x0f\x53\xdb\xaf\x90\x82\x7a\x64\x03\x61\x30\xfd\x94\x80\x98\x8f\x73\x4a\xaf\x92\x2f\x9f\x09\x99\xbc\xbb\x86\x2f\x4b\xfe\x1d\x5b\x1e\xe9\x04\xcf\x53\x87\xdf\xf2\x6b\xa9\x5b\xe2\x66\x00\x83\xfe\x21\x05\xf7\x35\x2e\x6d\x40\x71\xbf\x82\x6c\xb1\x5b\x84\xe6\x2f\x76\x7d\x01\x85\xbc\x0b\xd5\x71\xd4\x79\xdf\x19\xfd\xba\xdd\x37\xa9\x3f\x81\xa9\x10\x20\x1e\xa1\x21\x51\x48\x8a\x38\x11\xd4\x48\xec\x71\xa6\x46\x66\x6c\xce\x28\x74\x90\x79\x3b\x0f\x7f\x8b\xa4\xca\x25\xc9\xfc\xa6\x08\x40\x9f\xd3\x83\x8f\xc7\x27\x27\x1f\x8e\x5f\x9e\xd4\xc2\x03\xdc\x7b\x40\x7e\x6d\x9e\xd4\xf1\x64\x12\xa4\x6c\xf3\xe0\x31\x1e\x44\xa2\xf8\x18\x9e\x95\x4b\xed\xf3\x8b\xb3\xc6\xa8\x37\xf8\x0c\x1e\x58\x1d\x0f\xda\xc3\x8b\xb3\xd1\x10\xaa\x4f\x24\xe6\x69\x0c\x31\xd1\xe8\xb6\x06\xbd\x4e\x6b\xfc\xae\x77\xde\x76\x11\xdb\x29\x97\x65\x9a\x00\xb0\xa1\x57\xbe\xdd\xa4\xc0\x04\x55\xc3\x3f\x1e\x60\x39\x81\x62\xd9\x6b\xf5\xc8\x0b\xa8\x99\xd0\x84\xe1\x7f\x94\x4c\xf8\x8c\xec\xbd\x03\xf3\x1e\x11\x11\x41\x8e\x32\x29\x85\x84\x03\xc9\xa0\x47\x26\xa9\x8c\x98\x6f\xb3\x71\xca\x25\x94\xea\x64\x21\x08\x94\x32\x11\xf9\x50\xdf\x3b\x30\x05\x79\x97\xba\x39\x77\xa0\x4c\x62\x09\xba\xc4\x05\x01\x25\x0b\xba\x24\x22\x4d\x72\x7b\xa5\x1d\xda\xbc\xda\xaf\x1b\xb1\x9a\x73\x06\x64\x20\xde\x81\x0f\x70\x5e\x50\x14\xad\xdf\xe8\x76\x9a\xe4\x03\xf6\x09\x84\x96\x08\x1c\x8e\x60\x32\x4c\xac\x3c\x0b\x80\xee\x33\x62\xd5\x26\x08\x44\x3f\x61\xa8\xc0\x5b\xe3\xac\x77\x3e\xd4\xeb\x07\xa8\x03\x9b\xcc\x6f\x11\xc0\x80\x1b\xc1\x96\xfa\x05\x30\x9a\x67\x44\xe9\x14\x85\x88\x69\xc4\xbd\x23\xdd\xdb\x16\x58\x68\xa9\xe9\x9d\x38\x9e\xeb\x4a\xbc\x24\x21\x53\x0a\x8c\x94\xc6\x47\x24\x12\x09\x9c\xac\x56\x2a\x37\x39\x59\x80\xa1\x33\x83\x24\xcd\xa5\xad\xcd\x22\x6c\x60\x2b\x2d\x16\xda\x88\x1a\x0e\xa5\x71\x95\x9c\xd3\xe5\x84\x69\x8e\xfb\x37\xab\x68\xbc\xb5\xb7\xb1\xd8\xec\xdf\xd8\xd0\xba\x25\x97\x20\x0e\xd7\x8d\xc0\x13\x52\x32\x2f\x31\x59\xb6\x4e\x57\xc9\x0e\x14\x59\xcc\x33\x25\x02\x31\x23\x8a\x2e\xd5\x8b\x8f\x51\xf1\xe2\x0e\x7b\xd9\x2b\x26\x63\x8f\xc9\x1e\xfe\x81\x7d\xb4\x8f\x06\xca\xad\x65\x86\x8c\x41\x7f\x0b\xf8\x25\xcb\xec\x08\x61\x16\x09\x6b\xc7\x80\x25\x20\x81\xa7\xdd\x8d\x6f\x9b\x70\x83\x17\xdb\x83\x01\x70\xfb\x03\x6e\xd3\x2f\x18\xb7\xad\x1b\x5c\x8e\xca\x0e\x83\x7f\x8d\x7e\x99\x82\x35\x54\xb0\xa6\x45\x6c\xa3\x88\x3b\x6a\x6b\x03\x4a\x0c\x82\xf4\x09\x9d\x40\x15\xdc\xbf\xc9\x15\x85\x5b\x5d\x77\xa0\xf4\xe5\x9d\x03\x71\x9c\xb9\x55\x1b\xdf\xfa\x30\x63\xbb\x47\x1a\xad\xd7\x64\x06\xf8\x5b\x19\x88\x2c\x34\x96\xc7\xb7\x16\x14\x24\x42\x49\xf0\x35\x5f\xb7\x2c\x92\x70\xc4\xca\xe8\x67\x08\x3f\x1d\x7b\xc6\xb2\x7f\x4f\x21\x53\x7c\x16\x33\xc8\x48\x78\x1b\x00\x82\x21\x9e\x64\x09\x0f\xf0\x20\x08\x4c\xcc\x92\x05\x80\x3b\x08\x57\x88\x07\x16\xad\x7d\x45\xb1\x5c\x4f\x02\x00\x68\xfa\x3c\x2f\x2a\xc1\x41\x44\xad\x14\x99\x30\x8f\x42\x1e\x20\x78\xe3\xc8\x1b\xf0\x33\x99\xa4\x33\xf4\xa6\xae\xc2\x28\xb7\x03\x72\x3b\x46\xe6\x0c\xce\x74\x21\x8f\x12\x1b\x81\x99\x36\xc8\xf6\x0a\x68\x53\xe0\x7b\x64\x72\x5b\x60\xad\x41\x33\x5c\x99\x9e\x5e\xac\x11\x6b\x91\x00\xf8\x40\x61\x8a\x38\x94\x7c\x90\x48\x24\x68\x75\x0d\x8a\x20\x17\x8f\x08\x16\x1f\x3f\xd6\xc6\xab\xdb\xaa\x65\x46\x09\xb9\x34\x36\xa1\x33\xca\xa3\xa3\x95\x7d\xb0\x77\x01\x39\x1a\xc0\x0d\x3e\x9b\x19\xde\xd6\xe3\xc5\xd0\xce\x09\x8f\x25\xaf\x18\x00\x2b\x75\x72\x11\xa0\xd7\xa7\x58\x58\x01\x0e\xa3\x98\xc4\x0b\x84\xb2\x6d\x76\xd8\x1c\xb4\xdb\xdd\xf1\x59\xaf\xd1\xea\x74\xdf\x42\x0a\xac\xfb\x18\x5c\x07\x97\xc4\x44\x2d\x55\x75\x22\x44\x32\x06\xa7\xc7\xe0\x6e\xa6\xf7\x09\x38\xa8\x93\x83\x8f\xf2\x00\xf3\xa0\xb4\x98\x23\x24\xc2\x5c\x28\x12\x34\xa0\xaf\xa6\x51\x9f\x81\xb3\x59\x61\x7e\x5c\xce\xa3\x99\xaf\xb2\xb1\x30\x36\x5e\xcc\x97\x7a\x31\x3c\x37\x7f\x80\x3e\x4a\x80\x15\xd6\x1d\xf0\xd6\xa7\x61\x94\xcf\x00\x15\x88\xc5\x5f\x2c\x0c\xfa\x46\x0a\x5b\xac\x84\x09\x14\x80\xcb\xe6\xe0\x75\x06\x31\xb3\x34\x22\x65\xce\xc1\x5b\xd5\x55\xd7\xd3\x49\x92\x2a\x03\x59\x52\x18\xfa\x40\xe7\xb5\x43\xab\xc5\x24\x0f\x05\x5c\x2e\x3a\x17\xa9\x15\xfc\x9a\x88\xd4\x9b\xe7\x63\x42\x44\x9e\x75\xec\x5a\x2d\x1e\x61\xf3\x82\x1a\x0d\xf2\xc1\x98\xf0\xac\x5e\x2c\x49\x79\x0e\xc3\x34\x66\xf2\x87\xbc\xed\x0a\x4d\x22\xd3\x0a\x46\x61\xc4\x57\x55\x04\x78\x07\x12\xb9\x42\x4d\x87\x7e\xbc\x24\xf0\xb6\x82\xf4\xff\xef\xbf\xff\xf5\x9f\x7c\x59\x3b\xce\x60\x1c\xfc\x3f\x07\x84\xec\x6a\xba\xf5\x8b\x9d\x10\x9b\x7a\x72\x30\xb3\xa1\xae\x0b\x8e\x1e\x0b\x61\x2a\x84\xc2\xe6\x5d\x62\x4e\x4e\xc1\x97\x7a\x2e\xa4\xee\x49\xed\xf9\xf1\xf1\xe3\xfa\x53\xf7\xc9\xd3\xe7\x35\x3d\x0e\x02\x2c\xd0\x05\x2a\x87\x08\xe6\xda\x0b\xb6\xb8\x41\x7a\x5f\x96\x4b\x0f\x89\x89\xc1\x27\xb8\xdc\xb0\x91\x5b\x33\x21\x9a\x1d\xd5\x5e\x12\xdd\x0b\x96\x2f\xb5\x0f\xc9\x21\x44\x00\x35\x62\xdb\x0d\x27\xee\xae\x1c\x27\x12\x4e\x9a\x07\x91\xd9\xe2\x75\xa5\x94\xa1\xf2\xb9\xb7\xf5\xc8\x6f\x68\xc0\xbf\x01\xac\x26\x30\x44\x56\xb2\xab\x4e\xfd\xa4\x72\x4f\x02\xf5\xfb\x12\xa8\xdd\x97\xc0\xf1\x3d\x09\xd4\x9e\xdf\x97\xc0\xb3\xfb\x12\x78\x7a\x5f\x02\x3f\xfd\x49\x02\x1a\x5f\xff\xc9\x77\xed\xde\xd4\xb9\x0f\x11\x76\x9d\x48\xea\x58\x3d\xc2\x3a\x2e\xf8\x15\x87\x4a\xb0\xbc\x17\xc1\x99\x10\xb3\x80\x7d\x0b\x7a\x50\xa9\x1d\x1e\xce\x1c\x2a\x43\x46\x27\xdc\xb9\x7a\xba\x16\x17\x83\x5f\x7f\x00\xcb\x7d\xa7\xd8\xf8\xb6\xf6\xbb\x6b\xf7\x8c\xe5\x92\xa9\xa5\xeb\x27\xae\x67\xbe\x6c\x00\x89\x2c\xa7\x9b\x0c\xb0\xd5\x94\x7b\x20\x54\xb6\xd3\x7a\xdd\x18\xb6\xb3\xb1\x09\xb7\x79\x76\xd1\xc2\x43\xdc\x63\xe2\xec\x47\x63\xe8\x1f\x55\x0f\x44\x75\x2e\x73\x5b\x80\x5f\xd8\xd2\x9b\x43\xff\x57\xf8\x51\x8f\x47\xd5\xcb\xec\x37\x71\x46\x44\xef\x79\x26\x3c\x72\x71\xe9\xaa\xf8\xac\xf8\xd0\xf2\xd8\xc9\xcd\xe7\x0a\xd0\xc3\x24\x45\x00\x57\x8d\x6b\xf5\x6f\xcd\x94\x38\x7d\x52\xa9\x7c\x99\xf5\xf7\xd0\x17\xbf\xee\x00\x88\x4c\x58\x23\x8e\x7b\x51\x27\x49\x23\xeb\x84\x3f\xb2\xba\x2c\xee\xc1\x4f\xca\xd0\x06\x85\x9f\x42\xe3\xcc\xad\x33\x31\xd8\xe2\x78\x8c\x63\x9d\xde\xd7\x9b\x20\x42\xe4\xd9\xe9\x37\x44\xc4\x47\x5f\x62\x0d\xd7\xd6\xb3\x74\xcc\x03\x1c\xce\xf4\xfb\x40\x19\xe7\x37\x4d\x19\xb9\x39\x3c\xa6\xd9\xf7\x01\x47\x5d\xf2\x78\x8c\xc8\x15\x1a\xeb\x18\x12\x77\xac\xf7\xed\x63\x90\xcf\x03\xcc\x8c\x90\x42\x2f\x5f\x56\x9f\xd5\x74\xcb\xf1\xfd\xe1\x02\x42\x75\x08\x9d\xda\xb3\x32\x35\x06\xcd\x77\x9d\xf7\xed\xf5\x68\x8f\xe2\xac\x7e\xac\xd7\x9a\xbb\x56\xf0\xae\x21\x97\xc6\xe8\xd6\xc2\xba\x73\x85\x4b\x7c\x1f\x65\xc9\xb3\xb5\x0b\x55\xe0\xa3\x01\xef\x7e\xcd\xb4\xfe\x34\xfa\x27\x8f\x89\xf3\x8f\xdc\xb6\xbf\x5e\x45\x8d\x81\xfd\xea\x51\x12\xc6\x70\x55\x86\x9b\x97\xe0\x61\x96\xa5\xb2\x70\xb9\x28\xa1\xf9\x26\x24\x10\xf9\xe3\xe6\x4d\x4e\x77\x7f\x59\xd8\xfd\x92\xfb\xa8\xea\x2f\x03\x3e\xf9\x0a\xfa\xf6\x2a\xf2\xd9\x12\x5e\x6b\x09\x52\x56\xad\x7e\xd5\xec\x5a\xd5\xad\x56\x8d\x72\x05\xc9\xf4\x5b\x66\xf1\xd4\xe9\x0d\x3b\x91\x27\x19\x7e\x08\x7c\x8d\xfe\xee\xa6\xe1\xc4\xfe\x47\x2e\x9b\xdf\x6c\xca\x25\x80\x3d\x21\x87\x4a\x96\x46\x09\xe0\x56\xfc\x16\x2c\xd9\x95\x63\x3e\xaf\x64\x05\xd2\xc3\xc3\x43\xfd\x8d\x5f\x16\x89\xde\xbd\x42\xae\x98\x15\x72\xf3\xcd\xeb\x34\xf2\x03\xf6\x1e\x70\x1c\x64\x72\x05\x53\xbb\x13\x4d\x85\xf9\x88\x83\x8b\x8a\x88\x2d\xf2\x44\xb1\x1c\x64\x43\x70\x4e\x3a\x33\x02\xc3\xa3\x2d\x29\xf2\x31\xb5\x41\x2a\x4f\x60\x35\xd7\x6f\xde\x79\xf8\x70\x07\xd1\x1f\x6b\x87\x87\x06\x5c\x96\xee\x52\x71\x08\x43\xf3\x8b\x0d\x0d\xc9\x7e\x91\x03\x7e\xaf\xcb\xab\x5c\xd1\xbb\x19\x88\x7a\xd2\x19\x0d\xa1\xf4\x5c\x28\xa6\xba\x22\x6a\x5f\xb3\x10\x3f\xe3\x7a\x72\x69\xc6\x65\x9c\x54\x70\xc9\x9f\xad\xc5\xcd\x32\x04\xa6\xf4\x72\x89\x46\x6a\xc1\xe4\x48\xac\x2f\x7f\x95\x27\xee\x64\xb7\x25\xe5\xa1\xf1\xc2\x07\xb2\xbf\xcd\x0e\x17\xb7\x8f\x2a\x2d\xc4\xc0\x5d\x28\x45\x6d\xdc\x74\x57\x1e\x91\x4f\x6b\x47\xdc\x25\x0d\xaa\xfe\xe2\x6e\xdd\x27\xf8\x89\x57\x6b\xbf\x6d\x3d\x13\xe8\xff\x0b\x00\x00\xff\xff\x99\x8d\xbc\xb9\x43\x26\x00\x00")

func scriptsBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBash,
		"scripts.bash",
	)
}

func scriptsBash() (*asset, error) {
	bytes, err := scriptsBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.bash", size: 9795, mode: os.FileMode(420), modTime: time.Unix(1468072115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.bash": scriptsBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.bash": &bintree{scriptsBash, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

