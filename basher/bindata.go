// Code generated by go-bindata.
// sources:
// scripts.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x5a\xfb\x52\x1b\x47\xd6\xff\x5b\x7a\x8a\x8e\xa0\x8c\x71\x18\x0d\x12\x76\x7c\x25\x5f\xc9\x92\x6c\xeb\x0b\x20\x15\x12\xde\x4a\xd9\x2e\xaa\x35\xd3\x92\x7a\x99\xe9\x9e\xed\x99\x41\x68\x1d\xf2\x06\xfb\x0c\xfb\x1e\xfb\x54\xfb\x08\x7b\x4e\x5f\xa4\x19\x21\x30\x09\x8e\x2b\xc1\x4c\x5f\xce\xbd\xcf\xf9\x9d\x6e\x8f\x58\x9a\x0d\x03\xc5\x93\xec\xf1\x2e\xf9\x5a\xad\xb0\x60\x26\xc9\x76\xa3\x5a\x49\x23\xc6\x12\x02\xbf\x44\x29\xf1\x22\x5a\xbd\xae\x56\x57\x6b\x9b\x66\xf1\x71\x77\x38\x6c\xbd\xef\x1e\xe2\xfa\xa3\xfe\xfb\x77\xbd\xa3\xee\xf0\x70\xbb\x79\x83\x4a\xd3\x51\x21\xcd\x9f\x1f\x35\xc8\x6f\x24\x63\x8c\xc0\x3a\xa0\xf9\x5e\xd1\x30\x62\x7f\x53\x34\x49\x98\x32\x54\xa7\x7a\x88\xcc\xcd\xd8\x6a\xd1\x7c\x44\xd3\x0b\xb3\x64\xd0\x3a\x6d\x1d\x0f\x1d\xdf\xf3\x41\x6b\xf4\x41\xf3\x3d\xa6\x17\xec\x9d\x8c\x42\xa6\xd2\x6a\xa5\xee\x1b\x4a\x73\x52\xdb\x6e\xd4\x6e\xb2\xc6\x3f\x85\x0d\x86\x72\x7c\x11\x72\x45\xbc\x84\xd4\xf3\x24\x9d\xf1\x49\xe6\x47\x72\x9a\xfa\x9b\x26\xc6\x39\x8f\xc2\xd2\x4c\xa2\xf8\x25\xcd\x18\x12\x3f\x4b\x90\x39\x2b\x9a\x36\xc8\x55\x44\xbc\x49\x3a\x3c\x22\xb3\x2c\x4b\xd2\x57\xbe\xaf\xe8\xbc\x3e\xe5\xd9\x2c\x1f\xe7\x29\x53\x81\x14\x19\x13\x59\x3d\x90\xb1\x1f\xb1\x49\xa6\xd9\x80\x64\xbe\xe3\x18\xd3\x14\xbe\x7d\x2e\xd2\x8c\x46\x51\x3d\x9d\x91\x9f\x89\x9d\xab\x67\x2c\x4e\xc8\xa3\x47\x24\x98\xc5\x32\x24\x3f\x5e\xdd\x98\xa8\xfb\xeb\x23\x2a\x2e\x2d\x42\xb1\x87\x2c\xcb\x93\xb7\x0a\x6c\x2d\x65\x64\xc4\x1e\xf5\xfb\x47\xda\xd2\x63\x18\x26\x96\xb7\x76\x2e\xbb\xe2\x19\xd9\x5f\x6e\x7b\xcf\x62\xb3\xe3\x7d\xf7\x58\x6f\x68\xf7\xb4\x53\x4e\xa5\xcc\x06\x34\x4d\xe7\x52\x85\x87\xdb\x07\xd5\x6a\x85\x4f\xc8\x27\x70\x4a\xb3\x46\x0e\x0f\x49\x2d\x53\x39\xab\x91\x2f\xaf\x49\x36\x63\xa2\x5a\xa9\x6c\x91\x76\x8f\xf0\x94\xe0\xf8\x1e\x99\x33\x22\xe4\x9c\x08\xc6\x42\x92\x58\x2a\xb0\xc8\x92\x38\xa8\x91\x1f\x80\x44\x71\xbb\x09\x3e\x8f\x99\xd9\xdf\x48\x9a\x87\xf0\x39\x24\x53\x16\x97\xa4\xaf\x38\xf9\xe1\x97\x28\x65\xcb\x01\x9c\x9a\xf0\xaa\x1b\xdc\x22\x67\xe0\x1a\x92\xce\x64\x1e\x85\x24\x5b\x24\x0c\xa8\x20\xaf\xa2\x34\xb7\xf2\x70\x2c\x80\x20\xc6\x31\xcf\x06\x79\x64\xed\x7a\xda\x3d\xee\x8f\xcc\xd9\x79\x7b\xda\x3a\x69\x9b\x08\xb6\xc7\x08\xed\x54\x8e\x66\x08\x13\x92\xe4\x9a\x2e\xc4\x6f\x29\x9a\x0f\x2c\xed\x61\x3e\x06\xdf\xe7\x11\xeb\x09\x6e\x63\x6e\x49\xae\xb1\x81\x5c\xea\xd6\x83\xcc\xf0\x59\x24\xd9\x58\x27\x79\x96\x84\x10\xd9\x7f\x88\x68\xae\xb7\xdc\x24\x3b\x90\x61\xcf\xd8\xe8\x1b\xe4\x12\x08\x64\x67\xcd\x12\x95\x8a\x25\x73\xca\x12\x79\x9b\x60\x67\x26\xb2\xdb\x52\x4c\xf8\xd4\xd0\x52\xb0\xdc\x49\xe5\x79\x97\x4c\x8d\x65\xca\x36\x50\x1e\x66\x54\x65\x43\x1e\xe7\x11\xcd\xa4\x4d\x4a\x9d\xee\xc7\x5e\x7b\x83\x8c\x57\x81\xca\x85\x96\x52\xe5\x31\x1c\x5e\x48\x73\x36\xdf\x34\x7e\xf6\x43\x76\xe9\x8b\xdc\x4a\x8f\x94\xdb\x32\x4e\x38\xf8\xa7\x3f\xb4\x79\xec\xb4\xff\xff\xdd\xf6\xe8\x7c\xf4\xeb\xc0\xd0\x76\x03\xcb\x8c\x36\x6c\x7f\xe8\x1e\x9b\x70\x70\x22\x3c\x2d\x26\xbd\x67\x6b\xf2\xa4\x2c\x23\x9e\x24\x09\x4f\xd8\x84\xf2\x08\x8f\xf9\x55\x20\x43\xa6\x93\x15\xf1\xb4\x64\xfa\xe4\x79\x69\x30\x63\xb1\x3d\x25\xde\x8c\x43\xae\x9a\xb1\x28\x32\x09\xab\x2b\x2e\xb9\x92\x02\x15\x82\x85\xe1\x05\xe1\xc9\x4c\x0a\x96\x3a\x9b\x10\x2f\x84\x5a\xc0\x05\xcd\xb8\x14\xa4\x96\xc0\xe0\x44\xaa\xf8\x70\x6d\xd9\x9e\xa0\x31\x03\x81\x6b\xb8\x1e\x72\x23\x0b\x3b\x34\xa3\x03\x9a\xcd\xd6\xb2\xa8\xb5\x7f\x6d\xfb\x19\x9e\xd8\xab\x20\x51\x2c\xcb\x16\xae\xe6\xfc\x85\xe6\xba\x0a\x32\x48\x74\xb7\xdb\xe5\x7b\xe8\x9e\xc1\xf2\x82\x82\xa8\x55\x4b\x05\x33\x30\xc7\x9f\x53\xcc\xcd\x9d\xb4\x8e\xff\xa2\x68\xf8\x86\xb3\x3c\x6a\xc4\x2f\xcf\x6d\x3f\xad\x5f\x05\x76\x86\xb8\xbf\x6f\xf5\x6b\xf7\x2a\x91\xea\xa6\x67\x8d\x4e\x77\x96\xf5\x6f\xe8\xc4\x34\x61\x6b\x60\xf7\xd9\x4f\xd0\x59\xe9\x20\xe2\xe0\x0a\x57\xa6\x7d\x33\x57\x4f\xf4\xe8\x2d\x4a\x35\x0a\x4a\x59\x62\xe5\x15\xc5\xfc\xa1\x4d\x59\xd6\xf3\x1d\xcb\x82\x59\x4b\x60\xaa\xa2\x5c\x0d\x94\xbc\xe4\x29\x88\xc2\xc5\x14\x7e\x9f\x40\x2e\xb0\xb8\x63\x0b\x4a\x0a\xd4\x3c\x80\x01\x29\x49\xf9\x74\x86\x23\xa1\x9c\x8b\x48\xd2\x90\x60\x02\xe4\x22\x93\x4b\xd1\xc9\x44\x5b\x03\x17\x51\x11\xea\xca\x47\x30\x0f\x61\x59\x9a\xe4\x22\xd0\xa1\x39\x90\x09\x86\x22\xdb\xc4\xb4\x5a\x69\xb5\xdb\xfd\xb3\x93\xd1\x79\xf7\xb8\xd5\x33\xf5\x1d\xd9\x62\x8e\xa4\x88\x66\x72\xb2\x1c\x72\x62\x9c\xa3\x18\x76\x62\x85\x79\xfc\x25\xea\xa9\xc4\x97\xe4\x49\x3d\x96\x63\x60\x90\x38\x9e\x2b\x50\x54\xb9\x53\x1e\x34\x15\x17\xe1\x86\xb9\x65\xfe\xed\x1e\xf5\x07\xdd\xd3\x73\x2b\xb8\x29\x9c\x67\x27\x9d\xa3\xee\x79\xaf\xd3\x3d\x19\xf5\xde\xf5\xba\xa7\x3a\x5c\xb4\xd4\x5a\x50\xf0\xaa\x05\x7b\x77\x31\x77\x1e\x78\x0f\x91\x85\x16\x3c\x3b\xeb\x75\xc8\x44\xc9\xb8\x20\xfc\xd6\x12\xb3\x4d\x21\x5a\x2c\x68\xd3\x48\x2d\xbe\x4a\x94\xff\xa2\xb9\xff\xa2\xf9\xe2\x25\xfd\xe9\x20\xa0\x4f\xd9\x01\x3d\x78\x46\x9f\xe2\xa6\x23\x29\x13\xa0\xa9\x64\x0e\x22\xa1\xfd\x34\xc3\x3d\x02\xf0\x65\x21\x73\xc0\x0b\x19\xa1\xe4\xac\xd3\xeb\xec\x11\x1a\x6a\x47\xc6\x04\xfc\x8c\x52\xe8\xa8\x94\x13\x92\x2c\x5d\x56\x3a\x06\x1a\x00\x79\x21\xa9\xad\x3c\xe0\x97\x51\xd4\x08\x88\xac\x05\x0c\x01\x3c\x92\x66\x29\x22\x1c\x99\x6b\x6b\x6b\xd2\x87\x13\x6a\xc0\x0e\x24\x32\xc7\xef\x04\xd2\x17\x22\x9d\x25\xf1\x1b\xae\x7d\x0d\x91\x81\xa8\x29\xcf\x39\xe0\xba\xc7\x7e\x9e\x2a\x3f\xe2\x63\x76\xc5\x02\x5f\x9f\xb4\xb7\x79\x18\x2e\x88\x17\x90\x9d\x81\x82\xf0\xd5\x76\xdd\x21\xba\x2a\xa6\x59\x08\xb4\xdf\xbc\x79\x43\xb6\x1f\xa7\x0c\x90\x31\xcf\x16\x24\x88\xa1\x7a\x76\x88\xc7\xe1\x20\x7d\x2d\x88\x71\x8d\xe0\x7d\x59\x4c\x77\x77\xab\xc8\x75\x8b\xf4\x26\x68\x3b\xf4\x95\xd6\x6a\xcf\x1c\x83\x40\x26\x0b\xc2\x33\x6d\x62\x80\x23\x33\x9a\x8a\x1d\x30\x72\xa4\x18\x05\x61\xc6\xcc\x2c\xe1\x0c\x61\x9b\x43\x91\x5f\x51\x85\xeb\x0d\x50\xd2\x5a\x79\x42\x7e\xf7\x8f\xf8\x58\x51\xb5\xf0\x8f\xb5\x11\x3a\xec\x92\x07\xcc\x2f\x46\xd3\x67\xe2\xcc\xe9\x5b\x82\x37\xce\x42\x91\x32\x28\x30\x84\x49\x91\x45\x20\xee\x54\x48\xc5\xcc\x70\x82\xa6\x9a\xac\x5b\xc0\x3a\xce\x41\x4f\x2b\xcc\x67\x51\xd3\x9b\x1c\x7e\xd5\xd8\x19\xf5\xc7\x7d\x18\x47\x26\x92\x6d\xae\xc0\x3f\x41\x82\xda\xdc\x30\xef\x77\x51\xaf\x2c\xff\x31\x8c\x8a\x29\x59\x53\xe3\x93\xdd\xfb\x05\xa5\x5b\xd3\x02\x41\x77\x65\x3d\x32\xb1\x09\xa8\xba\xc9\x10\x0a\x6c\x75\x05\xfe\x4b\x2b\x75\x2f\x81\xab\x4b\xad\xc0\x3a\xc2\x77\xd2\x75\xf2\x10\x7a\x8b\x5f\xe1\x08\xea\xc6\x02\x84\xc1\xe3\x97\x4a\x88\xf9\xa4\xa0\xf4\xf2\xf0\x15\x4f\x82\x95\x77\x53\xb3\xe0\xc8\x7f\x60\x8b\x3d\x7d\xc0\x8b\xd4\xe1\x5b\xdd\x97\xba\x23\x6e\xfa\x06\xa8\x1f\x4a\xf2\xf0\x4c\xf0\x35\xdc\x6c\x4b\xe4\x3a\x28\x5d\x75\xbe\xb9\xdb\xd2\x5a\xc7\xd0\x05\xba\x16\x8d\x77\xa0\x84\x4e\xef\x4f\x9a\x17\x76\x01\x9c\x86\x8f\xe0\x22\x53\x34\xd8\x80\xf8\x2d\x9f\x56\x9a\xb2\x78\x1c\xb1\xfb\xf3\xa0\x76\xc7\xfd\xe8\x1f\x81\xf1\xef\x4f\x3b\xc2\x94\x74\x1b\x29\xdd\x02\xb4\xa0\x8e\x5e\x42\x62\x72\x77\x0e\xed\x5f\xdc\x65\x07\xd4\xcc\x13\x28\x44\xa3\xde\xc7\xde\xe8\xd7\x9b\x10\x85\x86\x63\x68\x18\x01\x4d\x13\x1a\x93\x14\x49\x11\x4f\x00\x03\x84\x13\xa6\x1c\x39\x89\x29\x14\xeb\x59\xb7\xd8\x69\x94\x49\x55\x2b\x8a\x85\x6d\x19\x41\xe8\x1c\xee\x7c\xde\x3f\x38\xf8\xb4\xff\xfa\xa0\x11\xef\xe0\x2d\x09\xa4\xb2\xf5\x99\x26\xce\x8c\xa3\x9c\xad\x4f\x3c\xc5\x09\x21\xcb\xc3\x30\x56\xad\x74\x8f\xcf\x8e\x5a\xa3\xfe\xe9\x2d\xd0\x6b\x39\x7d\xda\x1d\x9e\x1d\x8d\x86\x90\xe8\x85\x9c\xe5\x09\x1c\xbf\xd6\x49\xe7\xb4\xdf\xeb\x9c\x7f\xe8\x1f\x77\x7d\x84\xd1\xa9\xcf\xac\x26\x80\x21\xe9\x65\xe8\xee\x5d\xa0\x5d\x6d\xe0\x8f\x47\x98\xb9\xa1\x2e\xf5\x3b\x7d\xf2\x0a\xca\x13\xe0\x1d\xf8\x8f\x92\x31\x9f\x92\xad\x0f\x60\xde\x3d\x22\x05\xa4\x43\xa6\x94\x54\x30\xa1\x18\xc0\x91\x2c\x57\x82\x85\x2e\xf1\x4d\xb8\x82\xaa\x98\xcd\x25\x81\xaa\x21\x45\x08\xa5\xb4\x07\x2d\x67\x70\xa1\x71\x50\x0f\x2a\x12\x66\xfb\x0b\xbc\x31\xa0\x64\x4e\x17\x44\xe6\x59\xe1\x16\x6a\x83\x36\x6f\xb6\x9b\x46\xac\xf6\x8c\x01\x19\x48\x2d\xc0\x07\x38\xcf\x29\x8a\x36\x68\x9d\xf4\xda\xe4\x13\x96\x64\x44\xf1\x88\xd1\xf6\xa0\x0d\xcf\x9c\x3c\x73\xe8\x92\xa6\xc4\xa9\x4d\x10\xf3\x7f\xc1\x50\x81\x5d\xe7\x16\xa6\x3c\xd6\xf7\x11\x90\x72\xd7\x99\x5f\x23\x56\x04\x37\x82\x2d\xf5\x06\x30\x5a\x60\x44\xe9\x95\x85\x48\xa8\xe0\xc1\x9e\x86\x11\x73\xac\x69\xd4\xc0\x14\xbc\x32\xd2\x45\x6f\x41\x62\x06\x07\x25\x84\xde\x76\x8f\x08\x99\xc1\xcc\xf2\x8e\xe5\x6b\x41\x16\x60\xe8\x4d\x21\x1f\x16\x32\xa4\x4b\x58\x88\x15\x96\x5a\xcc\xb5\x11\x35\xf2\xcc\x93\x3a\x39\xa6\x8b\x31\xd3\x1c\xb7\xbf\x2e\xa3\xf1\xda\xad\xc6\xbc\xbe\xfd\xd5\x85\xd6\x35\xb9\x00\x71\xb8\xae\xb9\x81\x54\x8a\x05\x99\x49\x68\xab\xcc\xa8\xd8\x4e\x4a\xe6\x33\xab\x44\x24\xa7\x24\xa5\x8b\xf4\xd5\x67\x51\x5e\xb8\xc1\x5e\x6e\x89\x49\x8e\xfb\x64\x0b\x7f\x20\x64\x19\xa0\x81\x0a\x37\x36\x43\xc6\x00\x4a\x44\xfc\x82\x59\x3b\x42\x98\x09\xe9\xec\x18\xb1\x0c\x24\x08\xb4\xbb\x71\xb7\x09\x37\xd8\xd8\x3d\x3d\x05\x6e\x7f\xc0\x6d\x7a\x83\x71\xdb\x0a\x4b\x14\xa8\x6c\x30\xf8\x7d\xf4\xb3\x0a\x36\x50\xc1\x86\x16\xb1\x8b\x22\x6e\x28\x63\x98\xd5\xb1\x1f\x1a\xd3\x31\x14\x9c\xed\xaf\x85\xa4\x70\xad\xf3\x0e\x54\x99\xa2\x73\x20\x8e\xad\x5b\xb5\xf1\x9d\x0f\x2d\xdb\x2d\xd2\xea\xbc\x25\x53\x68\x75\x52\xd3\x8d\x48\xdd\x36\xe1\xae\x39\x05\x89\x50\x12\xdc\x16\x6a\x74\x40\x32\x8e\x6d\x09\xfa\x19\xc2\x4f\xc7\x9e\xb1\xec\xdf\x73\x38\x29\x21\x4b\x18\x9c\x48\xd8\x0d\x58\xcc\x10\xcf\xec\x81\x07\x24\x16\x45\x26\x66\xc9\x1c\x70\x34\x84\x2b\xc4\x03\x13\x2b\x5f\x51\xac\x8c\x90\xf6\x63\x33\x5f\x14\x95\x60\xcf\x97\x2e\x15\x19\xb3\x80\xc2\x39\x40\x9c\xcc\x91\x37\xb4\x2a\x04\xea\x11\x7a\x53\x67\x61\x94\xdb\x03\xb9\x3d\x23\xb3\x45\x8e\x27\x70\x8e\x32\x17\x81\x56\x1b\x64\x7b\x09\xb4\x29\xf0\xdd\x33\x67\x5b\x62\xae\x41\x33\x5c\x1a\xf8\x54\xce\x11\x2b\x91\x00\x63\x42\x62\x12\x1c\x52\x3e\x48\x24\x33\xb4\xba\xc6\x9f\x70\x16\xf7\x08\x26\x9f\x30\xd1\xc6\x6b\xba\xac\x65\xba\x36\xb5\x30\x36\xa1\x53\xca\xc5\xde\xd2\x3e\x08\x13\x80\x1c\x8d\x60\x05\x9f\x4e\x0d\x6f\xe7\xf1\x72\x68\x17\x84\xc7\x94\x57\x0e\x80\xa5\x3a\x85\x08\xd0\xf7\xa9\x98\x58\xa1\xf3\x40\x31\x49\x10\xc9\xd4\x21\x9a\x61\xfb\xb4\xdb\x3d\x39\x3f\xea\xb7\x3a\xbd\x93\xf7\x70\x04\x56\x75\x0c\x96\x83\x4b\x12\x92\x2e\xd2\xfa\x58\xca\xec\x1c\x9c\x9e\x80\xbb\x99\xbe\xba\xc1\x3b\x11\xb2\xf3\x59\xed\xe0\x39\xa8\xcc\x67\x88\x3e\xf1\x2c\x94\x09\x1a\x7c\xdd\xd0\x00\xdb\x74\x0e\x36\x31\x3f\xad\x16\x81\xe3\xbd\x6c\x2c\x8d\x8d\xe7\xb3\x85\xbe\x29\x9e\x99\x1f\xa0\x4f\x2a\xc1\x0a\xab\x0a\x78\x1d\xd2\x58\x14\x4f\x40\x1a\xc9\xf9\xff\x39\xc4\xf9\x9d\x14\x76\xb0\x14\x0f\x50\x04\x2e\x9b\x81\xd7\x19\xc4\xcc\xc2\x88\x64\x9d\x83\xab\xea\xcb\xaa\xa7\x0f\x49\x9e\x1a\x74\x98\x43\x7f\x0d\x3a\xaf\x1c\x5a\x2f\x1f\xf2\x58\xc2\xe2\xb2\x73\x91\x5a\xc9\xaf\x99\xcc\x83\x59\x31\x26\xa4\x08\x9c\x63\x57\x6a\x71\x81\xc5\x0b\x72\x34\xc8\x07\xf0\xe7\x45\xb3\x9c\x92\x8a\x1c\x86\x79\xc2\xd4\x0f\x45\xdb\x95\x8a\x84\xd5\x4a\xe5\x02\xa1\x6c\x1d\xb1\xf4\x8e\x42\xae\x90\xd3\xa1\x1e\x2f\x08\xec\x4e\xe1\xf8\xff\xf7\xdf\xff\xfa\x4f\x31\xad\xed\x5b\xc4\x0c\xff\x17\xa1\xad\x7d\x2e\xe9\xfc\xe2\x9a\xf1\xb6\x6e\xd2\x4c\x1b\xae\xf3\x82\xa7\x3b\x70\x68\xc0\x35\x12\xc4\x33\x39\x01\x5f\xea\x16\x9c\xfa\x07\x8d\x97\xfb\xfb\x4f\x9b\xcf\xfd\x67\xcf\x5f\x36\x74\xe7\x0d\xb0\x40\x27\xa8\x02\x22\x98\x69\x2f\xb8\xe4\x06\xc7\xfb\xa2\x5a\x79\x4c\x4c\x0c\x3e\xc3\x7b\x24\x17\xb9\x0d\x13\xa2\x76\xaa\xf1\x9a\xe8\x5a\xb0\x78\xad\x7d\x48\x76\x21\x02\xa8\x11\xdb\xdd\x26\xe3\x35\xa1\xe7\x09\xe9\xe5\xfc\x26\xae\x5e\x2a\x65\xa8\xdc\xb6\x5b\xdf\xae\x18\x1a\xf0\x37\xf4\x05\x19\xf4\xeb\x35\xbb\xd4\x6b\x1e\xd4\x1e\x48\xa0\xf9\x50\x02\x8d\x87\x12\xd8\x7f\x20\x81\xc6\xcb\x87\x12\x78\xf1\x50\x02\xcf\x1f\x4a\xe0\xa7\x3f\x49\x40\xe3\xeb\x3f\xb9\xd7\x5d\x51\x7b\x0f\x21\xc2\xae\xa0\xf9\xf2\x9c\x1e\x71\x13\x1f\x53\x52\x0e\x99\x60\xf1\x20\x82\x53\x29\xa7\x11\xfb\x1e\xf4\x20\x53\x7b\x3c\x9e\x7a\x54\xc5\x8c\x8e\xb9\x77\xf9\x7c\x25\x2e\x06\xbf\x7e\x94\x2d\xbc\x09\xad\xbd\xf7\xfe\xee\xbb\x2b\xdd\x6a\xc5\xe4\xd2\xd5\x88\x1f\x98\x57\x24\x20\x61\xcf\x74\x9b\x01\xb6\x9a\xf0\x00\x84\xb2\xd7\x87\x6f\x5b\xc3\xee\xaa\xe7\x5c\xde\x69\xf1\x18\xaf\x8c\xb1\xf7\xa3\x09\xd4\x8f\x7a\x00\xa2\x7a\x17\x85\x0b\x97\x5f\xd8\x22\x98\x41\xfd\x4f\xf1\xa1\x99\x8b\xfa\x85\xfd\x26\xde\x88\xe8\x2b\xb5\x31\x17\x3e\xde\x6f\xa7\x7c\x5a\x1e\x74\x3c\x36\x72\x0b\x79\x0a\xe8\x61\x9c\x23\x80\xab\x27\x8d\xe6\xf7\x66\x4a\xbc\x01\xa9\xd5\xbe\xcd\xfa\xaf\xd0\x17\x1f\xd2\x00\x44\x66\xac\x95\x24\x7d\xd1\xcb\x72\xe1\x9c\xf0\x47\x6e\x89\xcb\x4f\x0e\x07\x55\x28\x83\x32\xcc\xa1\x70\x16\x6e\x8e\x31\xd8\x92\xe4\x1c\xdb\x3a\xfd\x34\x62\x82\x08\x91\x67\x6f\xd0\x92\x82\x8f\xbe\xc5\x1a\x96\xad\x7a\xe9\x84\x47\xd8\x9c\xe9\xfd\x40\x19\xfb\x37\x4d\x19\xb9\x79\x3c\xa1\xf6\x29\xc6\x4b\x2f\x78\x72\x8e\xc8\x15\x0a\xeb\x39\x1c\xdc\x73\xfd\xb4\x71\x0e\xf2\x05\x80\x99\x11\x52\xe8\x7b\xae\xd5\x13\xa6\xae\x39\x61\x38\x9c\x43\xac\x0e\xa1\x54\x07\x4e\xa8\xd6\x69\xfb\x43\xef\x63\x77\xd5\xdb\xa3\x3c\xcb\x8f\xd5\x15\xf2\xa6\xe7\x0e\xdf\x90\xcb\x13\xf4\x6b\xe9\x6a\x79\x09\x4c\xc2\x10\x85\x29\xb2\x75\x97\xd7\xc0\x47\x23\xde\xed\x86\xa9\xfd\xb9\xf8\x27\x4f\x88\xf7\x8f\xc2\xcb\x4a\xb3\x8e\x2a\x03\xfb\xe5\x50\x16\x27\xb0\x54\xc5\xeb\x8b\x60\xd0\x1e\x53\x55\x5a\x5c\x96\xd0\xbc\xbf\x49\x84\xfe\x78\xcb\xa9\x26\x9b\x5f\x71\x36\x6f\xf2\x9f\xd4\xc3\x45\xc4\xc7\xf7\xa0\xef\x96\x22\x9f\x1b\xc2\x6b\x2d\x41\xca\xba\xd3\xaf\x6e\x97\xd5\xfd\x7a\xdd\x28\x57\x92\x4c\xef\x32\x97\x7c\xbd\xfe\xb0\x27\x02\xc5\xf0\xd1\xf5\x2d\x3a\xfc\x24\x8f\xc7\xee\xdf\xc4\xac\xbf\x8f\x55\x2b\x80\x7b\x62\x0e\xa9\x2c\x17\x19\x00\x57\x7c\x79\x57\xec\xd2\x33\x4f\x59\x36\x43\x06\x38\xb9\xab\xff\xe1\x89\x2a\x13\xbd\xfb\xba\xbe\x66\xae\xeb\xdb\xef\xde\xe6\x22\x8c\xd8\x47\x00\x72\x70\x94\x6b\x78\xb6\x7b\x62\x22\xcd\x83\x19\xde\x54\x08\x36\x2f\x12\xc5\x7c\x60\xbb\xe0\x82\x74\xa6\x07\x86\xa1\x1b\x52\x14\x63\x6a\x8d\x54\x91\xc0\xb2\xb1\x5f\x5f\xf3\xf8\xf1\x06\xa2\x3f\x36\x76\x77\x0d\xba\xac\xdc\xa5\xe2\x10\xba\xe6\x57\x6b\x1a\x92\xed\x32\x07\x7c\x1b\x2d\xaa\x5c\xd3\x97\x33\x10\xf5\xa4\x37\x1a\x42\xee\x39\x4b\x59\x7a\x22\x45\xf7\x8a\xc5\xf8\x64\x1e\xa8\x85\xe9\x97\xb1\x55\xc1\x07\x15\xfb\x04\x61\x6e\x43\xa0\x4d\xaf\x56\xa8\x48\xe7\x4c\x8d\xe4\x6a\xf1\xbd\x3c\x71\x27\xbb\x1b\x52\xee\x1a\x2f\x7c\x22\xdb\x37\xd9\xe1\x25\xf9\x93\x5a\x07\x41\xf0\x09\xe4\xa2\x2e\xbe\x2a\xd4\x9e\x90\x2f\x2b\x47\xdc\x25\x0d\xaa\xfe\xea\x6e\xdd\xc7\xf8\x9c\xae\xb5\xbf\x69\x3d\x1d\xe8\xff\x0b\x00\x00\xff\xff\x7f\xb6\x29\xf9\x71\x26\x00\x00")

func scriptsBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBash,
		"scripts.bash",
	)
}

func scriptsBash() (*asset, error) {
	bytes, err := scriptsBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.bash", size: 9841, mode: os.FileMode(420), modTime: time.Unix(1467955874, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.bash": scriptsBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.bash": &bintree{scriptsBash, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

