// Code generated by go-bindata.
// sources:
// scripts.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x3a\xeb\x72\xda\x48\xd6\xbf\xe1\x29\x7a\xb0\x2b\x8e\x33\x16\x18\x9c\x4c\xae\x9e\xaf\x08\x10\x47\xdf\xd8\x40\x01\xce\xd6\x54\x92\xa2\x1a\xa9\x81\x5e\x4b\x6a\x6d\xab\x65\xcc\x66\xbc\x6f\xb0\xcf\xb0\xef\xb1\x4f\xb5\x8f\xb0\xe7\x74\xab\x41\x02\xe2\x64\xc6\x9e\x1f\xeb\x9a\xb1\x41\x7d\xfa\xdc\xef\xca\x88\x25\x6a\xe8\x49\x1e\xab\xc7\x87\xe4\x4b\xb9\xc4\xbc\xb9\x20\xfb\xf5\x72\x29\x09\x18\x8b\x09\x7c\x08\x12\xe2\x04\xb4\x7c\x5b\x2e\xaf\x61\x1b\x06\xf8\xa2\x33\x1c\x36\xcf\x3a\xa7\x08\x7f\xde\x3b\x7b\xe7\x9e\x77\x86\xa7\xfb\x8d\x2d\x2c\x0d\x8b\x85\x34\x7e\x7e\x54\x27\xbf\x11\xc5\x18\x01\x38\xc0\x79\x26\xa9\x1f\xb0\xbf\x48\x1a\xc7\x4c\x1a\xac\x33\xfd\x88\x2c\xcc\xb3\x35\xd0\x62\x44\x93\x2b\x03\xd2\x6f\x0e\x9a\x17\x43\x4b\x77\xdc\x6f\x8e\xde\x6b\xba\x17\xf4\x8a\xbd\x13\x81\xcf\x64\x52\x2e\x55\x6b\x06\xd3\x82\x54\xf6\xeb\x95\x6d\xd2\x43\xa6\xd2\xf8\x8c\x85\x06\xe5\x59\xe7\x42\xe3\x6b\xb9\x1a\xd3\x40\x08\xd5\xa7\x49\xb2\x10\xd2\x3f\xdd\x3f\x29\x97\x4b\x7c\x4a\x3e\x02\xa6\x46\x85\x9c\x9e\x92\x8a\x92\x29\xab\x90\xcf\xaf\x89\x9a\xb3\xa8\x5c\x2a\xed\x91\x96\x4b\x78\x42\xf0\xf9\x11\x59\x30\x12\x89\x05\x89\x18\xf3\x49\x9c\x61\x01\xa0\x0c\xc5\x49\x85\xfc\x00\x28\xf2\xd7\x8d\xc6\x1c\x66\x4e\x7f\x23\x49\xea\xc3\xd7\x2b\xe2\x0c\xc9\x8c\x85\x84\x47\x89\xa2\x41\xa0\x55\x0a\xb0\x37\x5c\x91\x63\xf8\xc4\x82\x84\xad\x1e\xe0\xd1\x94\x97\xed\xc3\x3d\x72\x99\x30\x49\x92\xb9\x48\x03\x9f\xa8\x65\xcc\x00\x0b\x92\xcb\x33\x64\xc9\x6c\xd1\xb0\x24\x00\x21\x68\xea\x32\xca\x0e\xff\x37\xb4\x95\x5a\x76\x89\x43\xdd\x9b\x3f\x55\x69\xbb\x48\x15\x75\xd7\x17\xbe\x6b\x40\x8c\xe6\xb2\x38\xd1\xda\x2b\xb8\x6b\x2c\xfc\x95\x0d\xf2\xbe\x5a\xcf\xb0\x0c\x58\x2c\x2e\x63\x9f\x2a\xb6\x8d\x08\xef\x4a\x38\x27\xa9\x06\x20\x8e\x73\xcd\xe4\x44\x24\x6c\x1b\xd3\x19\x57\xc3\x74\x12\x0a\x3f\x0d\x98\x1b\x71\xb5\x8d\x6c\x06\xec\x27\x16\x04\x58\x82\xaf\x77\x62\xf9\x1a\x53\x45\x3c\x19\x67\xbb\x30\xf5\x53\xab\x9c\x41\xe7\xa2\x37\x32\xb7\xdf\x0e\x9a\xdd\x96\x89\xea\x15\xd2\x13\x83\x34\x4e\xb5\x9b\x42\x18\x17\xd0\x9d\x20\xba\xb7\x92\x2d\x0a\xfa\x1e\xf5\x7a\xe7\x1a\xe1\x04\x4e\x0a\x4e\x9e\xd9\x29\xbb\x74\x19\x63\xb6\x60\xbb\x2e\xa5\xe6\x68\xd7\x25\x6b\xfe\x9d\xd7\xa2\xdd\xd4\xb2\x9f\x8c\x60\x3e\xf9\x7a\xa9\x04\x47\x9a\x26\xc3\x73\x32\x57\x2a\x4e\x5e\xd5\x6a\x92\x2e\xaa\x20\xf3\x3c\x9d\xa4\xe0\x99\x9e\x88\x14\x8b\x54\xd5\x13\x61\x2d\x60\x53\x95\xcc\xf9\x54\x81\xf7\xd4\xd2\x58\x7f\xac\x85\x34\x81\xef\xb5\x8c\x70\x35\x99\x93\x9f\x49\x76\x56\x55\x2c\x8c\xc9\xa3\x47\xc4\x9b\x83\x49\xc8\x8f\x37\x5b\x07\xd5\xda\xe6\x13\x19\x16\x80\x34\xf7\x43\x45\xa5\x1a\xf2\x30\x0d\xa8\x12\x59\xca\x6e\x77\x3e\xb8\x2d\x63\xb7\x1b\x4f\xa6\x91\xd6\xb3\x4c\x43\xe0\x15\xf2\x7e\x96\x80\xeb\x3f\xd7\x7c\x76\x5d\x8b\xd2\xcc\xc1\x11\x5b\x4b\x84\x31\x07\x47\xec\x0d\xb3\xc4\x3e\xe8\xfd\x7f\xa7\x35\x1a\x8f\x7e\xed\x1b\x74\xf6\xc1\x2a\xc5\x0f\x5b\xef\x3b\x17\xc6\x17\x2c\xd5\xa7\xf9\x2a\xf0\x0c\x8a\x0e\x53\xc4\x11\x24\xe6\x31\x9b\x52\x1e\xa0\x20\x37\x9e\xf0\xd9\x24\xe5\x10\xd5\x8e\x66\x46\xa7\x26\x27\xf1\xe6\x2c\xcc\xd2\x88\x33\xe7\x60\x8d\x39\x0b\x02\x63\x92\x4e\x74\xcd\xa5\x88\x50\x06\x00\xf4\xaf\x08\x8f\xe7\x22\x62\x89\x95\x9c\x38\x3e\xd4\x43\x1e\x51\xc5\x45\x44\x2a\x31\x3c\x9c\x0a\x19\x9e\x6e\x80\x1d\x45\x34\x64\xc0\x63\x05\xe1\x25\xbf\x66\x7e\x9b\x2a\xda\xa7\x6a\x4e\xaa\xd6\x6a\x86\x31\xe3\xc6\x95\xfd\x67\x98\xd2\x6e\xbc\x58\x32\xa5\x96\xb6\xee\x3e\xac\x86\x6e\x3c\x25\x44\xf0\x75\x55\x3c\x84\xb8\x0a\xc0\x73\x32\xa1\x20\x4d\xe9\xcd\x41\x03\x7f\x4c\x16\x7b\xd6\x6d\x5e\x3c\x9c\xcd\xbf\x61\x12\x87\x1a\x8e\x8b\x67\xfb\x4f\xab\x37\x5e\x76\x42\xec\xdf\xaf\x5a\xaf\x73\x13\x0b\xb9\x6d\x3f\x23\xc6\x66\x03\xf3\x0d\x31\x98\xc6\x95\xa9\xd1\x7e\xed\xc5\x68\x92\xa4\x1f\x70\x50\x78\x35\x06\x81\x20\xd1\xd6\xcc\x59\x35\xd6\x4f\xbf\x22\x47\x3d\x27\x47\x86\xac\x08\x91\xcf\xaf\x5a\x7b\x45\xd1\xde\x31\xe5\xcd\x9b\x11\x96\x26\xca\x65\x5f\x8a\x6b\x9e\x00\x2b\x3c\x9a\xc1\xe7\x29\xc4\x75\x62\x64\xde\x83\x12\x0a\xd5\x1e\x32\x58\x42\x12\x3e\x9b\xe3\x13\x5f\x2c\xa2\x40\x50\x9f\x60\x82\xe4\x91\x12\x2b\xd6\xc9\x54\x97\x44\x04\xa2\x91\xaf\x6b\x3e\xc1\x9c\x82\x65\x78\x9a\x46\x9e\x76\xc0\xbe\x88\xd1\xe1\xd8\x2e\xa2\xe5\x52\xb3\xd5\xea\x5d\x76\x47\xe3\xce\x45\xd3\x35\x19\x19\xc9\x62\x89\x04\x3e\x89\x93\x92\xd5\x23\xcb\xc6\x58\xd7\x70\x73\x10\x5e\x93\x27\xd5\x50\x4c\x00\x57\x6c\xd1\xaf\xb8\x03\x0b\xde\x45\x1a\xb5\xc2\x23\x7f\xc7\xd9\x2a\x53\x76\xce\x7b\xfd\xce\x60\x9c\xf1\x68\x8a\xdd\x65\xb7\x7d\xde\x19\xbb\xed\x4e\x77\xe4\xbe\x73\x3b\x03\xe3\x0c\xc8\xa0\xe6\x09\x0c\x98\x35\xad\x77\x11\xb7\xca\x3e\x03\x27\x42\x65\x5d\x5e\xba\x6d\x32\x95\x22\xcc\x31\xbf\xb7\xaa\x2c\x33\x70\x8c\xac\xb4\xe8\x7a\x12\xde\xc4\xb2\xf6\xa2\x71\xfc\xa2\xf1\xe2\x25\xfd\xe9\xc4\xa3\x4f\xd9\x09\x3d\x79\x46\x9f\xe2\xa5\x73\x21\x62\xc0\x29\x45\x0a\x2c\xa1\xaa\x34\xc1\x23\x02\x3d\xda\x52\xa4\xd0\x0a\x29\x42\xc9\x65\xdb\x6d\x1f\x11\xea\x6b\x9b\x85\x04\x4c\x8a\x5c\x68\x07\x14\x53\x12\x5b\x15\x65\xcd\xa1\xe3\x93\x4a\xb5\xb6\xf2\xd7\x62\x7b\x38\x82\x8b\x1b\xfe\x40\xa0\x82\x26\x2a\xc1\x86\x4d\xa4\x5a\xc3\x1a\xdd\xe9\x94\x9a\xde\x0d\xb2\x91\xa5\xd1\x85\x1c\x84\x8d\xdb\x0a\xf9\x96\x39\x5f\x83\xe1\xb1\x09\x4c\x53\x0e\x0d\xeb\xe3\x5a\x9a\xc8\x5a\xc0\x27\xec\x86\x79\x35\x1d\x48\x6f\x53\xdf\x5f\x12\xc7\x23\x07\x7d\x09\xde\xa9\x75\x79\x40\x74\x01\x4b\x94\x0f\xb8\xdf\xbc\x79\x43\xf6\x1f\x27\x0c\x6a\x36\x57\x4b\xe2\x85\x50\xe8\xda\xc4\xe1\x10\x27\x5f\x72\x6c\xdc\xe2\xe0\xb1\xaa\x7b\x87\x87\x65\xa4\xba\x47\xdc\x29\xea\x0b\xed\xa3\xa5\x3a\x32\x5e\xee\x89\x78\x49\xb8\xd2\x6a\x85\x6e\x61\x4e\x93\xe8\x00\x14\x1b\x48\x46\x81\x99\x09\x33\x20\x9c\x61\x17\x6a\xdb\xe3\x2f\x28\xc2\xed\x8e\x1e\x39\xd3\xf2\x94\xfc\xa3\x76\xce\x27\x92\xca\x65\xed\x42\x2b\xa1\xcd\xae\xb9\xc7\x6a\x79\x0f\xfa\x44\xac\x3a\x6b\x19\xc2\x2d\xff\xcf\x63\x06\x01\x86\x70\x18\xa9\x00\xd8\x9d\x45\x42\x32\xf3\x38\x46\x55\x4d\x37\x35\x90\x19\xce\x76\xd2\x19\x33\x9f\xa2\x8a\xbe\x64\xdb\x71\x3d\x14\xa0\xfc\x78\x0f\x7d\xc7\x78\x6f\x96\x0a\xf0\xc7\x8b\x51\x9a\x2d\xf5\x3e\x88\x78\x45\xfe\x2f\xe0\x69\x34\x23\x1b\x62\x7c\xcc\xee\x7e\x46\xee\x36\xa4\xc0\x19\xa2\xb4\xe9\x99\x38\xdd\x94\xed\xa1\x0f\x55\xb2\xbc\x9e\x6a\x0a\x90\x7a\x48\x42\xe8\xc2\x8c\xb3\x39\xb0\x58\xee\xda\xa9\x0f\x43\xd3\xaf\x10\x76\x7a\x62\x02\x66\x30\xe4\x12\x01\x3e\x1f\xe7\x84\x5e\x05\x5c\x3e\x12\x32\x7e\x77\xcd\x3e\x16\xfd\x7b\xb6\x3c\xd2\x41\x9d\xc7\x0e\xdf\xe5\xf7\x62\xb7\xc8\xcd\xfc\x03\xe5\x41\x0a\xee\xeb\xae\xb1\x09\xb9\xfb\x1a\xa2\xc5\x0e\xf1\xad\x5f\xec\xf6\x00\xf2\x74\x17\x32\xe2\xc8\xfd\xe0\x8e\x7e\xd5\xc9\x8f\xfa\x13\x98\xc3\xa0\x1b\x23\x34\x24\x09\xde\x26\x4e\x04\xa9\x10\xab\x96\x49\x85\x19\xe6\x73\x0a\x35\x61\xde\xc9\xf7\xa3\xe5\x92\x64\x7e\x4b\x04\xc0\xf4\xe9\xc1\xa7\xe3\x93\x93\x8f\xc7\xaf\x4f\xea\xe1\x01\xee\x16\x20\x88\x36\x4f\x1a\x78\x32\x09\x52\xb6\x79\xf0\x14\x0f\x22\x51\x7c\x0c\xcf\xca\xa5\xce\xc5\xe5\x79\x73\xd4\x1b\x7c\xa5\x8c\xaf\x8e\x07\x9d\xe1\xe5\xf9\x68\x08\x29\x26\x12\xf3\x34\x06\xc3\x37\xbb\xed\x41\xcf\x6d\x8f\xdf\xf7\x2e\x3a\x35\xec\xc2\x92\x1a\xcb\x78\x87\x7e\x84\x5e\xfb\x76\x5b\x01\xd3\x4d\x1d\x7f\x3d\xc2\x9c\x01\x19\xb1\xd7\xee\x91\x57\x90\x18\xa1\x90\xc2\x7f\x94\x4c\xf8\x8c\xec\xbd\x07\x1d\x1e\x11\x11\x41\x20\x32\x29\x85\x84\x03\xc9\xa0\xce\xa9\x54\x46\xcc\xb7\x21\x37\xe5\x12\x72\xb0\x5a\x08\x02\xf9\x4a\x44\x3e\x24\x6e\x17\x46\x33\xef\x4a\x17\x58\x17\x72\x21\xe6\x99\x2b\x1c\xc2\x29\x59\xd0\x25\x11\xa9\xca\xed\x6e\x76\x48\xf3\x66\xbf\x61\xd8\x6a\xcd\x19\xa0\x01\xa7\x06\x3a\x40\x79\x41\x91\xb5\x7e\xb3\xeb\xb6\xc8\x47\x2c\x00\xd8\x04\x62\xf1\x3f\x82\xa9\x4d\x59\x7e\x16\xd0\x57\xcf\x88\x15\x9b\x60\xcb\xf8\x19\xfd\x01\x6e\x8d\xb3\xa2\xf8\x58\x8f\xf8\x10\xec\x9b\xc4\x6f\xb1\x09\x01\x33\x82\x2e\xf5\x05\x50\x9a\x67\x58\x71\x8b\x4c\xc4\x34\xe2\xde\x91\x2e\x5a\x0b\xcc\xa6\xd4\x14\x45\x1c\xa3\x74\xba\x5d\x92\x90\x25\x09\x28\x29\x8d\x8f\x48\x24\x14\x9c\xac\xd6\x16\x5f\x72\xbc\x00\x41\x67\x06\x91\x98\x8b\x4d\x1b\x2a\x58\xa5\x56\x52\x2c\xb4\x12\x75\x4b\x93\xc6\x55\x72\x41\x97\x13\xa6\x29\xee\x7f\x59\x79\xe3\xad\x85\xc6\x8c\xb2\xff\xc5\xba\xd6\x2d\xb9\x02\x76\xb8\xce\xf6\x9e\x90\x92\x79\xca\x84\xd2\x3a\x26\x25\x3b\x48\xc8\x62\x9e\x09\x11\x88\x19\x49\xe8\x32\x79\xf5\x29\x2a\x02\xee\xd0\x97\x05\x31\x61\x79\x4c\xf6\xf0\x17\x16\xcb\x3e\x2a\x28\xb7\xfa\x18\x32\x06\x45\x2c\xe0\x57\x2c\xd3\x23\xb8\x59\x24\xac\x1e\x03\xa6\x80\x03\x4f\x9b\x1b\x6f\x1b\x77\x83\x8b\x9d\xc1\x00\xa8\xfd\x0e\xb3\xe9\x0b\xc6\x6c\xeb\x2a\x96\xc3\xb2\x43\xe1\xdf\x23\x5f\x26\x60\x1d\x05\xac\x6b\x16\x3b\xc8\xe2\x8e\x04\xda\x84\xa4\x82\x8d\xf6\x84\x4e\x20\xd5\xed\x7f\xc9\x25\x85\x5b\x9d\x69\x20\xbf\xe5\x8d\x03\x7e\x9c\x99\x55\x2b\xdf\xda\x30\x23\xbb\x47\x9a\xed\xb7\x64\x06\x3d\x74\x62\xda\x5c\xa1\xfb\x71\xbc\xb5\xa0\xc0\x11\x72\x82\xd7\x7c\x5d\x97\x88\xe2\xd8\xef\xa2\x9d\xc1\xfd\xb4\xef\x19\xcd\xfe\x35\x85\x48\xf1\x59\xcc\x20\x22\xe1\x36\x74\x01\x06\xb9\xca\x02\x1e\x7a\x80\x20\x30\x3e\x4b\x16\xd0\xb5\x81\xbb\x82\x3f\xb0\x68\x6d\x2b\x8a\x39\x79\x12\x40\xe7\xa5\xcf\xf3\xac\x12\x1c\x26\x92\x95\x20\x13\xe6\x51\x88\x03\xec\xca\x38\xd2\x86\x1e\x98\x4c\xd2\x19\x5a\x53\xe7\x5d\xe4\xdb\x01\xbe\x1d\xc3\x73\xd6\xb3\x74\x21\x8e\x94\xf5\xc0\x4c\x1a\x24\x7b\x0d\xb8\x29\xd0\x3d\x32\xb1\x2d\x30\xd7\xa0\x1a\xae\x4d\xe1\x2e\xe6\x88\x35\x4b\xd0\xdd\x40\x62\x8a\x38\x24\x79\xe0\x48\x28\xd4\xba\xee\x7c\x20\x16\x8f\x08\x26\x1f\x3f\xd6\xca\x6b\xd8\xac\x65\xc6\x01\xb9\x34\x3a\xa1\x33\xca\xa3\xa3\x95\x7e\xb0\x40\x01\x3a\x1a\x00\x04\x9f\xcd\x0c\x6d\x6b\xf1\xa2\x6b\xe7\x98\xc7\x94\x57\x74\x80\x95\x38\x39\x0f\xd0\x2b\x4a\x4c\xac\xd0\xe7\x22\x9b\xc4\x0b\x44\x62\x6b\xe9\xb0\x35\xe8\x74\xba\xe3\xf3\x5e\xb3\xed\x76\xcf\x20\x04\xd6\x95\x0b\xc0\xc1\x24\x31\x49\x96\x49\x75\x22\x84\x1a\x83\xd1\x63\x30\x37\xd3\xc3\x3e\x8e\xd4\xe4\xe0\x93\x3c\xc0\x38\x28\x2d\xe6\xd8\xf7\x60\x2c\x14\x11\x9a\xce\xae\xae\x5b\x3b\xd3\xb3\x66\x89\xf9\x69\x39\xdf\xb2\x7c\x97\x8e\x85\xd1\xf1\x62\xbe\xd4\xcb\xd7\xb9\xf9\x05\xf2\x24\x02\xb4\xb0\xae\x80\xb7\x3e\x0d\xa3\x7c\x04\x24\x81\x58\xfc\x9f\xed\x75\x1e\x48\x60\xdb\x10\x61\x00\x05\x60\xb2\x39\x58\x9d\x81\xcf\x2c\x0d\x4b\x99\x71\x10\xaa\xba\xaa\x7a\x3a\x48\xd2\xc4\xf4\x25\x29\x0c\x6e\x20\xf3\xda\xa0\xd5\x62\x90\x87\x02\x80\x8b\xc6\x45\x6c\x05\xbb\x2a\x91\x7a\xf3\xbc\x4f\x88\xc8\xb3\x86\x5d\x8b\xc5\x23\x2c\x5e\x90\xa3\x81\x3f\x98\x05\x5e\x34\x8a\x29\x29\x4f\x61\x98\xc6\x4c\xfe\x90\xd7\x5d\xa1\x48\x64\x52\xc1\x38\x8b\x4d\x54\x15\xbb\xb8\x03\x89\x54\x21\xa7\x43\x3d\x5e\x12\xb8\x9d\x40\xf8\xff\xe7\x5f\xff\xfc\x77\x3e\xad\x1d\x67\xbd\x1a\xfc\x9f\x6b\x7d\xec\x0a\xb1\xfd\x8b\x1d\xfd\x5a\x7a\x3c\x30\x43\x9f\xce\x0b\x8e\x9e\xf7\x60\xdc\x83\xc4\xe6\x5d\x61\x4c\x4e\xc1\x96\x7a\xe0\xa3\xb5\x93\xfa\xcb\xe3\xe3\xa7\x8d\xe7\xb5\x67\xcf\x5f\xd6\xf5\x9c\x07\x6d\x81\x4e\x50\xb9\x8e\x60\xae\xad\x60\x93\x1b\x84\xf7\x55\xb9\xf4\x98\x18\x1f\x7c\x86\x0b\x0a\xeb\xb9\x75\xe3\xa2\xd9\x51\xfd\x35\xd1\xb5\x60\xf9\x5a\xdb\x90\x1c\x82\x07\x50\xc3\xb6\xdd\x05\xe3\x96\xc9\x71\x22\xe1\xa4\xf9\x4e\x31\xdb\xde\xae\x84\x32\x58\xbe\x76\x5b\x8f\xed\x06\x07\xfc\x85\x8e\x54\xc1\xa4\x58\xc9\x40\x9d\xc6\x49\xe5\x9e\x08\x1a\xf7\x45\x50\xbf\x2f\x82\xe3\x7b\x22\xa8\xbf\xbc\x2f\x82\x17\xf7\x45\xf0\xfc\xbe\x08\x7e\xfa\x83\x08\x74\x7f\xfd\x07\xef\xda\x0d\xa7\x73\x1f\x24\xec\x46\x49\xea\x58\x39\xc2\x06\xbe\xa4\x49\x38\x64\x82\xe5\xbd\x10\xce\x84\x98\x05\xec\x21\xf0\x41\xa6\x76\x78\x38\x73\xa8\x0c\x19\x9d\x70\xe7\xfa\xf9\x9a\x5d\x74\x7e\x88\xcb\x2c\x20\x5b\x0c\x1a\xa3\x29\xf7\x00\x63\xb6\x69\x7a\xdb\x1c\x76\xb2\x99\x07\xd7\x69\x76\x15\xc2\x43\x5c\x24\xe2\xa8\x46\x63\x48\xfe\x55\x0f\xe8\x38\x57\xb9\x39\xfd\x17\xb6\xf4\xe6\x50\xbc\x93\x1a\xf4\xb1\x3c\xaa\x5e\x65\xdf\x89\x33\x22\x7a\x13\x33\xe1\x51\x0d\xb7\x9e\x09\x9f\x15\x1f\x5a\x1a\x3b\xa9\xf9\x3c\x81\xd2\x3f\x49\xb1\xfb\xaa\xc6\xf5\xc6\x43\x13\x25\x4e\x9f\x54\x2a\xdf\x26\xfd\x67\xc8\x8b\xaf\x4a\xa0\x03\x54\xac\x19\xc7\xbd\xc8\x55\x69\x64\x8d\xf0\x7b\x16\x8a\xc5\xdd\xf3\x49\x19\x6a\x98\xf0\x53\xa8\x7a\xb9\x25\x23\x7a\x4a\x1c\x8f\x71\x26\xd3\x3b\x72\xfd\xfe\x37\xc6\xb6\xd1\xed\x37\x61\xf4\x1f\x7d\x8b\x34\x80\xad\x07\xe1\x98\x07\x38\x59\xe9\xfb\x80\x19\x87\x2f\x8d\x19\xa9\x39\x3c\xa6\xd9\x4e\xde\x49\xae\x78\x3c\xc6\xb6\x13\xaa\xe2\x18\xa2\x6e\xac\x17\xde\x63\xe0\xcf\x83\x86\x17\xfb\x01\xbd\x1e\x59\xbd\xd7\xd4\xf5\xc2\xf7\x87\x0b\x3e\x55\x43\x28\xb3\x9e\xe5\xa9\x39\x68\xbd\x77\x3f\x74\xd6\x73\x39\xb2\xb3\xfa\xb2\x5e\x3c\xee\xda\x81\xd7\x0c\xba\x34\x46\xb3\x16\x16\x92\xab\xa6\xc2\xf7\x91\x97\x3c\x59\xbb\xe6\x04\x3a\xba\x5b\xdd\xaf\x9b\xba\x9d\x46\x7f\xe7\x31\x71\xfe\x96\x5b\xb7\x37\xaa\x28\x31\x90\x5f\x3d\x52\x61\x0c\xa0\x32\xdc\x04\x82\x87\xe1\x95\x8f\xab\x6a\x59\x00\x2e\x72\x68\x5e\xbd\x08\x6c\xdb\x71\x37\x26\xa7\xbb\x57\xfb\xbb\x2f\xd5\x9e\x54\xfd\x65\xc0\x27\xdf\x81\xdf\x82\x22\x9d\x2d\xe6\xb5\x94\xc0\x65\xd5\xca\x57\xcd\xc0\xaa\xb5\x6a\xd5\x08\x57\xe0\x4c\xdf\x32\xab\x21\xb7\x37\x74\x23\x4f\x32\x7c\xc5\xf6\x16\xed\xdd\x4d\xc3\x89\xfd\x57\x20\x9b\xef\x49\xca\x25\xe8\x59\x42\xae\x5a\x22\x8d\x14\x34\x9d\xf8\x22\x58\xb2\x6b\xc7\xbc\xdf\xc8\xb2\x9b\x87\x87\x87\xfa\x45\xaa\x2c\x22\xbd\x7b\xc9\x5b\x31\x4b\xde\xd6\xbb\xb7\x69\xe4\x07\xec\x03\x34\x61\x10\xc9\x15\x0c\x6d\x37\x9a\x0a\xf3\x16\x05\xb7\x0c\x11\x5b\xe4\x91\x62\x3a\xc8\x26\xd8\x1c\x77\x66\x7e\x85\x47\x5b\x5c\xe4\x7d\x6a\x03\x55\x1e\xc1\x6a\x28\xdf\x84\x79\xfc\x78\x07\xd2\x1f\xeb\x87\x87\xa6\x33\x2c\xdd\x25\xe2\x10\x26\xde\x57\x1b\x12\x92\xfd\x22\x05\x7c\x47\x96\x17\xb9\xa2\x17\x2b\xe0\xf5\xc4\x1d\x0d\x21\xf5\x5c\x26\x2c\xe9\x8a\xa8\x73\xc3\x42\x7c\x41\xea\xc9\xa5\x99\x75\x71\xcc\xc0\x35\x7c\xb6\xb8\x36\x9b\x0c\x18\xb1\xcb\x25\x1a\x25\x0b\x26\x47\x62\x0d\xfc\x5d\x96\xb8\x93\xdc\x16\x97\x87\xc6\x0a\x1f\xc9\xfe\x36\x39\x5c\xad\x3e\xa9\xb4\xb1\x81\xed\x42\x2a\xea\xe0\x2e\xba\xf2\x84\x7c\x5e\x1b\xe2\x2e\x6e\x50\xf4\x57\x77\xcb\x3e\xc1\x37\xa9\x5a\xfa\x6d\xed\x19\x47\xff\x6f\x00\x00\x00\xff\xff\xc0\x77\x6c\xd0\x64\x25\x00\x00")

func scriptsBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBash,
		"scripts.bash",
	)
}

func scriptsBash() (*asset, error) {
	bytes, err := scriptsBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.bash", size: 9572, mode: os.FileMode(420), modTime: time.Unix(1468086645, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.bash": scriptsBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.bash": &bintree{scriptsBash, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

