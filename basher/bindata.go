// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\xff\x72\xda\xca\xf5\xff\x1b\x9e\xe2\x5c\xcc\xc4\xf7\x7e\xbf\x80\x0c\x76\x3a\x69\x12\xa7\x43\x80\xeb\xd0\xda\x86\x31\xf8\x76\x32\xc9\x1d\xdf\x45\x5a\xd0\xd6\x92\x56\xb3\xbb\x32\x66\x5c\xf7\x0d\xfa\x0c\x7d\x8f\x3e\x55\x1f\xa1\xe7\xec\x4a\x58\xc2\xf6\xc4\xe9\xb4\x33\x09\x46\xda\xdd\xf3\xe3\x73\x7e\x7d\x96\x33\x76\xcd\x7f\x96\x51\xc0\x95\xfe\xf1\x27\xb8\xab\xd7\xe2\xeb\x40\x28\x68\xa7\xd0\xc9\x52\x1d\x8a\xa5\xf1\x22\xb9\xd2\xde\x53\x0b\x8b\x4c\x44\x81\x57\xbf\xaf\xd7\x2f\xd3\x95\x62\x01\x9f\xf9\x4a\xa4\xc6\xc9\xf1\x33\x15\x41\x7b\xa9\x67\xa7\x10\x1a\x93\xea\xb7\x9e\xa7\xd8\xba\xb3\x12\x26\xcc\x16\x99\xe6\xca\x97\x89\xe1\x89\xe9\xf8\x32\xf6\x22\xbe\x34\x56\x26\x9a\xe1\x15\xe2\x63\xa6\xf1\xd9\x13\x89\x36\x2c\x8a\x3a\x3a\x84\x0f\x90\xaf\x75\x0c\x8f\x53\x78\xf5\x0a\xfc\x30\x96\x01\xfc\xff\xed\xa3\x85\x8e\xb7\xfb\x46\xc5\x95\x4d\x64\xf6\x8c\x9b\x2c\x3d\xe1\xb1\xb3\xf8\x64\x74\x76\xdc\xec\xd6\x6b\x83\xf1\x71\xb3\x57\xaf\x5d\x48\x69\xa6\x4c\xeb\xb5\x54\xc1\x71\xf3\xb0\x5e\xaf\x89\x25\x7c\x81\x46\xb3\xd7\x80\xe3\x63\x68\x18\x95\xf1\x06\xfc\xfa\x0e\x4c\xc8\x93\x7a\xad\xb6\x07\x83\x31\x08\x0d\xf4\xbe\x05\x6b\x0e\x89\x5c\x43\xc2\x79\x00\x69\x2e\x05\x37\xe5\x22\x0e\x1b\xf0\x03\x8a\x28\x1f\xaf\x71\x3f\x94\xd0\xe6\x6e\xf5\xaf\xa0\xb3\x00\x1f\x67\xb0\xe2\x31\xe4\x10\x00\x59\x87\x1b\x6f\x85\x81\x03\xfc\xc6\x23\xcd\xb7\x2f\x68\x69\x29\xea\xc5\xcb\x3d\xb8\x44\x8c\x41\x87\x32\x8b\x02\x30\x9b\x94\xa3\x14\xd2\x55\xb6\xe6\x59\x1d\x85\x0a\x14\x88\x30\x9d\x08\x33\xcd\xa2\xc8\xa1\x74\x31\x3a\x9b\xcc\x47\x16\xa8\x8f\x17\xfd\xf3\xc1\x27\x0b\xd6\xe9\xe4\xe4\xe7\xf1\xe9\x88\x70\xaa\x95\x52\xaa\x5e\xc3\x78\x43\x9a\x59\xb9\xd0\xec\x41\xef\xc3\xab\x2e\x3a\x67\x38\x07\xdc\xea\x64\xcf\xb2\x05\x06\x31\x8b\xf8\x38\x11\x79\xf2\x6c\xc5\x75\x9f\x10\xa7\x8b\xfd\x68\x33\x3e\x96\x45\x76\x77\x45\x5e\xa6\x01\x33\xfc\xbb\x84\x66\xf6\xc8\x63\xb1\x53\x19\x8c\x1d\x46\xdf\x10\x97\x62\x46\x16\x68\x56\xa4\xd4\x1e\x72\x0e\xab\x25\xe2\x7f\x76\x82\xaa\xb6\xd8\x15\x58\x2b\x96\xa6\x5c\xd9\x03\x86\x29\x33\x13\x71\x16\x31\x23\x95\x3b\x32\x1c\xfd\x32\x1e\x3c\xa1\xfa\xd6\x57\x59\x62\x95\xab\x2c\xc6\xe2\xd2\xd0\x5e\x63\x42\x75\x1b\xd0\xfd\xe0\x05\xfc\xc6\x4b\xb2\xdc\x28\x92\x3c\x90\x71\x2a\x10\xf6\xc9\xcc\x49\x9d\x5e\x4c\xfe\x38\x1a\xcc\xaf\xe6\x9f\xa7\x4e\x76\xf1\x62\xda\x9f\xbb\x30\xcf\x06\x9f\x46\x67\x2e\xca\x85\x09\x47\x16\x89\x7c\xcb\xeb\x1d\x7b\x34\x37\xd0\x96\x90\x8a\x94\x2f\x99\x88\xa8\x0c\x6f\x7d\x19\x70\xdb\x39\xa0\x6d\x2d\xb3\x05\xd5\xd6\x7e\xc8\xe3\x3c\xf9\xdb\xa1\xc0\x5e\x12\xf2\x28\x72\x0d\x65\x94\xdc\x08\x25\x13\x72\x08\x37\x06\xd7\x20\xd2\x50\x26\x5c\x17\x98\x40\x3b\xe0\xda\x88\x84\x19\x21\x13\x68\xa4\xf8\x72\x29\x55\x7c\xbc\xb3\xad\x95\xb0\x98\xa3\xc1\x0d\xda\xaf\xc4\x0d\x0f\x86\xcc\xb0\x29\x33\xe1\x4e\x4b\xcb\x03\xd6\x68\xbe\xa6\x42\xbc\xf5\x53\xc5\x8d\xd9\x10\x62\x7d\xe5\x87\x78\xf0\x3f\x43\xac\x58\x3b\xef\x9f\xfd\x8f\x70\xfb\x86\x5b\x6d\xe6\xcc\xaf\xae\x35\x8f\x3a\xb7\x7e\xbe\x02\xc5\xdf\x67\x11\x18\xdd\xa6\x52\x99\x47\x00\x38\x9f\xba\x65\x9f\x7a\xdf\xe7\x13\xb7\x82\x73\x80\x8b\xc7\x49\x4a\x21\xd5\xd3\x48\x68\x03\x9d\x14\xbd\xc3\xd2\xf4\xdc\x5a\x27\xb5\x6f\x9f\x71\xaa\x5b\x72\x2a\x17\xf6\x68\x87\x48\x59\xb9\x40\x2d\xa0\x55\x6f\xa7\x32\xa5\xdc\xe1\x53\x25\x6f\x84\x46\x53\x44\xb2\xc2\xef\x4b\xac\x9a\x7c\x5c\xee\xc1\x09\xfa\x45\x7d\xf5\xf2\x72\x3c\x84\xa5\x92\xf1\xd6\x50\x5a\x2d\x66\xdf\x0a\x6d\xcd\x87\x9f\x9d\x78\xf1\x6d\xaa\xbc\x37\xbd\x83\x37\xbd\x37\xbf\x67\xbf\x3b\xf4\xd9\x11\x3f\x64\x87\xaf\xd9\x11\x1d\x3a\x95\x32\x45\x99\x4a\x66\xab\x10\xa8\x8d\x58\x85\x2d\xc0\xe9\xb1\x91\x19\xb6\x6b\x03\x0c\x2e\x87\xe3\x61\x0b\x58\x10\x90\xf6\x18\x8c\xb4\x56\x58\x4c\xe4\x12\xd2\xdc\xca\x9d\x20\xd8\xf9\xd3\x0e\xa0\xd1\xf1\xb6\x70\x56\x87\xd8\x1c\x85\x14\x4b\xb0\xb4\xe7\x00\xc7\x81\x36\x9a\x06\x8c\xcc\x92\xa0\x00\xe0\x78\xc9\xdc\xac\xc1\x62\x2b\xf4\x9d\x63\x89\xd1\xa0\xd9\x0a\xff\xbf\x4e\x2c\x17\xb8\x90\x16\x08\xbe\x83\x40\xd2\xd0\xca\x32\x81\x63\xf5\x47\x2f\xd3\xca\x8b\xc4\x82\xdf\x72\xdf\xb3\x71\xfe\x98\x05\xc1\x06\xda\x3e\xec\x4f\x95\xc0\x8a\x27\x5c\xf7\xc1\x76\x2f\x6d\x02\x94\xfd\xfe\xfd\x7b\x68\xfe\xa8\x39\x32\x0c\x61\x36\xe0\xc7\xd8\xe5\x86\xd0\x16\x18\xc0\xbb\x92\x19\xf7\x0d\x0c\xee\xb6\xe9\xfd\xf4\x53\x9d\xb4\xee\xc1\x78\x49\xd8\x51\xac\xac\x57\x2d\xeb\x39\xf8\x32\xdd\x80\x30\x16\x62\x9c\x06\x21\xd3\xc9\x3e\x82\x1c\x29\xce\xd0\x98\x05\x77\x5b\x04\xa7\xa9\x59\x0c\xf1\x3b\x72\xe1\xfe\x89\x49\x4e\x54\x80\xe4\x91\x25\x14\x17\x97\x19\x16\x4a\xbb\xfc\x9b\x9f\x22\x33\x82\xaa\xb5\xf0\x37\xef\x54\x2c\x14\x53\x1b\xef\xcc\x22\x36\xe4\x37\xc2\xe7\x5e\x39\xf5\xbe\x42\x81\xbd\x97\x6b\xdf\x45\xf7\x37\xab\x20\x25\xe0\x96\xd0\x98\x2b\x96\x68\x4a\x7d\x3c\xeb\xac\x79\xe6\x58\x35\x6f\xc9\xe6\xdc\x96\xaf\x49\xc3\x4a\xac\x06\x9e\x28\x0e\xbd\x26\xbe\x51\x0b\xb0\xc7\xd6\x1f\xa8\x4d\x65\xa7\x65\x4a\xb4\xbb\x42\x74\x76\xf9\x4b\x61\xee\x30\x0b\x90\x39\x7d\xc6\x0c\xb7\xb4\x09\xad\xa0\xec\xd6\x12\x53\x2a\x2d\xa1\xb0\xcd\xed\x72\xa2\xe5\x86\x3e\x45\x85\x0a\xf1\x9f\xf8\xa6\x65\xeb\xa7\x2c\x1d\x9f\xd5\x4b\xa5\x17\xc2\x1d\x2b\xea\x27\x81\x92\x22\x18\x44\x9c\x25\x5b\x46\x90\xf7\xbe\xdd\xb9\xdc\xf1\xdc\x5c\x5f\x83\x4f\xdb\x1f\x93\x8b\x5c\xd8\x65\x22\x76\x28\xc6\x37\x05\x66\xc5\x91\xfe\x2e\xdd\x28\xc9\xcd\x89\xcb\x10\x9b\xed\xea\xe5\xa2\x45\xe9\x14\xb4\xdb\xf8\xe0\x5f\x1b\xc5\xfc\x27\xc8\x51\xae\xa7\xaf\x35\x8f\x17\x11\x7f\xb9\x0e\x96\x9f\x78\x99\xfc\x53\x8c\xe4\xcb\x65\x47\xd4\x3e\x9e\x13\x65\x69\x55\xdf\x37\xe2\x06\x9b\x48\x3e\xcc\xfa\x83\x3f\xf5\x4f\x72\x5a\xd5\x1f\x9f\x5f\xf5\x07\xf3\xf1\x2f\xe3\xf9\xe7\xc7\xc3\x8c\x05\x0b\xe4\xd6\xc8\x50\x80\xc5\xa0\x49\x14\xb4\x13\x54\x40\x63\x05\x37\x97\x2c\x66\x59\xe2\x87\xa3\x32\x7b\xab\x8a\xaa\xd7\x14\x0f\x06\x32\xc2\x3c\x3c\xde\xff\x7a\x70\x78\xf8\xe5\xe0\xdd\x61\x37\xde\x27\x2a\x88\x6d\x67\x77\xa5\x47\x2b\x8b\x28\xe3\xbb\x0b\x47\xb4\x90\xc8\xea\x6b\x7c\x57\xaf\x8d\xce\x2e\x4f\xfb\xf3\xc9\xc5\x33\x43\x7a\xbb\x7c\x31\x9a\x5d\x9e\xce\x67\xd8\x94\x13\x19\x66\x29\xd6\x72\xff\x7c\x78\x31\x19\x0f\xaf\x3e\x4d\xce\x46\x9e\x91\x32\xd2\x1e\xcf\x3d\x41\xb6\xc1\x6e\x02\xc7\x2d\x7b\x1f\x90\xd9\x77\xe9\xe3\x15\x75\x59\x9c\x21\x93\xe1\x04\xde\xe2\x28\xc1\xeb\x10\xfe\x63\xb0\x10\x2b\xd8\xfb\x84\xf0\xb6\x40\x26\xd1\x06\xb8\x52\x52\xe1\x82\xe2\x80\xb3\x36\x53\x09\x0f\x8a\xeb\xc9\x52\x28\x9c\x60\x66\x2d\x01\x3b\xbc\x4c\x02\x1c\x7b\x63\x64\xe7\xfe\x35\xb0\x24\xc0\xaf\xd8\x6e\xb0\x33\x5f\xd3\xe5\x8a\xc1\x9a\x6d\x40\x66\x06\xc9\x45\xc4\x79\x0a\x4f\x7b\xf3\xbe\xd9\x73\x66\x0d\x42\x8e\x62\xb0\x4f\xa1\x1e\xd4\xbc\x66\x64\xda\xb4\x7f\x3e\x1e\xc0\x17\x1a\x9f\x9c\x14\xa3\xcd\x2d\xbc\xb1\x98\xc2\x9e\x35\x32\xcf\x15\x14\x6e\x03\x71\xc8\x5f\x29\x55\xf0\xd4\xd5\x60\x72\x79\x3e\x47\x0d\xf6\xea\x86\x03\x61\x57\xf9\x3d\xf1\x09\x0c\x23\x62\x69\x0f\x20\x68\xbe\x33\x65\x5c\x35\x22\x65\x89\xf0\x5b\x76\xe4\xaf\x69\xfe\x30\x47\x29\xe8\x9a\x6c\x07\xd4\x06\x62\x8e\x85\x12\xe0\xe5\xa4\x85\xf7\x4a\x83\x2b\xdb\xeb\xe8\x5d\xc9\x16\x54\xd8\x5e\x61\x73\x2d\xb5\xdb\xed\x2c\x40\x79\x5b\x2f\xd6\x16\xc4\x48\x32\x92\xd8\x81\x33\xb6\x59\x70\xab\xb1\x79\xb7\xcd\xc6\xfb\x62\x37\x8d\xa7\xe6\x5d\x91\x5a\xf7\x70\x8d\xe6\x08\x3b\x1f\x7d\xa9\x14\xf7\x8d\xeb\x8e\x0f\x6d\x56\xf1\x7d\x0d\xeb\x30\x77\x22\x92\x2b\xd0\x6c\xa3\xdf\x7e\x4d\xaa\x1b\x9f\xc0\xab\xd8\xe2\x3a\xed\x01\xec\xd1\x07\xd1\x8b\x29\x01\x54\xba\xdc\xce\x38\xc7\xb1\x1f\x89\x6b\x9e\xe3\x88\x69\x96\xc8\x02\xc7\x88\x1b\xb4\xc0\xb7\xe1\xa6\xd3\x2e\xdd\xf0\xe0\xe8\xe2\x02\xb5\x7d\x47\xd8\xec\x01\x17\xb6\x87\xb9\x5f\x92\xf2\x04\xe0\x2f\xf1\x2f\x77\xb0\x4b\x0e\x76\xad\x89\x23\x32\xf1\x89\x99\x48\x5d\x9d\x98\xf3\x82\x2d\x70\x7a\x35\xef\x4a\x4d\xe1\xde\xf6\x1d\x1c\x59\xe5\xe0\x60\x1e\xe7\x61\xb5\xe0\x17\x31\xcc\xd5\xee\x41\x7f\xf8\x11\x56\x48\x8a\xb5\xcd\x74\x90\x96\x60\xd3\xa9\x35\x43\x8b\xc8\x12\x3a\x16\x58\xee\x01\x46\xa0\x76\x41\x71\xc6\xf4\xb3\xb9\xe7\x90\xfd\x4b\x86\x95\x12\xf0\x94\x63\x45\xe2\x69\xe4\x4d\x4e\xb8\xc9\x0b\x1e\x59\x53\x14\xb9\x9c\x85\x35\x72\x5e\x4c\x57\xcc\x07\x9e\x3c\xc4\x8a\xd1\x98\xc5\xb6\x1f\xbb\xf5\xb2\xa9\x40\xb7\x03\xbd\x75\x64\xc1\x7d\x86\x75\x40\x9c\x56\x90\x6e\xb9\x4e\x00\xe7\x11\x45\xd3\x76\x61\xb2\xbb\x8d\x76\xb7\x9d\xcd\x39\xcb\x3b\xc7\x3a\x32\x45\x06\xe6\xde\x90\xda\x1b\x94\xcd\x50\x6f\xcb\xd5\xb6\xa4\x5e\x43\x30\xdc\x38\x6a\x56\xed\x11\x0f\x26\x21\x1f\xc4\xc6\x94\x08\x6c\xf9\x68\x91\x34\x84\xba\xe5\x8a\x58\x8b\x2d\xa0\xe6\x13\xa4\x16\xbc\x5e\xd1\xb5\x6c\xb7\x32\x6a\xe3\x30\x61\x2b\x26\x92\xd6\x16\x1f\xe2\x1c\x28\x8e\x45\xb8\x43\xac\x56\x4e\x77\x11\xf1\x6a\x6a\x97\x8c\xa7\x96\x57\x4d\x80\xad\x3b\xa5\x0c\xb0\x3f\x3d\x51\x63\xc5\x5b\x82\xe5\x7d\x7e\x24\x75\x41\x8f\x66\x83\x8b\xd1\xe8\xfc\xea\x74\xd2\x1f\x8e\xcf\x4f\xb0\x04\x1e\xe6\x18\x6e\xc7\x90\xa4\xa0\x37\xba\xb3\x90\xd2\x5c\x61\xd0\x53\x0c\x37\xb7\xd7\x61\xba\x63\xc3\xfe\x57\xb5\x4f\x75\x50\x5b\x87\xc4\x25\xa9\x16\xaa\x02\x1d\x17\xee\x5a\x32\xec\x58\x7e\xde\x98\x8f\x2a\xb4\xf4\x45\x18\x4b\x87\xf1\x3a\xdc\xd8\x1f\xd5\x42\xf7\x81\xfe\x68\x89\x28\x3c\x4c\xc0\xfb\x80\xc5\x49\xb9\x02\x74\x24\xd7\x7f\x28\x78\xeb\x7f\xc9\xe1\x82\xe3\x52\x01\x45\x18\xb2\x10\xa3\xce\x31\x67\x36\xce\xa4\x3c\x38\xb4\xab\xb3\x9d\x7a\xb6\x48\x32\xed\xa8\x66\x96\x44\x12\x7d\x7e\x08\x68\xa7\x5a\xe4\xb1\xc4\xcd\xd5\xe0\x92\xb4\x4a\x5c\x8d\xcc\xfc\xb0\x9c\x13\x32\xf1\x8b\xc0\x3e\xb8\x25\x12\x1a\x5e\xd8\xa3\xd1\x3e\xa4\x3f\x6f\x7a\xd5\x96\x54\xd6\x30\xcb\x52\xae\x7e\x28\x63\x57\x19\x12\xb9\x57\x2a\x4b\x88\x17\x77\x88\x98\xef\x2b\xd2\x8a\x3d\x1d\xe7\xf1\x06\xf0\xb4\xc6\xf2\xff\xd7\x3f\xfe\xfe\xcf\x72\x5b\x3b\xc8\xe9\x37\xfe\xaf\xdf\xff\x3b\x00\x00\xff\xff\xf6\xa9\x1a\x98\x60\x16\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 5728, mode: os.FileMode(420), modTime: time.Unix(1465511054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

