// Code generated by go-bindata.
// sources:
// scripts.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x59\xfd\x72\xda\x48\x12\xff\xdb\x3c\x45\x2f\x76\xc5\x71\x16\x21\x83\x93\xcd\xa7\xf7\x0a\x83\x62\xeb\x16\x03\x05\x78\x53\x5b\x49\x8a\x1a\xa4\x01\xe9\x2c\x34\x3a\x69\x64\xcc\x65\x7d\x6f\x70\xcf\x70\xef\x71\x4f\x75\x8f\x70\xdd\x33\x12\x48\x36\x71\x72\x6b\xdf\x1f\x97\x4a\xd9\x66\x3e\xfa\xbb\x7f\xdd\x3d\x8c\x79\x22\x47\x4e\xec\x47\xf2\xe9\x01\x7c\xa9\xec\x70\xc7\x13\xb0\xd7\xa8\xec\x24\x01\xe7\x11\xe0\x1f\x41\x02\x46\xc0\x2a\x37\x95\xca\xe6\x6c\x53\x1f\x3e\xb7\x46\xa3\xd6\xa9\x75\x4c\xe7\xbb\xfd\xd3\xf7\x76\xd7\x1a\x1d\xef\x35\xef\x50\x69\xe6\x54\xa0\xf9\xf3\x93\x06\xfc\x0e\x92\x73\xc0\x73\x48\xf3\x34\x66\x6e\xc0\x3f\xc4\x2c\x8a\x78\xac\xa9\xce\xd5\x12\x2c\xf5\xda\xe6\xd0\x72\xcc\x92\x4b\x7d\x64\xd0\x1a\xb6\xce\x47\x39\xdf\xc9\xa0\x35\x3e\x53\x7c\xeb\xa6\xbe\xbc\x84\xea\x5e\xa3\x7a\x97\xdb\x88\xcb\x34\x3a\xe5\x0b\x4d\xe5\xd4\x3a\x57\x24\xda\xb6\xba\x3c\x14\x42\x0e\x58\x92\x2c\x45\xec\x1e\xef\x1d\x55\x2a\x3b\xfe\x0c\x3e\x22\xa5\x66\x15\x8e\x8f\xa1\x2a\xe3\x94\x57\xe1\xf3\x5b\x90\x1e\x0f\x2b\x3b\x3b\xbb\xd0\xb6\xc1\x4f\x80\xd6\x6b\xb0\xe4\x10\x8a\x25\x84\x9c\xbb\x10\x65\x54\xf0\x50\x46\xe2\xa8\x0a\x3f\x20\x89\xe2\x75\x6d\x24\x83\xeb\xdd\xdf\x21\x49\x5d\xfc\x78\x09\xc6\x08\xe6\x7c\x01\x7e\x98\x48\x16\x04\xca\x8a\x78\xf6\xda\x97\x70\x88\x7f\xf1\x20\xe1\xeb\x05\xda\x9a\xf9\x95\x7c\x71\x17\x2e\x12\x1e\x43\xe2\x89\x34\x70\x41\xae\x22\x8e\x54\x88\x5d\x51\xa0\x9c\xcd\x1d\x1e\x39\x0b\x24\x88\x96\xba\x08\xb3\xcd\xff\x0f\x6b\xa5\xb9\xb8\x60\x30\xfb\xfa\x7f\x6a\xb4\x6d\xac\xca\xb6\x1b\x08\xd7\xd6\x47\xb4\xe5\xb2\xd4\x50\xd6\x8b\x84\xbb\x36\x7b\x31\x3c\x1b\xd9\xc5\x21\x8f\xc4\x45\xe4\x32\xc9\xb7\xdf\x8d\x71\x1f\x52\x75\x00\x0c\xe3\x8a\xc7\x53\x91\xf0\xbb\x94\x4e\x7d\x39\x4a\xa7\x0b\xe1\xa6\x01\xb7\x43\x5f\xde\x25\x36\x47\x89\x93\xfc\x08\x8a\x84\x1f\xef\xa5\xf2\x35\xa1\xca\x74\x32\xc9\xb6\x51\x1a\xa4\xb9\x3d\x86\xd6\x79\x7f\xac\x6f\x9f\x0c\x5b\xbd\xb6\xce\xdd\x35\xd1\x23\x4d\x34\x4a\x55\x64\x62\xe6\x96\xc8\x1d\x11\xb9\x93\x98\x2f\x4b\x26\x1e\xf7\xfb\x5d\x45\x70\x8a\x3b\xa5\xb8\xce\x5c\x93\x5d\xba\x88\x08\x20\xf8\xb6\x4b\xa9\xde\xda\x76\x29\xf7\xf8\xd6\x6b\xe1\x76\x6e\x19\xa7\x22\xb6\x9e\x58\xe3\x96\xba\x68\xf7\x46\xe3\x56\xb7\x3b\xb9\x18\x76\x8f\xab\x9e\x94\x51\xf2\xc6\x34\x63\xb6\xac\xa3\xde\x5e\x3a\x4d\x31\x20\x1d\x11\x4a\x1e\xca\xba\x23\x16\x66\xc0\x67\x32\xf1\xfc\x99\xe4\x71\x62\xa6\x91\xfa\xd3\x5c\xb0\x04\x3f\x9b\x19\xf3\x7a\xe2\x55\xd7\x19\xf8\x85\x18\xdd\x6c\x4f\xc3\xc7\x60\x3d\x17\x65\xb6\x94\x4d\x4e\x1a\x63\x42\xcc\x92\x51\x97\x04\x28\x70\x41\x39\xe0\x67\xd8\x9c\x87\x27\x4f\xc0\xf1\x30\x5c\xe0\xc7\xeb\x5b\xcb\x75\xb3\xfc\x39\x5e\x94\x96\x14\x80\x4b\x16\xcb\x91\xbf\x48\x03\x26\x45\x56\x2f\x3a\xd6\xaf\x76\x5b\x87\xd3\xb5\x13\xa7\xa1\xa2\x1a\xa7\x0b\xd4\x01\x8b\x4e\x56\x0a\x1a\x3f\x9b\x2e\xbf\x32\xc3\x34\xcb\x3b\x22\x66\xf7\x47\x76\xe8\xc4\x9c\x4e\x9e\xa4\x7e\xe0\xf6\xd2\xc5\x34\xaf\x42\x83\x61\xff\xcf\x56\x7b\x3c\xe9\xb5\xce\x15\x6d\x54\x51\x2c\x16\xbe\x6c\x8b\x34\x94\xc7\x7b\x4f\x29\x44\x63\x7e\x65\x04\x7e\x22\x31\x13\x15\x1e\x18\x0e\x6d\x1e\x28\x6b\xc4\x65\xa2\x78\xc3\x4c\x93\xd8\x0c\xfc\x29\xbf\xe6\x8e\x39\xa0\x7b\x27\xa9\xeb\xae\xc0\x70\xa0\x3a\x88\xfd\x50\x42\xfb\xfd\x49\x1a\x62\xf9\xfa\x15\xad\xed\x8b\xb0\x8a\x21\x65\xda\xe1\x4c\xd4\x23\x3a\x7d\x80\x32\x84\x7c\x59\x24\x5a\xdd\x38\xbd\x20\x5d\x15\x8c\xb9\xa4\xa5\x3b\x52\x14\x23\xe1\x16\xa9\x22\x81\x35\x38\xde\x3e\xf3\xf4\xe9\x16\xa2\x3f\x36\x0e\x0e\x54\x10\x54\x76\xee\x53\x11\x6b\x2f\xbc\xb9\xa5\x21\xec\x95\x39\x54\xc9\x59\x05\x95\xab\x48\x73\x17\x5a\xae\x0b\xf6\x78\xd4\x8a\x22\x84\xea\xa4\x27\x42\xeb\x9a\x2f\x22\x69\xa1\xef\x56\x91\x24\x32\x2c\x81\x19\x43\x91\x01\x8d\x81\x7e\xf1\x93\x70\x1f\x51\x89\xa3\x22\x2c\x4c\x96\x3c\x1e\x8b\xcd\xe1\xef\xf2\xc4\xbd\xec\xee\x48\x79\xa0\xbd\xf0\x11\xf6\xee\xb2\xa3\x2c\x7c\x56\xed\x08\x9e\x40\x4f\x48\xb0\xae\xe9\xc2\x33\xf8\xbc\x71\xc4\x7d\xd2\x90\xea\x6f\xee\xd7\x7d\x2a\x44\xa0\xb5\xbf\x6b\xbd\xac\x20\x61\xa0\x2b\x23\x97\x23\x7b\xfc\xdb\x40\x67\x4d\xbe\xb0\x6e\xa3\x46\xed\x33\xeb\x5c\x23\x71\x9e\x5c\xcf\x8b\x9d\xd6\x0b\x6c\xec\xd0\x9b\x86\x80\xc8\x8f\xf8\x8c\xf9\x01\xa5\xeb\xb5\x23\x5c\x3e\x25\x3e\x60\xa8\x9c\x53\xbd\x80\x91\x38\x1e\x66\x98\xae\xdb\x86\xe7\x23\x24\x7a\x3c\x08\x34\x2e\x5a\xe1\x95\x1f\x8b\x90\x12\x10\x0f\xba\x97\xe0\x47\x9e\x08\x79\x92\x27\x38\x18\x2e\xf6\x9c\x7e\xc8\x94\xa6\xd5\x08\x17\x67\x22\x5e\x1c\xdf\x3a\x56\x0b\xd9\x82\xa3\x8c\x55\x3a\x1f\xfb\x57\xdc\xed\x30\xc9\x06\x4c\x7a\x50\xcf\x41\x4b\x0b\xa6\x8b\x48\x75\xef\x05\xf5\x10\xd7\x4e\x14\x73\x29\x57\x99\x89\xa8\xbd\x7d\x44\x0b\x5d\x3b\x92\x3c\xf3\x55\x53\x3c\x86\xba\x12\x8f\x17\x74\xca\x14\x69\xc5\x8e\x87\x46\xf8\x03\xba\x94\x41\xef\x91\x7c\xfe\x0d\x97\x18\x4c\x8b\x5b\xde\xdb\x7b\x5e\xbf\x76\xb2\x1d\xc8\x7f\xdf\xe7\x3d\xeb\x3a\x12\xb1\xdc\x8e\xdd\xe5\x21\xe1\x1b\x6a\x70\x45\x28\xb3\x61\xfe\xb1\xaf\x72\x2d\x51\xd9\x09\xf5\x08\x15\xc2\x36\xc7\xd4\x7b\x3a\xd9\xbe\xa6\x47\xa3\xa0\x47\x46\xac\x7c\xa2\xd8\xdd\x28\xeb\x95\x55\x7b\xcf\xa5\xe3\xb5\x42\x6a\x0c\x99\x1f\x0f\x62\x71\xe5\x13\x72\xfa\xe1\x1c\xff\x9e\xf9\x01\x4f\xb4\xce\xbb\xb0\x3b\xee\x77\xfa\xd0\xeb\x8f\xe1\x62\x64\xf7\x4e\x61\x7c\x66\x8f\xa0\xd5\xfb\xed\xc3\x99\x35\xb4\x6a\xd0\xb3\xac\x0e\x8c\xfb\xd0\xb1\xda\x76\xc7\x02\xfb\x3d\x7c\xb0\x36\x8b\x7d\x75\x9c\xc8\x48\x0f\xbb\x74\xec\x03\x12\x48\xfc\xb9\x47\x2b\xae\x58\x86\x81\x60\x2e\x50\x91\x43\x74\x14\x6b\x0b\xc0\x4c\x04\xe8\x5e\x3a\xc4\x42\x57\x01\x1a\x50\x05\xa6\xf6\x79\x96\x86\x8e\x8a\xe3\x81\x88\x28\x6e\xf9\x36\xd9\x2b\x3b\xad\x76\xbb\x7f\xd1\x1b\x4f\xac\xf3\x96\xad\xdb\x2a\x62\x4b\x7d\x2e\xaa\x0b\x46\x0a\xeb\xa5\x5c\x8c\x89\xaa\xb5\x7a\x63\x71\x05\xcf\xea\x0b\x31\x45\x5a\x51\x4e\x7e\x2d\x1d\x06\xc2\x7d\xac\xd1\xb8\x08\xaf\xa3\x25\x3a\x61\x24\xd2\xd8\xc9\x2d\xd9\x1a\xb6\xcf\xec\x5f\xad\x4d\xf4\xd8\x83\xd6\xe6\x83\x2a\xb7\x86\x0b\xd5\xad\x2e\x36\x35\xb9\x34\x22\x3f\x9b\xc5\x72\x1b\x51\x5d\x99\x29\x44\x47\x21\xa0\xc8\x16\xd0\xa2\x64\x31\xe4\x83\x06\x8d\x51\xb1\x4f\x21\x62\xf7\x4e\x1a\xfe\xcd\x8f\xc0\xf8\x6b\x21\x9a\x9a\x75\x3f\x62\xc4\x7e\xbd\x24\x17\x11\x1e\xa5\x56\xa9\x7c\x08\x17\x17\x97\x2e\x99\x30\x2e\x1d\x2e\x4b\xa8\x91\x45\xa0\x1f\x76\x1c\x64\x15\xcf\xb6\x47\xee\xf6\x4b\xe6\xb3\xba\xbb\xc2\xc2\xf5\x1d\xf4\xf3\xa3\xc4\xe7\x8e\xf0\x4a\x4b\x94\xb2\x9e\xeb\x57\xcf\x8e\xd5\xcd\x7a\x5d\x2b\x57\x92\x4c\xdd\xca\xc6\xd4\x88\x22\x02\x0d\x87\xae\x1d\xa7\x61\xee\x42\xc4\x64\xab\xdb\x1f\x58\xc3\x49\x16\x5e\x6b\x3f\xae\x51\x20\xf2\x03\x2c\xc7\xa9\xba\x8f\x9d\x1b\x35\xbe\x04\xab\x34\x71\x18\x06\x09\xa1\x91\xcc\x48\x2e\xfd\x68\xb2\x64\x3e\xc2\xf2\x7c\x82\xde\x99\x28\x98\x98\x60\xb4\xa1\xe7\x12\x72\x25\xb5\xd8\x9b\x59\x4c\xe5\xac\x1f\xba\x5b\x42\xee\x3e\xd9\x4e\x2e\x7a\x9d\xae\x35\xc1\xcc\xec\x8d\xed\xf7\xb6\x35\xd4\x50\x45\x71\xaf\x42\x1d\xe1\x25\x7b\xc3\x68\xc7\x1c\x23\x1a\x1b\x82\x7e\x68\xcb\x6f\xa9\xbc\x9d\x6c\x19\x1f\x11\xf7\x51\x1b\x37\x75\x78\x91\x15\xf5\xb4\x51\x34\x51\x36\x21\x1c\xd7\xf3\xe9\xd7\xd3\xe9\x5b\x28\x74\xde\xff\x2a\x08\x7d\xb0\xbb\xdd\x22\x02\x9d\x22\x40\x53\x3e\x5c\x5c\xd8\x1d\x98\xc5\x62\x51\xc8\xe8\x5d\xc8\x87\x96\x39\x82\x6e\x36\xb5\xa8\x51\x65\x71\x1d\xc5\xe6\xab\xe6\xe1\xab\xe6\xab\xd7\xec\xa7\x23\x87\x3d\xe7\x47\xec\xe8\x05\x7b\x4e\x97\xba\x42\x44\x48\x33\x16\x29\x1a\x94\xf0\x43\xc9\x5c\xa3\x7e\x71\x25\x52\x9c\xeb\x25\x30\xb8\xe8\xd8\x9d\x1a\x30\x57\x01\xd9\x22\xcf\x4a\x05\xee\x62\x06\x51\x8e\x1b\x45\x0c\x30\xd7\xb5\xa0\xfc\xd6\x31\xc6\x8b\xb7\x40\x12\x38\xb5\x7e\x94\x69\x94\xe3\x19\xb5\x1e\x99\xd7\xdf\x40\x96\x79\x07\xcd\xde\x22\xee\xd1\xdb\x45\x9a\xfa\xee\xfd\xad\xeb\xbe\x6e\x5d\xc9\x6a\xfb\xa0\xa6\x9d\x44\x22\xd6\xc0\xbb\x77\xef\x60\xef\x69\xc2\xb1\x73\xf7\xe5\x0a\x9c\x05\x4e\x45\x1d\x30\x7c\x1a\xd4\x0a\x62\xdc\xd0\x7b\xd9\x7a\x48\x3a\xa0\x69\x83\x34\xb1\x67\x64\x19\xf2\x84\x92\xbf\xa6\x41\xde\x11\xd1\x0a\x3b\xed\x5a\xd6\x70\x7b\x4c\x75\xdc\x2c\xc0\xd8\x44\x61\xa6\x5c\x1f\xf1\x39\x3d\x9e\xac\xc7\x52\x52\xe1\x66\xcb\xd3\x4e\x66\xcf\x19\xfc\xdd\xec\xfa\xd3\x98\xc5\x2b\xf3\x5c\x19\xa1\xc3\xaf\x7c\x87\x9b\xc5\x70\xfb\x04\x79\xc0\x99\x19\xc1\x3b\xf0\x5f\xa4\x8c\x0a\x8c\x70\x33\x94\x01\x8a\x3b\x0f\x45\xac\xde\x81\xd6\x0f\x42\xea\x59\x8a\x54\x21\x8a\xe4\x70\x1d\x72\x59\x51\xa3\x7f\x84\x8a\xb3\xbb\x96\x7a\x14\x49\x35\x87\xbc\x30\x9c\xe3\x2a\xa2\x49\x99\x13\x7c\xcc\xee\x7e\x26\xe9\x32\x9e\xba\x3a\xe8\x57\xac\xec\xa7\x8b\x28\xab\x07\xf1\xcd\x0b\x04\x36\x0d\xb1\xf0\xdd\x2e\xc3\x42\xec\x59\xc5\x91\xb9\xb2\x13\x73\xb7\x2d\x02\x2c\x3f\xc7\xfb\x9f\x0e\x8f\x8e\x3e\x1e\xbe\x3d\x6a\x2c\xf6\xe9\xed\x15\x5d\x77\x7b\xa7\x49\x3b\xd3\x20\xe5\xb7\x37\x9e\xd3\x46\x28\xca\xcb\xb8\x56\xd9\xb1\xce\x2f\xba\xad\x71\x7f\xf8\x95\x16\x6c\xbd\x3d\xb4\x46\x17\xdd\xf1\x08\x03\x3b\x14\x5e\x1a\xa1\xa1\x5b\xbd\xce\xb0\x6f\x77\x26\x67\xfd\x73\xcb\xa4\x0e\x3a\x31\x79\x26\x3b\xc2\x31\xbb\x72\xf3\xa7\x5d\x84\xa8\x06\xfd\x78\x72\xa0\x86\x44\x05\x3b\x6f\x30\xf1\xb0\x7b\xc1\xff\x0c\xa6\xfe\x1c\x76\xcf\x5a\xed\x5f\x6a\x20\x42\x74\x3f\x8f\x63\x11\xe3\x46\xcc\xb1\xb9\x90\x69\x1c\x72\x37\x7f\xe9\x9b\xf9\x31\xe6\xb8\x5c\x0a\x9c\x19\x1d\x11\xba\x08\x0c\x36\x24\xa9\x73\xa9\xba\x1a\x1b\x33\x90\xa2\xfb\x92\x5e\x2c\x19\x2c\xd9\x0a\x44\x2a\x0b\x6f\xdb\x5b\xb4\x79\xb7\xd7\xd4\x62\xb5\x3d\x8e\x64\x30\xc0\x91\x0f\x72\x5e\x32\x12\x6d\xd0\xea\xd9\x6d\xf8\x48\x00\x43\x0d\x3c\x75\x5c\x35\x88\x52\x99\xcb\xb3\xc4\x99\x68\x0e\xb9\xda\x40\x18\xfc\x99\x1e\xbd\xf1\xd6\x24\xc3\xf6\xa7\xea\x3d\x14\xe3\xf2\x36\xf3\x1b\x6a\x20\xd1\x8d\x68\x4b\x75\x01\x8d\xe6\x68\x51\xec\xb2\x10\x11\x0b\x7d\xa7\xa6\x40\x71\x49\x39\xcc\x34\xe8\x52\x21\x54\x49\xbe\x82\x05\x16\x38\x34\x52\x1a\xd5\x20\xa4\x5a\x99\x6c\x5e\x98\x0a\xb2\xdc\xe8\xe7\x86\xc3\x2d\xbd\x0e\xa1\xe0\x5a\x8b\xa5\x32\xa2\x2a\xb7\x69\x54\x87\x73\xb6\x9a\x72\xc5\x71\xef\xcb\x3a\x1a\x6f\xf2\xd3\x14\xfc\x7b\x5f\xf2\xd0\xba\x81\x4b\x14\x47\x4f\xf5\x8e\x88\x63\xee\x48\x9d\x03\x39\xa3\x33\x54\x6b\x3f\x81\xa5\x97\x29\x11\x88\x39\x24\x6c\x95\xbc\xf9\x14\x96\x0f\x6e\xb1\x57\x7e\x44\x3f\x0e\x1f\xc2\x2e\xfd\x20\x88\x1e\x90\x81\x0a\xef\xc4\x23\xce\x11\x3a\x03\xff\x92\x67\x76\xc4\x30\x0b\x45\x6e\xc7\x80\x4b\x94\xc0\x51\xee\xa6\xdb\x3a\xdc\xf0\xa2\x35\x1c\x22\xb7\xff\xc2\x6d\xea\x82\x76\xdb\x06\x3b\x0b\x54\xb6\x18\xfc\x7b\xf4\xcb\x14\x6c\x90\x82\x0d\x25\xa2\x45\x22\x16\x9e\xc7\xd7\x2d\x2a\xd6\x47\x1a\x92\xa6\x6c\xba\xaa\xa1\x7b\x0a\xa0\x70\x93\xd0\x03\x1c\xe2\x54\xd1\x39\x18\xc7\x99\x5b\x95\xf1\x73\x1f\x66\x6c\x77\xa1\xd5\x39\x81\x39\x76\x91\x89\x9e\x2d\x84\x7e\xb7\xc0\x5b\xd4\x56\x29\x49\xe8\x9a\xab\x20\x14\xa4\x4f\x43\x06\xf9\x19\xc3\x4f\xc5\x9e\xb6\xec\x5f\x52\xcc\x14\x97\x47\x1c\x33\x12\x6f\x63\xed\xd1\xc4\x65\x96\xf0\x58\x79\x82\x40\xc7\x2c\x2c\xb1\x2b\xc0\x70\xc5\x78\xe0\xe1\xc6\x57\x8c\x8a\xee\x34\xc0\xca\xae\xf6\x8b\xa2\x02\x0d\x82\xc9\x5a\x91\x29\x77\x18\xe6\x01\x55\x7d\x9f\x78\xe3\xe0\x01\xd3\x74\x4e\xde\xdc\x61\xee\x54\xc9\x6d\xa0\xdc\x86\x96\x39\xab\x94\x3d\xcc\x23\x99\x47\x60\xa6\x0d\xb1\xbd\x42\xda\x0c\xf9\xd6\x74\x6e\x0b\xc2\x1a\x32\xc3\x95\xae\x31\x65\x8c\xd8\x88\xe4\xd1\xa3\x96\x1f\xfa\x89\x87\x39\x38\x15\x92\xac\xae\xea\x2d\xe6\x62\x0d\x08\x7c\xdc\x48\x19\xaf\x99\xa3\x96\x9e\xc1\xe2\x95\xb6\x09\x9b\x33\x3f\xac\xad\xed\x83\x9e\x22\x72\x2c\xc0\x13\xfe\x7c\xae\x79\xe7\x1e\x2f\x87\x76\x41\x78\x82\xbc\x72\x00\xac\xd5\x29\x44\x80\xfa\x3e\x87\x80\x15\xfb\x28\x12\x13\x9c\x00\x3b\xe1\xcc\xff\xa3\xf6\xd0\xb2\x7a\x93\x6e\xbf\xd5\xc1\x7e\x10\x53\x80\x2c\x98\xd0\x1b\x10\x1d\x47\x97\x44\x90\xac\x92\xfa\x54\x08\x39\x41\xa7\x47\xe8\x6e\xae\x1e\x6a\xe8\x39\x04\xf6\x3f\xc5\xfb\x94\x07\x3b\x4b\x8f\x4a\x34\xe5\x42\x99\xa0\xee\x27\x1a\xaa\xa1\xd0\x9d\x52\x06\xcc\xcf\x2b\xc5\xea\xfa\x5d\x36\x16\xda\xc6\x4b\x6f\xa5\xbe\xa9\xf2\xf4\x0f\xd4\x27\x11\x68\x85\x4d\x05\xbc\x71\xd9\x22\x2c\x66\x40\x12\x88\xe5\x9f\xf2\xb2\xfc\x48\x0a\xab\x92\x9e\x25\x50\x80\x2e\xf3\xd0\xeb\x1c\x63\x66\xa5\x45\xca\x9c\x43\xa7\xea\xeb\xaa\xa7\x92\x24\x25\xd0\xc6\x50\x4e\x71\x5a\x46\x9d\x37\x0e\xad\x97\x93\x7c\x21\xf0\x70\xd9\xb9\x44\xad\xe4\x57\x29\x52\xc7\x2b\xc6\x84\x08\x9d\xdc\xb1\x1b\xb5\xfc\x90\x8a\x17\x62\x34\xca\x87\x1d\xe8\xab\x66\x19\x92\x8a\x1c\x70\x30\xe4\xf1\x0f\x45\xdb\x95\x8a\x44\xa6\x55\x9c\x86\xd4\x42\xd5\xe1\x37\x91\xee\xc7\xc4\x15\x31\x1d\xeb\xf1\x0a\xf0\x76\x82\xe9\xff\xef\x7f\xfe\xe3\x5f\x45\x58\x3b\xcc\xbe\xd4\xa3\x57\x68\x6c\x7d\x6e\xff\xcb\x5a\xa1\xfc\x3b\x99\xce\x2f\xf9\xb4\xd2\x56\x4d\xaa\x1e\x32\x14\x4e\x18\x6a\xbe\xc0\xf1\x02\x81\xce\xb9\xa4\x1c\x9d\xa1\x6f\xd5\x80\xc1\xcc\xa3\xc6\xeb\xc3\xc3\xe7\xcd\x97\xe6\x8b\x97\xaf\x1b\x6a\xae\xc0\x36\x41\x01\x56\xa1\x43\xf0\x94\x57\x72\xb0\xc3\x74\xbf\xac\xec\x3c\x05\x1d\x93\x2f\xe8\xb1\x29\x8f\xe4\x86\x0e\xd9\x6c\xab\xf1\x16\x54\x6d\x58\xbd\x55\x3e\x85\x03\x8c\x08\xa6\xc5\xce\xbf\x55\xa3\x17\x43\xc3\x08\x85\x91\xfa\x85\xfe\x2e\xfb\x1e\x6c\xad\x94\xa6\xf2\xb5\xdb\xfa\x7b\x0a\x45\x03\x7f\x63\x9f\x29\x71\x32\xa9\x66\x47\x8d\x26\xce\x79\x0f\x23\xd0\x7c\x28\x81\xc6\x43\x09\x1c\x3e\x90\x40\xe3\xf5\x43\x09\xbc\x7a\x28\x81\x97\x0f\x25\xf0\xd3\x1f\x24\xa0\xfa\xed\x3f\x78\x37\x7f\xad\x36\x1e\x42\x84\x5f\xcb\x98\x19\xb9\x1e\x8b\x26\x7d\xdd\x9d\xf8\x88\x0c\xab\x07\x11\x9c\x0b\x31\x0f\xf8\x63\xd0\x43\xe4\x36\xfc\xc5\xdc\x60\xf1\x82\xb3\xa9\x6f\x5c\xbd\xdc\x88\x4b\xc1\x7f\x53\xf9\x4f\x00\x00\x00\xff\xff\x97\xa5\xfc\xb2\x52\x23\x00\x00")

func scriptsBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBash,
		"scripts.bash",
	)
}

func scriptsBash() (*asset, error) {
	bytes, err := scriptsBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.bash", size: 9042, mode: os.FileMode(420), modTime: time.Unix(1468255274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.bash": scriptsBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.bash": &bintree{scriptsBash, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

