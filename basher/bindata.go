// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x7d\x72\xdb\xb8\x15\xff\x5b\x3a\xc5\x5b\xd9\x13\x27\xad\x29\x5a\x72\xb2\xf9\x74\x3a\x8a\xa4\x24\xea\xfa\x43\x63\xd9\xe9\xec\x24\x3b\x1e\x88\x84\x24\xd4\x24\xc0\x82\xa0\x65\x35\xf5\xde\xa0\x67\xe8\x3d\x7a\xaa\x1e\xa1\xef\x01\xa4\x44\xca\xf2\x26\x59\x67\x3b\xdb\x24\x22\x80\xf7\xfd\xf1\x7b\xc0\x11\xbb\xe4\x6f\x55\x14\x72\x9d\x3e\x7c\x04\x9f\xeb\xb5\xf8\x32\x14\x1a\xbc\x04\x9a\x59\x92\xce\xc4\xc4\xf8\x91\x9a\xa6\xfe\xa6\x85\x71\x26\xa2\xb0\xb2\x92\x68\x71\xc5\x0c\xaf\xdf\xd4\xeb\xe7\xc9\x54\xb3\x90\x8f\x02\x2d\x12\xe3\x48\x07\x99\x8e\xc0\x9b\xa4\xa3\x43\x98\x19\x93\xa4\x2f\x7c\x5f\xb3\x79\x73\x2a\xcc\x2c\x1b\x67\x29\xd7\x81\x92\x86\x4b\xd3\x0c\x54\xec\x47\x7c\x62\x2c\x1b\x94\xcc\x2f\x38\xc6\x2c\xc5\xdf\xbe\x90\xa9\x61\x51\xd4\x4c\x67\xf0\x1a\xf2\xb5\xa6\xe1\x71\x02\x0f\x1e\x40\x30\x8b\x55\x08\x7f\xbe\xbe\xb5\xd0\xf4\xd7\xbf\xe8\xb8\xb2\x89\xc4\x1e\x71\x93\x25\xef\x78\xec\x24\x7e\xd7\x3f\x3a\xd8\x6e\xd5\x6b\xdd\xc1\xc1\x76\xbb\x5e\x3b\x55\xca\x0c\x59\x9a\xce\x95\x0e\x0f\xb6\xf7\xeb\xf5\x9a\x98\xc0\x47\x68\x6c\xb7\x1b\x70\x70\x00\x0d\xa3\x33\xde\x80\x5f\x5e\x82\x99\x71\x59\xaf\xd5\xb6\xa0\x3b\x00\x91\x02\x7d\xdf\x85\x39\x07\xa9\xe6\x20\x39\x0f\x21\xc9\xa9\xe0\xa6\x9c\xc4\x7e\x03\x7e\x40\x12\xe5\xe3\x35\x1e\xcc\x14\x78\xdc\xad\xfe\x0b\xd2\x2c\xc4\x9f\x23\x98\xf2\x18\x72\x13\x00\x49\x87\x1b\xaf\x85\x81\x3d\xfc\x17\x8f\x52\xbe\xfc\x40\x4b\x13\x51\x2f\x3e\x6e\xc1\x39\xda\x18\xd2\x99\xca\xa2\x10\xcc\x22\xe1\x48\x85\x78\x95\xa5\xb9\x93\x47\xc1\x02\x09\xa2\x99\xde\x09\x33\xcc\xa2\xc8\x59\xe9\xb4\x7f\x74\x72\xd6\xb7\x86\x7a\x73\xda\x39\xee\xbe\xb7\xc6\x3a\x3c\x79\xf7\x76\x70\xd8\x27\x3b\xd5\x4a\x51\x56\xaf\xa1\xbf\x21\xc9\x2c\x5d\xd8\x6e\x43\xfb\xf5\x83\x16\x2a\x67\x38\x07\xdc\xea\x68\x8f\xb2\x31\x3a\x31\x8b\xf8\x40\x8a\x3c\x78\x96\xe4\x5a\x1b\xc8\xa5\xc5\x7e\x94\x19\x7f\x96\x49\xb6\xd6\x49\x9e\x27\x21\x86\xe8\x37\x11\xcd\xec\x91\xdb\x64\x87\x2a\x1c\x38\x1b\x7d\x81\x5c\x82\x11\x59\x58\xb3\x42\xa5\x96\x93\x39\xe5\x89\xba\x4b\xb0\x73\x17\xa2\x5d\x25\x27\x62\xea\x68\x69\xdc\x5e\x48\xe5\x79\x57\x5c\x8f\x55\xca\x37\x50\x76\xd1\x8c\x79\x18\xf1\xbf\x39\xc2\x55\x2d\xed\x0a\xcc\x35\x4b\x12\xae\xed\x01\xc3\xb4\x19\x89\x38\x8b\x98\x51\xda\x1d\xe9\xf5\x3f\x0c\xba\x1b\x94\xba\x0e\x74\x26\xad\x5a\x3a\x8b\x31\x6d\x53\xf0\xe6\x18\xaa\xad\x06\xb4\x5e\xfb\x21\xbf\xf2\x65\x96\xab\x4b\x94\xbb\x2a\x4e\x04\x3a\xf4\x64\xe4\xa8\x0e\x4f\x4f\xfe\xda\xef\x9e\x5d\x9c\xfd\x3c\x74\xb4\x8b\x0f\xc3\xce\x99\x0b\xa0\x51\xf7\x7d\xff\xc8\xc5\x4f\x21\xc2\x63\x6b\x99\x7c\xcb\x93\x35\x79\x52\x6e\xc0\x53\x90\x88\x84\x4f\x98\x88\x28\xc1\xaf\x03\x15\x72\x5b\xa6\xc0\xb3\x92\xd9\x54\xf5\xd2\x60\xc6\xe3\x3c\xad\xbc\x99\xc0\x2a\x35\xe3\x51\xe4\x4a\x55\x5f\x5e\x09\xad\x24\x29\x84\x1b\xc3\x4b\x10\xc9\x4c\x49\x9e\x16\x36\x01\x2f\xe4\xa9\x11\x92\x19\xa1\x24\x34\x12\xfc\x38\x51\x3a\x3e\x58\xdb\xb6\x2b\x59\xcc\x51\xe0\x06\xed\xc7\xaa\xc8\xc3\x1e\x33\x6c\xc8\xcc\x6c\xad\x7e\xe6\x0e\x6b\x6c\x3f\xa1\x14\xbf\x0e\x12\xcd\x8d\x59\x90\xc5\x3a\x3a\x98\xe1\xc1\xdf\x67\xb1\x62\xed\xb8\x73\xf4\x07\xd9\xed\x0b\x6a\x79\xcc\x89\x5f\x5d\xdb\x7e\xdc\xbc\x0e\xf2\x15\x28\xfe\xbe\xd3\x02\xfd\xeb\x44\x69\x73\xcb\x00\x4e\xa7\x56\x59\xa7\xf6\xb7\xe9\xc4\x2d\xe1\xdc\xc0\xc5\xcf\x93\x84\x5c\x9a\x0e\x23\x91\x9a\x65\x2b\xf3\xdd\x5a\x33\xb1\x5f\xef\x50\xaa\x55\x52\x2a\x27\x56\xdd\x51\x4e\x4d\x6b\xca\xaa\x9e\x6f\xb9\x09\x66\x1d\x49\x55\x80\x09\x3d\xd4\xea\x4a\xa4\x28\x8a\x90\x53\xfc\xf7\x04\xb3\x26\xef\xcd\x5b\x58\xad\xb1\x9d\x60\xab\x4c\x21\x15\xd3\x19\x7d\x09\xd5\x5c\x46\x8a\x85\x40\xb5\x45\x48\xa3\x96\xa2\xc3\xc4\x5a\x83\x36\x31\x19\xda\xa6\x02\x94\xb1\x54\xf1\x27\x99\x0c\x6c\x00\x0f\x55\x42\x01\xcb\x37\x31\xad\xd7\x3a\xdd\xee\xc9\xf9\xf1\xd9\x45\xff\xa8\x33\x38\xb4\x26\x27\xb6\x54\x7e\x18\x75\xfc\x0c\x96\x9f\x0a\x31\x2e\x48\x8c\x7c\x61\x85\x0b\xfc\x25\x32\xa8\xc5\x57\xf0\xa7\x66\xac\xc6\xc8\x20\x29\x78\xae\x80\x43\xed\x37\xe5\x21\x53\x09\x19\x6e\x58\x5b\x56\xaa\xfe\xe1\xc9\xb0\x7f\x7a\x91\x0b\xee\x7a\xd2\xf9\x71\xef\xb0\x7f\x31\xe8\xf5\x8f\xcf\x06\x6f\x07\xfd\x53\x1b\x2e\x56\x6a\x2b\x28\x7a\x95\xfa\x90\xe7\xb1\x70\xa6\x02\x57\x90\xef\x16\xa2\xf0\xc4\x3b\x8c\x30\xb2\xe4\xf9\xf9\xa0\x07\x13\xad\xe2\x92\x12\x5b\x4b\x7c\x33\xc5\xa8\xc9\x01\x8e\x45\x35\xf1\x75\xa2\xfd\x67\xed\xbd\x67\xed\x67\xcf\xd9\x8f\xfb\x01\x7b\xcc\xf7\xd9\xfe\x13\xf6\x98\x0e\x1d\x2a\x95\x20\x4d\xad\x32\x14\x8d\xec\x68\x19\xee\x02\x22\x84\x85\xca\xb0\x25\x1b\x60\x70\xde\x1b\xf4\x76\x81\x85\xd6\xa1\x31\xa0\xbf\x49\x0a\x1b\x9d\x6a\x02\xc9\xd2\x75\x95\x74\xb0\x18\xc3\x0b\xa1\xb1\xf2\x84\x5f\x05\x2a\x67\x48\x64\x2d\x70\x00\x5b\x7e\x6a\x52\x02\x11\x2a\xb3\x56\xb7\xa4\x0f\x26\xcc\xe1\x09\x2c\x7b\x05\xbf\x63\x2c\x76\x04\x26\x96\xc4\x6f\xb9\xf8\x25\x46\x08\x01\x93\x2c\x13\x08\x9d\x1e\xfa\x59\xaa\xfd\x48\x8c\xf9\x35\x0f\x7c\x9b\x71\x6f\xb2\x30\x5c\x80\x17\xc0\xce\x50\x63\x18\x5b\xbb\xee\x80\xed\x23\xa9\x09\x91\xf6\xab\x57\xaf\x60\xfb\x61\xca\x11\x45\x0a\xb3\x80\x20\xc6\x7e\xd3\x03\x4f\x60\x42\x7d\x2e\x89\x71\xd3\xc0\x64\x5b\xb6\x9f\x47\x8f\xea\xc4\x75\x0b\x06\x13\xb2\x1d\xf9\xca\x6a\xb5\xeb\xd2\x21\x50\xc9\x02\x84\xb1\x26\xc6\x8e\x3f\x63\xa9\xdc\x41\x23\x47\x9a\x33\x14\x66\xcc\xdd\x16\xc1\x09\x19\x15\x40\xed\x33\xa9\x70\xb3\x01\xad\xe5\x56\x9e\xc0\xaf\xfe\xa1\x18\x6b\xa6\x17\xfe\x91\x35\x42\x8f\x5f\x89\x80\xfb\xe5\x68\xfa\x04\x85\x39\xfd\x9c\xe0\xad\x9c\x28\x53\x46\x05\x46\xb8\x28\x4d\x84\xe2\x4e\xa5\xd2\xdc\x7d\x4e\xc8\x54\x93\x75\x0b\xe4\x8e\x2b\xd0\x5d\x2e\xcc\x27\xd9\xb0\x87\x0a\x88\x68\xe1\x29\xe9\x4f\xe7\x28\x8e\x5c\x24\xe7\x35\x83\xfe\x17\x24\xa4\xcd\x2d\xf3\x7e\x17\xf5\xaa\xf2\x1f\xe1\x57\x39\x85\x35\x35\x3e\xe6\x67\x7f\x21\xe9\xd6\xb4\x20\x5c\x5b\x5b\x8f\x4c\xc2\xd9\xf5\x62\x31\xc4\x76\x5c\x5f\xe1\xeb\xca\x4e\x0b\xd7\x69\x77\x05\x6d\xaf\x83\xe8\x42\xba\x5e\x16\x22\x7c\xff\x19\x53\xd0\x62\x77\x14\x86\xd2\x2f\x55\x18\xf3\x49\x49\xe9\x65\xf2\x95\x33\x21\x97\x77\x13\x1e\x2f\xc8\xbf\xe7\x8b\x5d\x9b\xe0\x65\xea\xf8\x5b\x7f\x2d\xf5\x82\xb8\x83\xe6\xd8\x47\xb4\x12\x61\x37\xe2\x4c\x2e\xc1\x64\xde\x26\xd7\x21\x5c\xd3\x77\x10\x70\x0e\x01\x6d\xbf\x8d\x70\x73\x62\xe7\x52\xac\xe1\xdc\x2f\x12\xcc\x8a\x23\x9d\x75\xcc\x5b\xa2\x9b\xa3\xe7\x1e\xf6\xe5\xe9\xd7\x93\x16\xa5\x53\x58\xb6\xf1\x47\x70\x69\x34\x0b\x36\x20\xf4\x9c\x4f\x27\x4d\x79\x3c\x8e\xf8\xd7\xf3\x60\xf9\x89\xaf\xa3\x7f\x88\x9e\xfc\x7a\xda\x11\xd5\xb7\xbb\x48\x59\x04\xde\xc1\xe6\x7c\x85\x55\x2e\xc7\x3d\x9d\xee\x4f\x9d\x77\x39\x02\xef\x0c\x8e\xb1\xbb\x9d\x0d\x3e\x0c\xce\x7e\xbe\x8d\x7b\x58\x38\xc6\x01\x0f\xc1\x2c\xb0\x18\x52\x22\x05\x9e\x44\x06\x84\x51\x70\x73\x49\x62\x86\x08\x60\xd6\x2f\x03\xfd\x2a\xa9\x7a\x4d\xf3\xb0\xab\x22\x8c\xc3\x83\x9d\x4f\x7b\xfb\xfb\x1f\xf7\x5e\xee\xb7\xe2\x1d\x9a\x1a\xb0\x2e\xae\xaf\xb4\x69\x65\x1c\x65\x7c\x7d\xe1\x31\x2d\x48\x55\xfd\x8c\xdf\xea\xb5\xfe\xd1\xf9\x61\xe7\xec\xe4\xf4\x0e\x3c\xb7\x5c\x3e\xed\x8f\xce\x0f\xcf\x46\xd8\x35\xa4\x9a\x65\x09\xe6\x72\xe7\xb8\x77\x7a\x32\xe8\x5d\xbc\x3f\x39\xea\xfb\x46\xa9\x28\xf5\x79\xae\x09\x02\x53\x76\x15\xba\x31\xa4\xfd\x1a\xdb\x7a\x8b\xfe\x78\x40\x6d\x00\x9b\xdc\x49\xef\x04\x5e\x60\xaf\x43\x10\x85\xff\x31\x18\x8b\x29\x6c\xbd\x47\xf3\xee\x82\x92\x58\x5b\xb9\xd6\x4a\xe3\x82\xe6\x88\x71\x4c\xa6\x25\x0f\x8b\x2a\x3a\x11\x1a\x5b\xac\x99\x2b\xc0\x16\xa4\x64\x88\x7d\x79\x80\x23\x62\x70\x69\xc1\xd5\x00\xdb\x1b\xb5\x8e\x4b\x9a\xf0\x19\xcc\xd9\x02\x54\x66\x10\x65\x44\x9c\x27\xb0\x59\x9b\x57\xdb\x6d\x27\x56\x77\xc6\x91\x0c\xd6\x29\xe4\x83\x9c\xe7\x8c\x44\x1b\x76\x8e\x07\x5d\xf8\x48\xfd\x9d\x13\x63\x94\x79\x17\xc7\x66\x53\xc8\x33\xc7\x21\x65\x0a\x85\xda\x40\xe3\xc6\x2f\x14\x2a\x78\xea\x22\xc7\x3e\x0f\xed\xfd\x01\xd6\xef\x75\xe6\x37\x04\x40\xd1\x8d\x68\x4b\x7b\x00\x8d\x16\x38\x51\x06\x55\x21\x12\x26\x45\xb0\x6b\x31\xc9\x9c\x1a\x24\x73\x98\x87\xee\x6a\x6c\x07\x5d\x40\xcc\x31\x51\x42\x9c\x45\x77\x41\x2a\x83\x2b\xcb\x3b\x91\xcf\x25\x59\x90\xa1\x37\xc5\xe2\x5a\x2a\xb7\x45\xf5\x23\xe0\xb1\xd4\x62\x6e\x8d\x68\xe1\x6c\x96\x34\xe1\x88\x2d\xc6\xdc\x72\xdc\xfe\xbc\x8c\xc6\x9b\x62\x37\x35\x89\xed\xcf\x45\x68\xdd\xc0\x25\x8a\x23\x6c\x03\x0f\x94\xd6\x3c\x30\xae\x3a\xae\xca\xac\xe6\x3b\x29\xcc\x67\xb9\x12\x91\x9a\x42\xca\x16\xe9\x8b\x4f\xb2\xba\x71\x83\xbd\x8a\x2d\xae\xd2\xee\xc1\x16\xfd\x41\xf8\x67\x48\x06\x2a\xdd\xb0\x8c\x38\x47\x5c\x12\x89\x4b\x9e\xdb\x11\xc3\x4c\xaa\xc2\x8e\x11\x37\x28\x41\x60\xdd\x4d\xa7\x5d\xb8\xe1\xc1\xfe\xe9\x29\x72\xfb\x06\xb7\xd9\x03\xce\x6d\x2b\x60\x52\xa2\xb2\xc1\xe0\x5f\xa3\x5f\xae\x60\x8b\x14\x6c\x59\x11\xfb\x24\xe2\x86\x9e\x48\x55\x9d\x86\xac\x31\x1b\x63\xf7\xda\xfe\x5c\x2a\x0a\x37\xb6\xee\x60\xcb\x2a\x3b\x07\xe3\x38\x77\xab\x35\x7e\xe1\xc3\x9c\xed\x16\x74\x7a\x6f\x60\x8a\xf3\x53\xea\x46\x1c\x65\x67\x31\x3a\x35\x67\x28\x11\x49\x42\xc7\x42\x0b\x35\xc0\x08\x9a\x75\xc8\xcf\x18\x7e\x36\xf6\x9c\x65\xff\x9e\x61\xa6\x84\x3c\xe1\x98\x91\x78\x1a\x81\x9d\x23\x6e\xf2\x84\x47\x58\x17\x45\x2e\x66\x61\x8e\xa0\x1c\xc3\x15\xe3\x81\xcb\x95\xaf\x18\xb5\x59\x2c\xfb\xb1\x5b\x2f\x8b\x0a\x34\x48\xa6\x4b\x45\xc6\x3c\x60\x98\x07\x04\xba\x05\xf1\xc6\xf9\x07\xb0\x1f\x91\x37\x6d\x15\x26\xb9\x3d\x94\xdb\x73\x32\xe7\x30\xf4\x18\xf3\xc8\x14\x11\x98\x6b\x43\x6c\xaf\x90\x36\x43\xbe\xbb\x2e\xb7\x15\xd5\x1a\x32\xc3\x95\xc3\x62\xd5\x1a\xb1\x12\x09\x01\x2b\x16\x26\x29\xb0\xe4\xa3\x44\xca\x90\xd5\x2d\x98\xc5\x5c\xdc\x05\x2a\x3e\x61\x62\x8d\xd7\x2e\xaa\x96\x1b\x05\xf5\xc2\xd9\x84\x4d\x99\x90\xbb\x4b\xfb\x10\xe6\x40\x72\x2c\xc2\x1d\x62\x3a\x75\xbc\x0b\x8f\x57\x43\xbb\x24\x3c\x95\xbc\x6a\x00\x2c\xd5\x29\x45\x80\xbd\xff\xa4\xc2\x8a\x63\x0c\x89\x89\x88\x43\xa5\x05\x3c\x1a\x75\x4f\xfb\xfd\xe3\x8b\xc3\x93\x4e\x6f\x70\xfc\x0e\x53\x60\xd5\xc7\x70\x3b\xba\x24\x81\x74\x91\x36\xc7\x4a\x99\x0b\x74\x7a\x82\xee\xe6\xf6\xe6\x84\xae\x63\x60\xe7\x93\xde\xa1\x3c\xa8\xcd\x67\x04\x65\x29\x17\xaa\x04\x1d\x58\x6f\x59\xb4\xee\xc6\x90\xbc\x30\x3f\xae\x97\x51\xe8\x57\xd9\x58\x39\x1b\xcf\x67\x0b\x7b\xb3\x3b\x73\x7f\xa0\x3e\xa9\x42\x2b\xac\x3a\xe0\x4d\xc8\x62\x59\xce\x80\x34\x52\xf3\xbf\x14\xf0\xf5\x3b\x29\x5c\x60\x5c\x4a\xa0\x08\x5d\x36\x43\xaf\x73\x8c\x99\x85\x13\x29\x77\x0e\xed\x6a\x2e\xbb\x9e\x4d\x92\x2c\x75\x50\x33\xc3\xa1\x1d\x75\x5e\x39\xb4\x59\x4d\xf2\x58\xe1\xe6\xaa\x73\x89\x5a\xc5\xaf\x46\x65\xc1\xac\x1c\x13\x4a\x06\x85\x63\x57\x6a\x09\x49\xcd\x0b\x6b\x34\xca\x87\xf0\xe7\x59\xbb\x5a\x92\xca\x1c\x46\x59\xc2\xf5\x0f\x65\xdb\x55\x9a\x44\xae\x95\xce\x24\xe1\xe2\x26\x01\xf3\x1d\x4d\x5c\xb1\xa6\x63\x3f\x5e\x00\x9e\x4e\x31\xfd\xff\xf7\x9f\x7f\xff\xb7\x5c\xd6\xf6\x72\xf8\x8d\xff\x2f\x43\xdb\xfc\x9d\xa2\xf7\x53\x31\xd9\x77\xed\xc4\xe7\x66\x7a\x5b\x17\x3c\x3b\xce\xe3\x34\x6f\x91\x20\xe5\xe4\x04\x7d\x69\xe7\x79\xe6\xef\xb7\x9e\xef\xed\x3d\x6e\x3f\xf5\x9f\x3c\x7d\xde\xb2\x63\x3c\xc2\x02\x5b\xa0\x4a\x88\x60\x66\xbd\x50\x14\x37\x4c\xef\xcb\x7a\xed\x21\xb8\x18\x7c\x42\x97\x53\x45\xe4\xb6\x5c\x88\xe6\x4b\xad\x97\x60\x7b\xc1\xe2\xa5\xf5\x21\x3c\xc2\x08\x60\x4e\xec\xe2\xf6\x97\x6e\x28\x3d\x4f\x2a\x2f\x13\xb7\x71\xf5\x52\x29\x47\xe5\xae\xd3\xf6\xca\xc6\xd1\xc0\xbf\x71\xc8\x30\x38\xfc\x37\xf2\xad\x5e\x7b\xbf\x71\x4f\x02\xed\xfb\x12\x68\xdd\x97\xc0\xde\x3d\x09\xb4\x9e\xdf\x97\xc0\xb3\xfb\x12\x78\x7a\x5f\x02\x3f\xfe\x4e\x02\x16\x5f\xff\xce\xb3\xc5\xed\xb8\x77\x1f\x22\xfc\x1a\x87\x2f\xaf\xd0\x23\x6e\xd3\xe3\x47\x2a\xb0\x12\x2c\xee\x45\x70\xaa\xd4\x34\xe2\xdf\x83\x1e\x56\x6a\x4f\xc4\x53\x8f\xe9\x98\xb3\xb1\xf0\xae\x9e\xae\xc4\xa5\xe0\xb7\xaf\xa1\xa5\x37\x9c\xb5\x87\xd6\x5f\xfd\xe2\x9e\xb8\x5e\x73\xb5\x74\xf5\xc5\x0f\xdc\xab\x0f\x92\xc8\x73\xba\xcb\x11\x5b\x4d\x44\x80\x42\xe5\x77\x91\x6f\x3a\xa3\xfe\x6a\xe6\x5c\x5e\x90\x89\x98\xee\xa1\x69\xf6\x63\x09\xf6\x8f\x66\x80\xa2\x7a\x97\xa5\xdb\x9b\x9f\xf8\x22\x98\x61\xff\x4f\xe9\x85\x57\xc8\xe6\x65\xfe\x1b\xbc\x33\xb0\xf7\x73\x63\x21\x7d\xba\x34\x4f\xc5\xb4\xfa\xb1\xe0\xb1\x91\x5b\x28\x52\x44\x0f\xe3\x8c\x00\x5c\x33\x69\xb5\xbf\x37\x53\xf0\x86\xd0\x68\x7c\x99\xf5\x1f\xa1\x2f\xbd\x63\x21\x88\x34\xbc\x93\x24\x27\x72\x60\x32\x59\x38\xe1\x5b\xae\x9e\xab\xef\x18\xfb\x75\x6c\x83\x2a\xcc\xb0\x71\xae\x5d\x47\x27\xc9\x05\x8d\x75\xf6\xbd\xc5\x05\x11\x21\xcf\xc1\xb0\xa3\xa4\x38\xfb\x12\x6b\xdc\xb6\x9a\xa5\x13\x11\xd1\x70\x66\xcf\x17\x5c\x84\x7b\x89\x48\xc4\xf2\x01\xd1\x36\x90\x30\x1c\xcd\x31\xf0\x46\xd8\x77\x83\x82\x43\xe7\xb4\xfb\x7e\xf0\xa1\xbf\x1a\xd4\x89\xf8\xf2\xc7\xb2\x89\xb7\x6c\xb7\x5d\xfe\x6c\xdb\x9f\xab\xab\xe7\x4d\xcf\x25\xbe\x63\x96\x25\xe4\xc2\xca\x95\xf4\x12\x83\x84\x21\x41\x99\xb2\x50\xc5\xa5\x37\x4a\x41\xdd\x3d\x93\xff\x14\x09\x78\xff\x28\x3d\xc8\xb4\x9b\x22\x61\xc4\x75\xf9\xc9\xc4\x09\x6e\xd5\xf1\xfa\xa6\xba\xbb\xe6\xd4\x93\xcd\xcf\x39\x15\xf9\x2a\xd4\x2a\x2b\x44\xe5\x16\xb3\x5c\x2a\x4f\x43\xb3\xe9\xd3\x7f\x6b\xe2\x35\xf3\x53\xb4\xe8\x64\xab\x88\x61\x89\xb8\x2b\xbd\xc1\xc9\x68\x20\x03\xcd\xe9\x51\xf2\x0d\xbd\x60\x1d\x67\xf1\x98\xeb\x3b\x5e\xc5\x7e\xe3\x6e\x1d\x41\xbc\x81\x17\xdd\xb7\x6f\x32\x19\x46\xfc\x03\xe2\x24\x9a\xb2\xb6\x1f\xd2\x73\xb7\xe6\x57\x9e\x7b\xe4\xca\xcb\x5c\xa0\x32\x69\x1e\xd1\xdb\x5f\xcb\x1f\xc8\x89\x72\x6f\x60\x18\x89\xff\x0f\x00\x00\xff\xff\x4b\xce\xa4\x78\x34\x22\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 8756, mode: os.FileMode(420), modTime: time.Unix(1467061472, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

