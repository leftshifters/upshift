// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x5a\x7d\x72\xdb\xb8\x15\xff\x5b\x3a\x05\x56\xd6\xc4\x71\xd6\x14\x2d\x39\xd9\x7c\x3a\x1d\x45\x52\x12\x76\x6d\x49\x63\xc9\xe9\xec\x24\x19\x0f\x44\x42\x12\x6a\x12\x60\x41\xd0\xb2\x9a\x7a\x6f\xd0\x33\xf4\x1e\x3d\x55\x8f\xd0\xf7\x00\x52\x22\x65\x39\x71\xd6\xd9\x4e\x9b\x44\x04\xf0\xbe\x3f\x7e\x0f\xe8\x09\xbd\x60\x6f\x65\x18\x30\x95\x3c\xdc\x23\x5f\xaa\x95\xe8\x22\xe0\x8a\x38\x31\x69\xa4\x71\x32\xe7\x53\xed\x86\x72\x96\xb8\xdb\x16\x26\x29\x0f\x83\xd2\x4a\xac\xf8\x25\xd5\xac\x7a\x5d\xad\x9e\xc5\x33\x45\x03\x36\xf2\x15\x8f\xb5\x25\xed\xa7\x2a\x24\xce\x34\x19\x1d\x93\xb9\xd6\x71\xf2\xc2\x75\x15\x5d\x34\x66\x5c\xcf\xd3\x49\x9a\x30\xe5\x4b\xa1\x99\xd0\x0d\x5f\x46\x6e\xc8\xa6\xda\xb0\x01\xc9\xdc\x9c\x63\x44\x13\xf8\xed\x72\x91\x68\x1a\x86\x8d\x64\x4e\x5e\x93\x6c\xad\xa1\x59\x14\x93\x07\x0f\x88\x3f\x8f\x64\x40\x7e\xbe\xba\xb1\xd0\x70\x37\xbf\xa8\xa8\xb4\x09\xc5\x1e\x31\x9d\xc6\xef\x58\x64\x25\x7e\xd7\x3b\x39\xaa\x37\xab\x95\x8e\x77\x54\x6f\x55\x2b\xa7\x52\xea\x21\x4d\x92\x85\x54\xc1\x51\xfd\xb0\x5a\xad\xf0\x29\xf9\x48\x6a\xf5\x56\x8d\x1c\x1d\x91\x9a\x56\x29\xab\x91\xcf\x2f\x89\x9e\x33\x51\xad\x54\x76\x48\xc7\x23\x3c\x21\xf8\x7d\x9f\x2c\x18\x11\x72\x41\x04\x63\x01\x89\x33\x2a\xb0\x29\x23\x71\x58\x23\x3f\x01\x89\xe2\xf1\x0a\xf3\xe7\x92\x38\xcc\xae\xfe\x8b\x24\x69\x00\x3f\x47\x64\xc6\x22\x92\x99\x80\xa0\x74\xb0\xf1\x8a\x6b\x72\x00\xff\x62\x61\xc2\x56\x1f\x70\x69\xca\xab\xf9\xc7\x1d\x72\x06\x36\x26\xc9\x5c\xa6\x61\x40\xf4\x32\x66\x40\x05\x79\x15\xa5\xb9\x95\x47\xce\x02\x08\x82\x99\xde\x71\x3d\x4c\xc3\xd0\x5a\xe9\xb4\x77\x32\x18\xf7\x8c\xa1\xde\x9c\xb6\xfb\x9d\xf7\xc6\x58\xc7\x83\x77\x6f\xbd\xe3\x1e\xda\xa9\x52\x88\xb2\x6a\x05\xfc\x4d\xe2\xd4\xd0\x25\xf5\x16\x69\xbd\x7e\xd0\x04\xe5\x34\x63\x04\xb6\x5a\xda\xa3\x74\x02\x4e\x4c\x43\xe6\x09\x9e\x05\xcf\x8a\x5c\x73\x0b\xb9\x24\xdf\x0f\x32\xc3\xcf\x22\xc9\xe6\x26\xc9\xb3\x38\x80\x10\xfd\x2e\xa2\xa9\x39\x72\x93\xec\x50\x06\x9e\xb5\xd1\x37\xc8\xc5\x10\x91\xb9\x35\x4b\x54\x2a\x19\x99\x53\x16\xcb\xdb\x04\x3b\xb3\x21\xda\x91\x62\xca\x67\x96\x96\x82\xed\xb9\x54\x8e\x73\xc9\xd4\x44\x26\x6c\x0b\x65\x1b\xcd\x90\x87\x21\xfb\x9b\x25\x5c\xd6\xd2\xac\x90\x85\xa2\x71\xcc\x94\x39\xa0\xa9\xd2\x23\x1e\xa5\x21\xd5\x52\xd9\x23\xdd\xde\x07\xaf\xb3\x45\xa9\x2b\x5f\xa5\xc2\xa8\xa5\xd2\x08\xd2\x36\x21\xce\x02\x42\xb5\x59\x23\xcd\xd7\x6e\xc0\x2e\x5d\x91\x66\xea\x22\xe5\x8e\x8c\x62\x0e\x0e\x1d\x8c\x2c\xd5\xe1\xe9\xe0\xaf\xbd\xce\xf8\x7c\xfc\xdb\xd0\xd2\xce\x3f\x0c\xdb\x63\x1b\x40\xa3\xce\xfb\xde\x89\x8d\x9f\x5c\x84\xc7\xc6\x32\xd9\x96\x27\x1b\xf2\x24\x4c\x13\x47\x92\x98\xc7\x6c\x4a\x79\x88\x09\x7e\xe5\xcb\x80\x99\x32\x45\x1c\x23\x99\x49\x55\x27\xf1\xe7\x2c\xca\xd2\xca\x99\x73\xa8\x52\x73\x16\x86\xb6\x54\xf5\xc4\x25\x57\x52\xa0\x42\xb0\x31\xb8\x20\x3c\x9e\x4b\xc1\x92\xdc\x26\xc4\x09\x58\xa2\xb9\xa0\x9a\x4b\x41\x6a\x31\x7c\x9c\x4a\x15\x1d\x6d\x6c\xdb\x17\x34\x62\x20\x70\x0d\xf7\x43\x55\x64\x41\x97\x6a\x3a\xa4\x7a\xbe\x51\x3f\x33\x87\xd5\xea\x4f\x30\xc5\xaf\xfc\x58\x31\xad\x97\x68\xb1\xb6\xf2\xe7\x70\xf0\x8f\x59\x2c\x5f\xeb\xb7\x4f\xfe\x24\xbb\x7d\x43\x2d\x87\x5a\xf1\xcb\x6b\xf5\xc7\x8d\x2b\x3f\x5b\x21\xf9\xdf\xb7\x5a\xa0\x77\x15\x4b\xa5\x6f\x18\xc0\xea\xd4\x2c\xea\xd4\xfa\x3e\x9d\x98\x21\x9c\x19\x38\xff\x39\x88\xd1\xa5\xc9\x30\xe4\x89\x5e\xb5\x32\xd7\xae\x35\x62\xf3\xf5\x16\xa5\x9a\x05\xa5\x32\x62\xe5\x1d\xc5\xd4\x34\xa6\x2c\xeb\xf9\x96\x69\x7f\xde\x16\x58\x05\x28\x57\x43\x25\x2f\x79\x02\xa2\x70\x31\x83\x7f\x4f\x21\x6b\xb2\xde\xbc\x03\xd5\x1a\xda\x09\xb4\xca\x84\x24\x7c\x36\xc7\x2f\x81\x5c\x88\x50\xd2\x80\x60\x6d\xe1\x42\xcb\x95\xe8\x64\x6a\xac\x81\x9b\xa8\x08\x4c\x53\x21\x98\xb1\x58\xf1\xa7\xa9\xf0\x4d\x00\x0f\x65\x8c\x01\xcb\xb6\x31\xad\x56\xda\x9d\xce\xe0\xac\x3f\x3e\xef\x9d\xb4\xbd\x63\x63\x72\x64\x8b\xe5\x87\x62\xc7\x4f\xc9\xea\x53\x2e\xc6\x39\x8a\x91\x2d\xac\x71\x81\xbb\x42\x06\x95\xe8\x92\x3c\x6a\x44\x72\x02\x0c\xe2\x9c\xe7\x1a\x38\x54\xbe\x2a\x0f\x9a\x8a\x8b\x60\xcb\xda\xaa\x52\xf5\x8e\x07\xc3\xde\xe9\x79\x26\xb8\xed\x49\x67\xfd\xee\x71\xef\xdc\xeb\xf6\xfa\x63\xef\xad\xd7\x3b\x35\xe1\x62\xa4\x36\x82\x82\x57\xa1\x0f\xd9\x42\x7c\x3b\xf3\xdc\x03\xef\x20\xb2\xd0\x82\x67\x67\x5e\x97\x4c\x95\x8c\x0a\xc2\xef\xac\x70\xcd\x0c\xa2\x25\x03\x36\x06\xcd\x44\x57\xb1\x72\x9f\xb5\x0e\x9e\xb5\x9e\x3d\xa7\xbf\x1c\xfa\xf4\x31\x3b\xa4\x87\x4f\xe8\x63\x3c\x74\x2c\x65\x0c\x34\x95\x4c\x41\x24\xb4\x9f\x61\xb8\x4f\x00\x19\x2c\x65\x0a\xad\x58\x13\x4a\xce\xba\x5e\x77\x9f\xd0\xc0\x38\x32\x22\xe0\x67\x94\xc2\x44\xa5\x9c\x92\x78\xe5\xb2\x52\x1a\x18\x6c\xe1\x04\xa4\xb6\xf6\x80\x5b\x06\x28\x63\x20\xb2\x11\x30\x04\x5a\x7d\xa2\x13\x04\x0f\x32\x35\xd6\x36\xa4\x8f\xa6\xd4\xe2\x08\x28\x77\x39\xbf\x3e\x14\x39\x04\x11\x2b\xe2\x37\x5c\xfb\x12\x22\x03\x01\x49\x9a\x72\x80\x4c\x0f\xdd\x34\x51\x6e\xc8\x27\xec\x8a\xf9\xae\xc9\xb4\x37\x69\x10\x2c\x89\xe3\x93\xdd\xa1\x82\xf0\x35\x76\xdd\x25\xa6\x7f\x24\x3a\x00\xda\xaf\x5e\xbd\x22\xf5\x87\x09\x03\xf4\xc8\xf5\x92\xf8\x11\xf4\x99\x2e\x71\x38\x24\xd2\x97\x82\x18\xd7\x35\x48\xb2\x55\xdb\xd9\xdb\xab\x22\xd7\x1d\xe2\x4d\xd1\x76\xe8\x2b\xa3\xd5\xbe\x4d\x03\x5f\xc6\x4b\xc2\xb5\x31\x31\x74\xfa\x39\x4d\xc4\x2e\x18\x39\x54\x8c\x82\x30\x13\x66\xb7\x70\x86\x88\x28\x07\x68\x5f\x50\x85\xeb\x2d\x28\x2d\xb3\xf2\x94\xfc\xee\x1e\xf3\x89\xa2\x6a\xe9\x9e\x18\x23\x74\xd9\x25\xf7\x99\x5b\x8c\xa6\x4f\x24\x37\xa7\x9b\x11\xbc\x91\x0b\x45\xca\xa0\xc0\x08\x16\x85\x0e\x41\xdc\x99\x90\x8a\xd9\xcf\x31\x9a\x6a\xba\x69\x81\xcc\x71\x39\xaa\xcb\x84\xf9\x24\x6a\xe6\x50\x0e\x0d\x0d\x2c\x45\xfd\xf1\x1c\xc6\x91\x8d\xe4\xac\x56\xe0\x7f\xfc\x18\xb5\xb9\x61\xde\x1f\xa2\x5e\x59\xfe\x13\xf8\x2a\x66\x64\x43\x8d\x8f\xd9\xd9\xcf\x28\xdd\x86\x16\x88\x67\x2b\x9b\x91\x89\xf8\xba\x9a\x2f\x06\xd0\x86\xab\x6b\x5c\x5d\xda\x69\x60\x3a\xee\x2e\xa1\xec\x4d\xf0\x9c\x4b\xd7\x4d\x03\x80\xed\xbf\x41\x0a\x1a\xcc\x0e\xc2\x60\xfa\x25\x12\x62\x3e\x2e\x28\xbd\x4a\xbe\x62\x26\x64\xf2\x6e\xc3\xe1\x39\xf9\xf7\x6c\xb9\x6f\x12\xbc\x48\x1d\x7e\xab\xbb\x52\xcf\x89\x5b\x48\x0e\xfd\x43\x49\x1e\x74\x42\x46\xc5\x0a\x44\x66\xed\x71\x13\xba\x35\x5c\x0b\xfd\x16\xc4\xc7\xed\x37\x91\x6d\x46\xec\x4c\xf0\x0d\x7c\xfb\x4d\x82\x69\x7e\xa4\xbd\x89\x75\x0b\x74\x33\xd4\xdc\x85\x7e\x3c\xbb\x3b\x69\x5e\x38\x05\xb0\x17\x7e\xf8\x17\x5a\x51\x7f\x0b\x32\xcf\xf8\xb4\x93\x84\x45\x93\x90\xdd\x9d\x07\xcd\x4e\xdc\x8d\xfe\x31\x78\xf2\xee\xb4\x43\xac\x6f\xb7\x91\x32\xc8\xbb\x0d\x4d\xf9\x12\xaa\x5c\x86\x77\xda\x9d\x5f\xdb\xef\x32\xe4\xdd\xf6\xfa\xd0\xd5\xc6\xde\x07\x6f\xfc\xdb\x4d\xbc\x43\x83\x09\x0c\x76\x00\x62\x09\x8d\x48\x82\xa4\x88\x23\x80\x01\x62\x13\xdb\xdb\x72\x89\x29\x74\xfe\x79\xaf\x08\xf0\xcb\xa4\xaa\x15\xc5\x82\x8e\x0c\x21\x0e\x8f\x76\x3f\x1d\x1c\x1e\x7e\x3c\x78\x79\xd8\x8c\x76\x71\x5a\x80\xba\xb8\xb9\xd2\xc2\x95\x49\x98\xb2\xcd\x85\xc7\xb8\x20\x64\xf9\x33\x7c\xab\x56\x7a\x27\x67\xc7\xed\xf1\xe0\xf4\x16\x1c\xb7\x5a\x3e\xed\x8d\xce\x8e\xc7\x23\xe8\x1a\x42\xce\xd3\x18\x72\xb9\xdd\xef\x9e\x0e\xbc\xee\xf9\xfb\xc1\x49\xcf\xd5\x52\x86\x89\xcb\x32\x4d\x00\x90\xd2\xcb\xc0\x8e\x1f\xad\xd7\x30\x56\x36\xf1\x8f\x07\xd8\x06\xa0\xc9\x0d\xba\x03\xf2\x02\x7a\x1d\x80\x27\xf8\x2f\x25\x13\x3e\x23\x3b\xef\xc1\xbc\xfb\x44\x0a\xa8\xad\x4c\x29\xa9\x60\x41\x31\xc0\x36\x3a\x55\x82\x05\x79\x15\x9d\x72\x05\x2d\x56\x2f\x24\x81\x16\x24\x45\x00\x7d\xd9\x83\xd1\xd0\xbf\x30\xa0\xca\x83\xf6\x86\xad\xe3\x02\x27\x7b\x4a\x16\x74\x49\x64\xaa\x01\x5d\x84\x8c\xc5\x64\xbb\x36\xaf\xea\x2d\x2b\x56\x67\xce\x80\x0c\xd4\x29\xe0\x03\x9c\x17\x14\x45\x1b\xb6\xfb\x5e\x87\x7c\xc4\xfe\xce\x90\x31\xc8\xbc\x0f\xe3\xb2\xce\xe5\x59\xc0\x70\x32\x23\xb9\xda\x04\xc7\x8c\xcf\x18\x2a\x70\xea\x3c\xc3\x3c\x0f\xcd\xbd\x01\xd4\xef\x4d\xe6\xd7\x08\x3c\xc1\x8d\x60\x4b\x73\x00\x8c\xe6\x5b\x51\xbc\xb2\x10\x31\x15\xdc\xdf\x37\x98\x64\x81\x0d\x92\x5a\xcc\x83\x77\x34\xa6\x83\x2e\x49\xc4\x20\x51\x02\x98\x41\xf7\x89\x90\x1a\x56\x56\x77\x21\x5f\x0a\xb2\x00\x43\x67\x06\xc5\xb5\x50\x6e\xf3\xea\x87\xc0\x63\xa5\xc5\xc2\x18\xd1\xc0\xd8\x34\x6e\x90\x13\xba\x9c\x30\xc3\xb1\xfe\x65\x15\x8d\xd7\xf9\x6e\x6c\x12\xf5\x2f\x79\x68\x5d\x93\x0b\x10\x87\x9b\x06\xee\x4b\xa5\x98\xaf\x6d\x75\x5c\x97\x59\xc5\x76\x13\xb2\x98\x67\x4a\x84\x72\x46\x12\xba\x4c\x5e\x7c\x12\xe5\x8d\x5b\xec\x95\x6f\xb1\x95\xf6\x80\xec\xe0\x1f\x88\x7f\x86\x68\xa0\xc2\xcd\xca\x88\x31\xc0\x25\x21\xbf\x60\x99\x1d\x21\xcc\x84\xcc\xed\x18\x32\x0d\x12\xf8\xc6\xdd\x78\xda\x86\x1b\x1c\xec\x9d\x9e\x02\xb7\xef\x70\x9b\x39\x60\xdd\xb6\x06\x26\x05\x2a\x5b\x0c\x7e\x17\xfd\x32\x05\x9b\xa8\x60\xd3\x88\xd8\x43\x11\xb7\xf4\x44\xac\xea\x38\x5c\x4d\xe8\x04\xba\x57\xfd\x4b\xa1\x28\x5c\x9b\xba\x03\x2d\xab\xe8\x1c\x88\xe3\xcc\xad\xc6\xf8\xb9\x0f\x33\xb6\x3b\xa4\xdd\x7d\x43\x66\x30\x37\x25\x76\xb4\x91\x66\x06\xc3\x53\x0b\x0a\x12\xa1\x24\x78\x2c\x30\x50\x83\x68\x8e\x33\x0e\xfa\x19\xc2\xcf\xc4\x9e\xb5\xec\xdf\x53\xc8\x94\x80\xc5\x0c\x32\x12\x4e\x03\xb0\xb3\xc4\x75\x96\xf0\x00\xeb\xc2\xd0\xc6\x2c\x59\x00\x28\x87\x70\x85\x78\x60\x62\xed\x2b\x8a\x6d\x16\xca\x7e\x64\xd7\x8b\xa2\x12\x1c\x20\x93\x95\x22\x13\xe6\x53\xc8\x03\x04\xdd\x1c\x79\xc3\xdc\x43\xa0\x1f\xa1\x37\x4d\x15\x46\xb9\x1d\x90\xdb\xb1\x32\x67\x30\xb4\x0f\x79\xa4\xf3\x08\xcc\xb4\x41\xb6\x97\x40\x9b\x02\xdf\x7d\x9b\xdb\x12\x6b\x0d\x9a\xe1\xd2\x62\xb1\x72\x8d\x58\x8b\x04\x80\x15\x0a\x93\xe0\x50\xf2\x41\x22\xa9\xd1\xea\x06\xcc\x42\x2e\xee\x13\x2c\x3e\x41\x6c\x8c\xd7\xca\xab\x96\x1d\x01\xd5\xd2\xda\x84\xce\x28\x17\xfb\x2b\xfb\x20\xe6\x00\x72\x34\x84\x1d\x7c\x36\xb3\xbc\x73\x8f\x97\x43\xbb\x20\x3c\x96\xbc\x72\x00\xac\xd4\x29\x44\x80\xb9\xf7\xc4\xc2\x0a\x63\x0c\x8a\x09\x88\x43\x26\x39\x3c\x1a\x75\x4e\x7b\xbd\xfe\xf9\xf1\xa0\xdd\xf5\xfa\xef\x20\x05\xd6\x7d\x0c\xb6\x83\x4b\x62\x92\x2c\x93\xc6\x44\x4a\x7d\x0e\x4e\x8f\xc1\xdd\xcc\xdc\x98\xe0\x35\x0c\xd9\xfd\xa4\x76\x31\x0f\x2a\x8b\x39\x42\x59\xcc\x85\x32\x41\x0b\xd6\x9b\x06\xad\xdb\x31\x24\x2b\xcc\x8f\xab\x45\x14\x7a\x27\x1b\x4b\x6b\xe3\xc5\x7c\x69\x6e\x74\xe7\xf6\x0f\xd0\x27\x91\x60\x85\x75\x07\xbc\x0e\x68\x24\x8a\x19\x90\x84\x72\xf1\x97\x1c\xbe\xfe\x20\x85\x73\x8c\x8b\x09\x14\x82\xcb\xe6\xe0\x75\x06\x31\xb3\xb4\x22\x65\xce\xc1\x5d\x8d\x55\xd7\x33\x49\x92\x26\x16\x6a\xa6\x30\xac\x83\xce\x6b\x87\x36\xca\x49\x1e\x49\xd8\x5c\x76\x2e\x52\x2b\xf9\x55\xcb\xd4\x9f\x17\x63\x42\x0a\x3f\x77\xec\x5a\x2d\x2e\xb0\x79\x41\x8d\x06\xf9\x00\xfe\x3c\x6b\x95\x4b\x52\x91\xc3\x28\x8d\x99\xfa\xa9\x68\xbb\x52\x93\xc8\xb4\x52\xa9\x40\x5c\xdc\x40\x60\xbe\xab\x90\x2b\xd4\x74\xe8\xc7\x4b\x02\xa7\x13\x48\xff\xff\xfd\xe7\xdf\xff\x2d\x96\xb5\x83\x0c\x7e\xc3\xff\x8a\xd0\x36\x7b\x9f\xe8\xfe\x9a\x4f\xf6\x1d\x33\xf1\xd9\x99\xde\xd4\x05\xc7\x8c\xf3\x30\xcd\x1b\x24\x88\x39\x39\x05\x5f\x9a\x79\x9e\xba\x87\xcd\xe7\x07\x07\x8f\x5b\x4f\xdd\x27\x4f\x9f\x37\xcd\x18\x0f\xb0\xc0\x14\xa8\x02\x22\x98\x1b\x2f\xe4\xc5\x0d\xd2\xfb\xa2\x5a\x79\x48\x6c\x0c\x3e\xc1\x4b\xa9\x3c\x72\x9b\x36\x44\xb3\xa5\xe6\x4b\x62\x7a\xc1\xf2\xa5\xf1\x21\xd9\x83\x08\xa0\x56\xec\xfc\xd6\x17\x6f\x26\x1d\x47\x48\x27\xe5\x37\x71\xf5\x4a\x29\x4b\xe5\xb6\xd3\xe6\xaa\xc6\xd2\x80\xbf\x61\xc8\xd0\x30\xfc\xd7\xb2\xad\x4e\xeb\xb0\x76\x4f\x02\xad\xfb\x12\x68\xde\x97\xc0\xc1\x3d\x09\x34\x9f\xdf\x97\xc0\xb3\xfb\x12\x78\x7a\x5f\x02\xbf\xfc\x41\x02\x06\x5f\xff\xc1\xb3\xf9\xad\xb8\x73\x1f\x22\xec\x0a\x86\x2f\x27\xd7\x23\x6a\xe1\xa3\x47\xc2\xa1\x12\x2c\xef\x45\x70\x26\xe5\x2c\x64\x3f\x82\x1e\x54\x6a\x87\x47\x33\x87\xaa\x88\xd1\x09\x77\x2e\x9f\xae\xc5\xc5\xe0\x37\xaf\xa0\x85\xb7\x9b\x8d\x07\xd6\xdf\xdd\xfc\x7e\xb8\x5a\xb1\xb5\x74\xfd\xc5\xf5\xed\x6b\x0f\x90\xc8\x72\xba\xc3\x00\x5b\x4d\xb9\x0f\x42\x65\x77\x91\x6f\xda\xa3\xde\x7a\xe6\x5c\x5d\x90\xf1\x08\xef\x9f\x71\xf6\xa3\x31\xf4\x8f\x86\x0f\xa2\x3a\x17\x85\xdb\x9b\x5f\xd9\xd2\x9f\x43\xff\x4f\xf0\x65\x97\x8b\xc6\x45\xf6\x9b\x38\x63\x62\xee\xe7\x26\x5c\xb8\x78\x59\x9e\xf0\x59\xf9\x63\xce\x63\x2b\xb7\x80\x27\x80\x1e\x26\x29\x02\xb8\x46\xdc\x6c\xfd\x68\xa6\xc4\x19\x92\x5a\xed\xdb\xac\xff\x0c\x7d\xf1\xfd\x0a\x40\xa4\x66\xed\x38\x1e\x08\x4f\xa7\x22\x77\xc2\xf7\x5c\x39\x97\xdf\x2f\x0e\xab\xd0\x06\x65\x90\x42\xe3\x2c\x5c\x43\x63\xb0\xc5\xf1\x39\x8e\x75\xe6\x9d\xc5\x06\x11\x22\x4f\x6f\xd8\x96\x82\x8f\xbf\xc5\x1a\xb6\xad\x67\xe9\x98\x87\x38\x9c\x99\xf3\x40\x19\xe7\x37\x43\x19\xb9\x39\x3c\xa6\xd9\xbb\x8e\x93\x5c\xf0\xf8\x1c\x91\x2b\x34\xd6\x73\x48\xdc\x73\xf3\x4e\x72\x0e\xf2\xf9\x80\x99\x11\x52\x98\x4b\xb3\xf5\x53\xa3\xe9\x39\x41\x30\x5a\x40\xac\x8e\xa0\x55\xfb\xb9\x50\xed\xd3\xce\x7b\xef\x43\x6f\x3d\xdb\xa3\x3c\xab\x1f\xeb\xfb\xe8\x6d\x6f\x27\xae\x25\x97\xc6\xe8\xd7\xd2\x3d\xf5\x0a\x98\x04\x01\x0a\x53\x64\x9b\xdf\x84\x03\x1f\x83\x78\xeb\x4d\xdb\xfb\x53\xf1\x4f\x1e\x13\xe7\x1f\x85\x67\x9a\x56\x03\x55\x06\xf6\xab\x4f\x3a\x8a\x61\xab\x8a\x36\x37\xc1\xc7\x2c\x4d\x55\x69\x73\x59\x42\xfb\xe4\x27\x11\xfa\xe3\x95\xa9\x9a\x6e\x7f\x12\xda\x7e\xc8\x7d\xd4\x08\x96\x21\x9f\xdc\x81\x7e\xbe\x15\xf9\xdc\x10\xde\x68\x09\x52\x36\x72\xfd\x1a\xd9\xb6\x86\xdb\x68\x58\xe5\x4a\x92\x99\x53\xf6\xc6\xd0\x1b\x8c\x3c\xe1\x2b\x86\x6f\x9d\x6f\xd0\xe1\xfd\x34\x9a\x30\xb5\xfd\xb1\xad\x5a\x01\xdc\x13\x71\x28\x65\xa9\xd0\x00\x5c\xf1\x85\x5c\xb1\x4b\xc7\xbe\x8b\x65\x15\xd2\xc7\xc5\x3d\xf3\xff\xf4\x50\x65\xa2\x5f\xbf\xfb\xaf\xd9\xbb\xff\xce\xdb\x37\xa9\x08\x42\xf6\x01\x80\x1c\xa4\x72\x0d\x73\xdb\x13\x53\x69\x5f\xdf\xf0\xa6\x42\xb0\x45\x91\x28\xd6\x83\x6c\x0a\x2e\x48\x67\x67\x60\xf8\x74\x43\x8a\x62\x4c\x6d\x90\x2a\x12\x58\x0d\xf6\x9b\x7b\x1e\x3e\xdc\x42\xf4\xe7\xe6\xde\x9e\x45\x97\x95\xaf\xa9\x38\x82\xa9\xf9\xc5\x86\x86\xa4\x5e\xe6\x80\x0f\xad\x45\x95\x6b\xe6\x72\x06\xa2\x9e\x78\xe3\x11\xd4\x9e\xb3\x84\x25\x7d\x29\x7a\x57\x2c\xc2\x97\x6a\x5f\x2d\xed\xbc\x8c\xa3\x0a\xbe\xce\x64\xef\x19\xf6\x36\x04\xc6\xf4\x6a\x85\x8a\x64\xc1\xd4\x58\xae\x37\xdf\xc9\x13\x5f\x65\x77\x43\xca\x3d\xeb\x85\x8f\xa4\x7e\x93\x1d\xde\xb8\x3f\xaa\x75\x11\x04\xf7\xa1\x16\xf5\xf0\x89\xa2\xf6\x88\x7c\x5e\x3b\xe2\x6b\xd2\xa0\xea\x2f\xbe\xae\x3b\xcc\x4a\xa1\xd5\xfe\xa6\xf5\x4c\xa0\xff\x3f\x00\x00\xff\xff\x91\xa7\xa5\x85\xe3\x24\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 9443, mode: os.FileMode(420), modTime: time.Unix(1467117399, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

