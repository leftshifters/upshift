// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\xff\x72\xda\xca\xf5\xff\x1b\x9e\xe2\x5c\xcc\xc4\xf7\x7e\xbf\x80\x0c\x76\x3a\x69\x12\xa7\x43\x80\xeb\xd0\xda\x86\x31\xf8\x76\x32\xc9\x1d\xdf\x45\x5a\xd0\xd6\x92\x56\xb3\xbb\x32\x66\x5c\xf7\x0d\xfa\x0c\x7d\x8f\x3e\x55\x1f\xa1\xe7\xec\x4a\x58\xc2\xf6\xc4\xe9\xb4\x33\x09\x46\xda\xdd\xf3\xe3\x73\x7e\x7d\x96\x33\x76\xcd\x7f\x96\x51\xc0\x95\xfe\xf1\x27\xb8\xab\xd7\xe2\xeb\x40\x28\x68\xa7\xd0\xc9\x52\x1d\x8a\xa5\xf1\x22\xb9\xd2\xde\x53\x0b\x8b\x4c\x44\x81\x57\xbf\xaf\xd7\x2f\xd3\x95\x62\x01\x9f\xf9\x4a\xa4\xc6\xc9\xf1\x33\x15\x41\x7b\xa9\x67\xa7\x10\x1a\x93\xea\xb7\x9e\xa7\xd8\xba\xb3\x12\x26\xcc\x16\x99\xe6\xca\x97\x89\xe1\x89\xe9\xf8\x32\xf6\x22\xbe\x34\x56\x26\x9a\xe1\x15\xe2\x63\xa6\xf1\xb9\x78\x84\x0f\x90\x7f\xeb\x18\x1e\xa7\xf0\xea\x15\xf8\x61\x2c\x03\xf8\xff\xdb\x47\x0b\x1d\xaf\xf2\x46\x24\xda\xb0\x28\xa2\x15\x15\x57\x36\x93\xed\x33\x6e\xb2\xf4\x84\xc7\xce\xec\x93\xd1\xd9\x71\xb3\x5b\xaf\x0d\xc6\xc7\xcd\x5e\xbd\x76\x21\xa5\x99\x32\xad\xd7\x52\x05\xc7\xcd\xc3\x7a\xbd\x26\x96\xf0\x05\x1a\xcd\x5e\x03\x8e\x8f\xa1\x61\x54\xc6\x1b\xf0\xeb\x3b\x30\x21\x4f\xea\xb5\xda\x1e\x0c\xc6\x20\x34\xd0\xfb\x16\xac\x39\x24\x72\x0d\x09\xe7\x01\xa4\xb9\x14\xdc\x94\x8b\x38\x6c\xc0\x0f\x28\xa2\x7c\xbc\xc6\xfd\x50\x42\x9b\xbb\xd5\xbf\x82\xce\x02\x7c\x9c\xc1\x8a\xc7\x5b\x2f\xc8\x3a\xdc\x78\x2b\x0c\x1c\xe0\x37\x1e\x69\xbe\x7d\x41\x4b\x4b\x51\x2f\x5e\xee\xc1\x25\x02\x0d\x3a\x94\x59\x14\x80\xd9\xa4\x1c\xa5\x90\xae\xb2\x35\xcf\xea\x28\x54\xa0\x40\x84\xe9\x44\x98\x69\x16\x45\x0e\xa5\x8b\xd1\xd9\x64\x3e\xb2\x40\x7d\xbc\xe8\x9f\x0f\x3e\x59\xb0\x4e\x27\x27\x3f\x8f\x4f\x47\x84\x53\xad\x94\x57\xf5\x1a\x06\x1d\xd2\xcc\xca\x85\x66\x0f\x7a\x1f\x5e\x75\xd1\x39\xc3\x39\xe0\x56\x27\x7b\x96\x2d\x30\x98\x59\xc4\xc7\x89\xc8\x33\x68\x2b\xae\xfb\x84\x38\x5d\xec\x47\x9b\xf1\xb1\x2c\xb2\xbb\x2b\xf2\x32\x0d\x98\xe1\xdf\x25\x34\xb3\x47\x1e\x8b\x9d\xca\x60\xec\x30\xfa\x86\xb8\x14\x33\xb3\x40\xb3\x22\xa5\xf6\x90\x73\x58\x32\x11\xff\xb3\x13\x54\xb5\xc5\xae\xc0\x5a\xb1\x34\xe5\xca\x1e\x30\x4c\x99\x99\x88\xb3\x88\x19\xa9\xdc\x91\xe1\xe8\x97\xf1\xe0\x09\xd5\xb7\xbe\xca\x12\xab\x5c\x65\x31\x56\x98\x86\xf6\x1a\x13\xaa\xdb\x80\xee\x07\x2f\xe0\x37\x5e\x92\xe5\x46\x91\xe4\x81\x8c\x53\x81\xb0\x4f\x66\x4e\xea\xf4\x62\xf2\xc7\xd1\x60\x7e\x35\xff\x3c\x75\xb2\x8b\x17\xd3\xfe\xdc\x85\x79\x36\xf8\x34\x3a\x73\x51\x2e\x4c\x38\xb2\x48\xe4\x5b\x5e\xef\xd8\xa3\xb9\x81\xb6\x84\x54\xa4\x7c\xc9\x84\x2d\xc3\x5b\x5f\x06\xdc\xb6\x0f\x68\x5b\xcb\x6c\x41\xb5\xb5\x1f\xf2\x38\x4f\xfe\x76\x28\xb0\xa1\x84\x3c\x8a\x5c\x57\x19\x25\x37\x42\xc9\x84\x1c\xc2\x8d\xc1\x35\x88\x34\x94\x09\xd7\x05\x26\xd0\x0e\xb8\x36\x22\x61\x46\xc8\x04\x1a\x29\xbe\x5c\x4a\x15\x1f\xef\x6c\x6b\x25\x2c\xe6\x68\x70\x83\xf6\x2b\x71\xc3\x83\x21\x33\x6c\xca\x4c\xb8\xd3\xd7\xf2\x80\x35\x9a\xaf\xa9\x10\x6f\xfd\x54\x71\x63\x36\x84\x58\x5f\xf9\x21\x1e\xfc\xcf\x10\x2b\xd6\xce\xfb\x67\xff\x23\xdc\xbe\xe1\x56\x9b\x39\xf3\xab\x6b\xcd\xa3\xce\xad\x9f\xaf\x40\xf1\xf7\x59\x04\x46\xb7\xa9\x54\xe6\x11\x00\xce\xa7\x6e\xd9\xa7\xde\xf7\xf9\xc4\xad\xe0\x1c\xe0\xe2\x71\x92\x52\x48\xf5\x34\x12\xda\x40\x27\x45\xef\xb0\x34\x3d\xb7\xd6\x49\xed\xdb\x67\x9c\xea\x96\x9c\xca\x85\x3d\xda\x21\x52\x56\x2e\x50\x0b\x68\xd5\xdb\xa9\x4c\x29\x77\xf8\x54\xc9\x1b\xa1\xd1\x14\x91\xac\xf0\xfb\x12\xab\x26\x9f\x99\x7b\x70\x82\x7e\x51\x5f\xbd\xbc\x1c\x0f\x61\xa9\x64\xbc\x35\x94\x56\x8b\x01\xb8\x42\x5b\xf3\x09\x68\xc7\x5e\x7c\x9b\x2a\xef\x4d\xef\xe0\x4d\xef\xcd\xef\xd9\xef\x0e\x7d\x76\xc4\x0f\xd9\xe1\x6b\x76\x44\x87\x4e\xa5\x4c\x51\xa6\x92\xd9\x2a\x04\x6a\x23\x56\x61\x0b\x70\x7a\x6c\x64\x86\xed\xda\x00\x83\xcb\xe1\x78\xd8\x02\x16\x04\xa4\x3d\x06\x23\xad\x15\x16\x13\xb9\x84\x34\xb7\x72\x27\x08\x76\xfe\xb4\x03\x68\x74\xbc\x2d\x9c\xd5\x21\x36\x47\x21\xc5\x12\x2c\xed\x39\xc0\x71\xa0\x8d\xa6\x01\x23\xb3\x24\x28\x00\x38\x5e\x32\x37\x6b\xb0\xd8\x0a\x7d\xe7\x58\x62\x34\x68\xb6\xc2\xff\xaf\x13\xcb\x05\x2e\xa4\x05\x82\xef\x20\x90\x34\xb4\xb2\x4c\xe0\x58\xfd\xd1\xcb\xb4\xf2\x22\xb1\xe0\xb7\xdc\xf7\x6c\x9c\x3f\x66\x41\xb0\x81\xb6\x0f\xfb\x53\x25\xb0\xe2\x09\xd7\x7d\xb0\xdd\x4b\x9b\x00\x65\xbf\x7f\xff\x1e\x9a\x3f\x6a\x8e\x34\x43\x98\x0d\xf8\x31\x76\xb9\x21\xb4\x05\x06\xf0\xae\x64\xc6\x7d\x03\x83\xbb\x6d\x7a\x3f\xfd\x54\x27\xad\x7b\x30\x5e\x12\x76\x14\x2b\xeb\x55\xcb\x7a\x0e\xbe\x4c\x37\x20\x8c\x85\x18\xa7\x41\xc8\x74\xb2\x8f\x20\x47\x8a\x33\x34\x66\xc1\xdd\x16\xc1\x69\x6a\x16\x43\xfc\x8e\x5c\xb8\x7f\x62\x92\x13\x15\x20\x79\x64\x09\xc5\xc5\x65\x86\x85\xd2\x2e\xff\xe6\xa7\x48\x8f\xa0\x6a\x2d\xfc\xcd\x3b\x15\x0b\xc5\xd4\xc6\x3b\xb3\x88\x0d\xf9\x8d\xf0\xb9\x57\x4e\xbd\xaf\x50\x60\xef\xe5\xda\x77\xd1\xfd\xcd\x2a\x48\x09\xb8\x25\x34\xe6\x8a\x25\x9a\x52\x1f\xcf\x3a\x6b\x9e\x39\x56\xcd\x5b\xb2\x39\xb7\xe5\x6b\xd2\xb0\x12\xab\x81\x27\x8a\x43\xaf\x89\x6f\xd4\x02\xec\xb1\xf5\x07\x6a\x53\xd9\x69\x99\x12\xed\xae\x10\x9d\x5d\xfe\x52\x98\x3b\xcc\x02\x64\x4e\x9f\x31\xc3\x2d\x6d\x42\x2b\x28\xbb\xb5\xc4\x94\x4a\x4b\x28\x6c\x73\xbb\x9c\x68\xb9\xa1\x4f\x51\xa1\x42\xfc\x27\xbe\x69\xd9\xfa\x29\x4b\xc7\x67\xf5\x52\xe9\x85\x70\xc7\x8a\xfa\x49\xa0\xa4\x08\x06\x11\x67\xc9\x96\x11\xe4\xbd\x6f\x77\x2e\x77\x3c\x37\xd7\xd7\xe0\xd3\xf6\xc7\xe4\x22\x17\x76\x99\x88\x1d\x8a\xf1\x4d\x81\x59\x71\xa4\xbf\x4b\x37\x4a\x72\x73\xe2\x32\xc4\x66\xbb\x7a\xb9\x68\x51\x3a\x05\xed\x36\x3e\xf8\xd7\x46\x31\xff\x09\x72\x94\xeb\xe9\x6b\xcd\xe3\x45\xc4\x5f\xae\x83\xe5\x27\x5e\x26\xff\x14\x23\xf9\x72\xd9\x11\xb5\x8f\xe7\x44\x59\x5a\xd5\xf7\x8d\xb8\xc1\x26\x92\x0f\xb3\xfe\xe0\x4f\xfd\x93\x9c\x56\xf5\xc7\xe7\x57\xfd\xc1\x7c\xfc\xcb\x78\xfe\xf9\xf1\x30\x63\xc1\x02\xb9\x35\x32\x14\x60\x31\x68\x12\x05\xed\x04\x15\xd0\x58\xc1\xcd\x25\x8b\x59\x96\xf8\xe1\xa8\xcc\xde\xaa\xa2\xea\x35\xc5\x83\x81\x8c\x30\x0f\x8f\xf7\xbf\x1e\x1c\x1e\x7e\x39\x78\x77\xd8\x8d\xf7\x89\x0a\x62\xdb\xd9\x5d\xe9\xd1\xca\x22\xca\xf8\xee\xc2\x11\x2d\x24\xb2\xfa\x1a\xdf\xd5\x6b\xa3\xb3\xcb\xd3\xfe\x7c\x72\xf1\xcc\x90\xde\x2e\x5f\x8c\x66\x97\xa7\xf3\x19\x36\xe5\x44\x86\x59\x8a\xb5\xdc\x3f\x1f\x5e\x4c\xc6\xc3\xab\x4f\x93\xb3\x91\x67\xa4\x8c\xb4\xc7\x73\x4f\x90\x6d\xb0\x9b\xc0\x71\xcb\xde\x07\x64\xf6\x5d\xfa\x78\x45\x5d\x16\x67\xc8\x64\x38\x81\xb7\x38\x4a\xf0\x3a\x84\xff\x18\x2c\xc4\x0a\xf6\x3e\x21\xbc\x2d\x90\x49\xb4\x01\xae\x94\x54\xb8\xa0\x38\xe0\xac\xcd\x54\xc2\x83\xe2\x7a\xb2\x14\x0a\x27\x98\x59\x4b\xc0\x0e\x2f\x93\x00\xc7\xde\x18\xd9\xb9\x7f\x0d\x2c\x09\xf0\x2b\xb6\x1b\xec\xcc\xd7\x74\xb9\x62\xb0\x66\x1b\x90\x99\x41\x72\x11\x71\x9e\xc2\xd3\xde\xbc\x6f\xf6\x9c\x59\x83\x90\xa3\x18\xec\x53\xa8\x07\x35\xaf\x19\x99\x36\xed\x9f\x8f\x07\xf0\x85\xc6\x27\x27\xc5\x68\x73\x0b\x6f\x2c\xa6\xb0\x67\x8d\xcc\x73\x05\x85\xdb\x40\x1c\xf2\x57\x4a\x15\x3c\x75\x35\x98\x5c\x9e\xcf\x51\x83\xbd\xba\xe1\x40\xd8\x55\x7e\x4f\x7c\x02\xc3\x88\x58\xda\x03\x08\x9a\xef\x4c\x19\x57\x8d\x48\x59\x22\xfc\x96\x1d\xf9\x6b\x9a\x3f\xcc\x51\x0a\xba\x2b\xdb\x01\xb5\x81\x98\x63\xa1\x04\x78\x39\x69\xe1\xbd\xd2\xe0\xca\xf6\x3a\x7a\x57\xb2\x05\x15\xb6\x57\xd8\x5c\x4b\xed\x76\x3b\x0b\x50\xde\xd6\x8b\xb5\x05\x31\x92\x8c\x24\x76\xe0\x8c\x6d\x16\xdc\x6a\x6c\xde\x6d\xb3\xf1\xbe\xd8\x4d\xe3\xa9\x79\x57\xa4\xd6\x3d\x5c\xa3\x39\xc2\xce\x47\x5f\x2a\xc5\x7d\xe3\xba\xe3\x43\x9b\x55\x7c\x5f\xc3\x3a\xcc\x9d\x88\xe4\x0a\x34\xdb\xe8\xb7\x5f\x93\xea\xc6\x27\xf0\x2a\xb6\xb8\x4e\x7b\x00\x7b\xf4\x41\xf4\x62\x4a\x00\x95\x2e\xb7\x33\xce\x71\xec\x47\xe2\x9a\xe7\x38\x62\x9a\x25\xb2\xc0\x31\xe2\x06\x2d\xf0\x6d\xb8\xe9\xb4\x4b\x37\x3c\x38\xba\xb8\x40\x6d\xdf\x11\x36\x7b\xc0\x85\xed\x61\xee\x97\xa4\x3c\x01\xf8\x4b\xfc\xcb\x1d\xec\x92\x83\x5d\x6b\xe2\x88\x4c\x7c\x62\x26\x52\x57\x27\xe6\xbc\x60\x0b\x9c\x5e\xcd\xbb\x52\x53\xb8\xb7\x7d\x07\x47\x56\x39\x38\x98\xc7\x79\x58\x2d\xf8\x45\x0c\x73\xb5\x7b\xd0\x1f\x7e\x84\x15\x92\x62\x6d\x33\x1d\xa4\x25\xd8\x74\x6a\xcd\xd0\x22\xb2\x84\x8e\x05\x96\x7b\x80\x11\xa8\x5d\x50\x9c\x31\xfd\x6c\xee\x39\x64\xff\x92\x61\xa5\x04\x3c\xe5\x58\x91\x78\x1a\x79\x93\x13\x6e\xf2\x82\x47\xd6\x14\x45\x2e\x67\x61\x8d\x9c\x17\xd3\x15\xf3\x81\x27\x0f\xb1\x62\x34\x66\xb1\xed\xc7\x6e\xbd\x6c\x2a\xd0\xed\x40\x6f\x1d\x59\x70\x9f\x61\x1d\x10\xa7\x15\xa4\x5b\xae\x13\xc0\x79\x44\xd1\xb4\x5d\x98\xec\x6e\xa3\xdd\x6d\x67\x73\xce\xf2\xce\xb1\x8e\x4c\x91\x81\xb9\x37\xa4\xf6\x06\x65\x33\xd4\xdb\x72\xb5\x2d\xa9\xd7\x10\x0c\x37\x8e\x9a\x55\x7b\xc4\x83\x49\xc8\x07\xb1\x31\x25\x02\x5b\x3e\x5a\x24\x0d\xa1\x6e\xb9\x22\xd6\x62\x0b\xa8\xf9\x04\xa9\x05\xaf\x57\x74\x2d\xdb\xad\x8c\xda\x38\x4c\xd8\x8a\x89\xa4\xb5\xc5\x87\x38\x07\x8a\x63\x11\xee\x10\xab\x95\xd3\x5d\x44\xbc\x9a\xda\x25\xe3\xa9\xe5\x55\x13\x60\xeb\x4e\x29\x03\xec\x4f\x4f\xd4\x58\xf1\x96\x60\x79\x9f\x1f\x49\x5d\xd0\xa3\xd9\xe0\x62\x34\x3a\xbf\x3a\x9d\xf4\x87\xe3\xf3\x13\x2c\x81\x87\x39\x86\xdb\x31\x24\x29\xe8\x8d\xee\x2c\xa4\x34\x57\x18\xf4\x14\xc3\xcd\xed\x75\x98\xee\xd8\xb0\xff\x55\xed\x53\x1d\xd4\xd6\x21\x71\x49\xaa\x85\xaa\x40\xc7\x85\xbb\x96\x0c\x3b\x96\x9f\x37\xe6\xa3\x0a\x2d\x7d\x11\xc6\xd2\x61\xbc\x0e\x37\xf6\x47\xb5\xd0\x7d\xa0\x3f\x5a\x22\x0a\x0f\x13\xf0\x3e\x60\x71\x52\xae\x00\x1d\xc9\xf5\x1f\x0a\xde\xfa\x5f\x72\xb8\xe0\xb8\x54\x40\x11\x86\x2c\xc4\xa8\x73\xcc\x99\x8d\x33\x29\x0f\x0e\xed\xea\x6c\xa7\x9e\x2d\x92\x4c\x3b\xaa\x99\x25\x91\x44\x9f\x1f\x02\xda\xa9\x16\x79\x2c\x71\x73\x35\xb8\x24\xad\x12\x57\x23\x33\x3f\x2c\xe7\x84\x4c\xfc\x22\xb0\x0f\x6e\x89\x84\x86\x17\xf6\x68\xb4\x0f\xe9\xcf\x9b\x5e\xb5\x25\x95\x35\xcc\xb2\x94\xab\x1f\xca\xd8\x55\x86\x44\xee\x95\xca\x12\xe2\xc5\x1d\x22\xe6\xfb\x8a\xb4\x62\x4f\xc7\x79\xbc\x01\x3c\xad\xb1\xfc\xff\xf5\x8f\xbf\xff\xb3\xdc\xd6\x0e\x72\xfa\x8d\xff\xeb\xf7\xff\x0e\x00\x00\xff\xff\x28\xe9\x68\xb2\x65\x16\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 5733, mode: os.FileMode(420), modTime: time.Unix(1465505539, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

