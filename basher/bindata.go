// Code generated by go-bindata.
// sources:
// scripts.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x5a\xff\x72\xda\xc8\x93\xff\x1b\x9e\xa2\x17\x53\x6b\x7b\xbf\x16\x18\xec\xec\x66\x93\xf5\x5e\x61\x50\x6c\xdd\x17\x03\x05\x38\xa9\xad\x24\x45\x0d\xd2\x00\x3a\x0b\x8d\x6e\x24\x19\x73\xf9\xfa\xde\xe0\x9e\xe1\xde\xe3\x9e\xea\x1e\xe1\xba\x67\x46\x20\xd9\xd8\xc9\xc5\xb9\x3f\x6e\x6b\x8b\x80\x66\xa6\x7f\xf7\xa7\xbb\x47\x1e\xf3\x38\x19\xb9\xd2\x8f\x92\x83\x43\xf8\x52\x2e\x71\x77\x21\xa0\xda\x28\x97\xe2\x80\xf3\x08\xf0\x4b\x10\x83\x15\xb0\xf2\x7d\xb9\xbc\xdd\xdb\xd4\x9b\xaf\xec\xd1\xa8\x75\x61\x9f\xd1\xfe\x6e\xff\xe2\x9d\xd3\xb5\x47\x67\xd5\xe6\x23\x2a\xcd\x8c\x0a\x34\xff\xfc\xb9\x01\xff\x80\x84\x73\xc0\x7d\x48\xf3\x42\x32\x2f\xe0\x4e\x18\x27\x2c\x08\x34\x55\xa7\x37\x1a\xb7\xba\xdd\xc9\xf5\xb0\x7b\x56\x59\x24\x49\x14\xbf\xa9\xd7\x63\x2e\x6f\x7d\x97\xc7\xb5\xb9\x3a\x50\x13\x72\x5e\xf7\xfc\x38\x91\xfe\x34\x4d\x7c\x11\xc6\x75\xbd\x60\x35\x6b\x8d\x53\x6b\xea\x87\xb5\x7f\xf3\xa3\x4a\xb9\xe4\xcf\xe0\x23\x58\x33\xa8\xec\x5a\x86\xcf\x6f\x21\x59\xf0\xb0\x5c\x2a\xb9\xa9\x0c\xc0\xb2\xe2\x85\x58\x59\x5c\x4a\x21\xf1\x47\x24\xc5\x5c\xf2\x38\xb6\xa6\x8c\x7e\xce\x98\x4f\x5b\x02\xe1\x32\xe2\x08\x95\xea\x97\x9c\xa8\xf7\x15\xf8\x13\x76\x30\x29\x97\x66\x7e\xb9\x94\x86\xf8\x75\xf7\x72\xc7\x19\x9e\x55\xaa\x07\xe0\x7a\x40\xff\x78\xbe\x0c\xd9\x92\x13\xf5\xf3\xd6\xe8\x72\x32\xea\x5f\x0f\xdb\xf6\xc7\xe3\xcf\xc8\xe0\xb0\x02\x3f\xff\x0c\xd1\xca\xc3\x6f\x68\xe4\xbb\x48\xc8\x04\x2e\x86\xad\x4e\xd7\x9e\x5c\xf6\xaf\x6c\xa4\xf3\x05\xc9\xdd\xe7\x6d\xb1\xdd\x38\x68\x8d\x2f\xcf\xaa\xf4\xf9\xa6\x9a\x3b\x54\x47\x49\xb6\x9e\xf8\x20\x59\x14\x71\xa9\x3d\xa1\xc9\xc0\x4a\x3f\xdb\x6e\x5a\x8d\x59\x7c\xa3\xb7\x0c\x5a\xc3\xd6\xd5\x28\x8b\x80\x89\xe6\x81\xfe\xae\x19\x19\x56\xa8\x48\xa3\xf2\xd8\xef\x23\x9e\xa4\xd1\x05\x5f\x6a\x2a\x17\xf6\x95\x22\xd1\x76\xd4\xe1\xa1\x10\xc9\x80\xc5\xf1\x4a\x48\xef\xac\x7a\x52\x36\x6e\xac\x54\x9b\x15\x38\x3b\x83\x4a\x22\x53\x9e\x77\xde\x1e\xb4\x1d\xf0\x63\xa0\xe7\x47\xb0\xe2\x10\x8a\x15\x84\x9c\x7b\x10\x19\x2a\xb8\xc9\x90\x38\xa9\xc0\x4f\x48\x22\x7f\x5c\x87\xab\xc5\xf5\xea\x3f\x20\x4e\x3d\xfc\x79\x03\xd6\x08\xe6\x7c\x09\xbe\x0e\x4e\x15\xcf\xb8\xf7\xce\x4f\xe0\x18\xbf\xf1\x20\xe6\x9b\x07\xb4\x44\x7e\x36\x0f\xf7\xe0\x1a\x03\x16\x30\x9a\xd2\xc0\x83\x64\x1d\x71\xa4\x42\xec\xf2\x02\x65\x6c\x1e\xf1\xc8\x58\x20\x41\xb4\xd4\x75\x68\x16\xff\x7f\x58\x2b\xcd\xc4\x05\x8b\x39\x77\xff\xa7\x46\xdb\xc5\xaa\x68\xbb\x81\xf0\x0a\xd0\x62\x40\x4a\x59\x2f\x12\xde\xc6\xec\xf9\xf0\x6c\x98\x83\x43\x1e\x89\xeb\xc8\x63\x09\xdf\x7d\x56\xe2\x3a\xa4\x6a\x03\xa2\xc2\x2d\x97\x53\x11\xf3\xc7\x94\x2e\xfc\x64\x94\x4e\x97\xc2\x4b\x09\xe6\xfc\xe4\x31\xb1\x39\x4a\x1c\x67\x5b\x50\x24\xfc\xf9\x2c\x95\xa7\x84\x2a\xd2\x31\x92\xed\xa2\x34\x48\x33\x7b\x0c\xed\xab\xfe\x58\x9f\x3e\x1f\xb6\x7a\x6d\x9d\xbb\x1b\xa2\x27\x9a\x68\x94\xaa\xc8\xc4\xcc\x2d\x90\x3b\x21\x72\xe7\x92\xaf\x0a\x26\x1e\xf7\xfb\x5d\x45\x70\x8a\x2b\x85\xb8\x36\xae\x31\x87\xae\x23\x02\x08\xbe\xeb\x50\xaa\x97\x76\x1d\xca\x3c\xbe\xf3\x58\xb8\x9b\x9b\xe1\x94\xaf\x72\xe7\xf6\xb8\xa5\x0e\xee\xac\x35\x92\xad\x6a\xa8\xf7\x22\x9d\xa6\x18\x90\xae\x08\x13\x1e\x26\x35\x57\x2c\xeb\x01\x9f\x25\xf1\xc2\x9f\x25\x5c\xc6\xf5\x34\x52\x5f\xeb\x4b\x16\xe3\xef\xba\x61\x5e\x8b\x17\x95\x4d\x06\x7e\x21\x46\xf7\xbb\xd3\xf0\x47\xb0\x9e\x8b\x22\x5b\xca\x26\x5d\xc9\x66\xf1\xa8\xfb\xb8\x42\x61\x89\xda\xee\xa7\x5a\xe2\x2e\x30\x5c\xe0\x6f\x77\x0f\x1e\xd7\xea\xc5\xdf\x72\x59\x78\xa4\x00\x3c\x61\x32\x19\xf9\xcb\x34\x60\x89\x30\xf5\xa2\x63\xbf\x77\xda\x3a\x9c\xee\x5c\x99\x86\x8a\xaa\x4c\x97\xa8\x03\x96\x7f\x53\x0a\x1a\x7f\xd6\x3d\x7e\x5b\x0f\x53\x93\x77\x44\xcc\xe9\x8f\x9c\xd0\x95\x9c\x76\x9e\xa7\x7e\xe0\xf5\xd2\xe5\x34\xab\x42\x83\x61\xff\x9f\xed\xf6\x78\xd2\x6b\x5d\x29\xda\xa8\xa2\x58\x2e\xfd\xa4\x2d\xd2\x30\x39\xab\x1e\x50\x88\x4a\x7e\x6b\x05\xd8\x0e\x60\x26\x2a\x3c\xb0\x5c\x5a\x3c\x54\xd6\x90\x45\xa2\x78\xa2\x9e\xc6\xb2\x1e\xf8\x53\x7e\xc7\xdd\xfa\x80\xce\x9d\xa7\x9e\xb7\x06\xcb\x85\xca\x40\xfa\x61\x02\xed\x77\xe7\x69\x88\xe5\xeb\x3d\x5a\x1b\x6b\x7d\x05\x43\xaa\xee\x84\x33\x51\x8b\x68\xf7\x21\xca\x10\xf2\x55\x9e\x68\x65\xeb\xf4\x9c\x74\x15\xb0\xe6\x09\x3d\x7a\x24\x45\x3e\x12\x1e\x90\xca\x13\xd8\x80\xe3\xc3\x3d\x07\x07\x3b\x88\xfe\xad\x71\x78\xa8\x82\xa0\x5c\x7a\x4e\x45\xac\xbd\xf0\xe6\x81\x86\x50\x2d\x72\xa8\x90\xb3\x72\x2a\x57\x90\xe6\x1e\xb4\x3c\x0f\x9c\xf1\xa8\x15\x45\x08\xd5\x71\x4f\x84\xf6\x1d\x5f\x46\x89\x8d\xbe\x5b\x47\xaa\x29\x62\x31\xcc\x18\x8a\x0c\x68\x0c\xf4\x8b\x1f\x87\xfb\x88\x4a\x1c\x15\x61\x61\xbc\xe2\x72\x2c\xb6\x9b\xbf\xc9\x13\xcf\xb2\x7b\x24\xe5\xa1\xf6\xc2\x47\xa8\x3e\x66\x47\x59\xf8\x4b\xa5\x23\x78\x0c\x3d\x91\x80\x7d\x47\x07\x7e\x81\xcf\x5b\x47\x3c\x27\x0d\xa9\xfe\xe6\x79\xdd\xa7\x42\x04\x5a\xfb\xc7\xd6\x2b\x95\x22\x52\x07\x1b\xd1\x56\x20\xfd\xf9\x22\x39\x02\xe6\x79\xdc\xfb\x14\x56\xb2\x62\x85\x49\xa0\x1c\x50\x8c\xfa\xf1\x5f\x03\x9d\x51\xd9\x83\x4d\x8b\x35\x6a\x5f\xda\x57\x1a\xa5\xb3\xc4\x3b\xcd\x77\x61\xaf\xb0\xfd\x46\x4f\x5b\x02\x22\x3f\xe2\xaa\x7b\xc5\x54\xbe\x73\x85\xc7\xa7\xc4\x07\x2c\x95\x8f\xaa\x4f\xb0\x62\x77\xc1\x97\xa6\xa6\x5b\x0b\x1f\xe1\x72\xc1\x83\x40\x63\xa6\x1d\xde\xfa\x52\x84\x94\x9c\xb8\xd1\xbb\x01\x3f\x5a\x88\x90\xc7\x59\xf2\x83\xe5\xe1\x64\xe0\x87\xa6\x2d\x8e\xf0\xe1\x4c\xc8\xe5\xd9\x83\x6d\x47\xd4\xd7\xa2\x8c\x15\xda\x2f\xfd\x5b\xee\x75\x58\xc2\x06\x2c\x59\x40\x2d\x03\x34\x2d\x98\x2e\x30\x95\xea\x2b\xea\x2f\xee\xdc\x48\xf2\x24\x59\x1b\x13\xd1\x10\xf2\x03\x2d\x74\xe7\x26\xe4\xb5\x27\x4d\xf1\x23\xd4\x4d\x70\x7b\x4e\x27\xa3\x48\x4b\xba\x0b\x34\xc2\x77\xe8\x52\x04\xc4\x1f\xe4\xf3\xaf\xb8\xc4\x62\x5a\xdc\xe2\x5a\xf5\xb4\x76\xe7\x9a\x15\xc8\xfe\x7d\xce\x7b\xb6\x1a\x45\x76\xe3\x7a\x71\x80\xf8\x8a\x1a\x7a\xa6\x31\x36\xcc\x7e\xf6\x55\x1e\xc6\x2a\x73\xa1\x86\x09\x77\x8b\x2d\x50\x5d\xaf\xe9\x44\x7c\x4a\x8f\x46\x4e\x0f\x43\xac\xb8\x23\xdf\xf9\x28\xeb\x15\x55\x7b\xc7\x13\x77\xd1\x0a\xa9\x69\x64\xbe\x1c\x48\x71\xeb\x13\xaa\xfa\xe1\x1c\xbf\xcf\xfc\x80\xc7\x5a\xe7\x3d\xd8\x1b\xf7\x3b\x7d\xe8\xf5\xc7\x70\x3d\x72\x7a\x17\x30\xbe\x74\x46\xd0\xea\xfd\xf5\xe1\xd2\x1e\xda\x47\xd0\xb3\xed\x0e\x8c\xfb\xd0\xb1\xdb\x4e\xc7\x06\xe7\x1d\x7c\xb0\xb7\x0f\xfb\x6a\x3b\x91\x49\x16\xd8\xc1\x63\x8f\x10\x43\x8c\x68\x42\x4f\x3c\xb1\x0a\x03\xc1\x3c\xa0\x02\x88\x50\x23\x36\x16\x80\x99\x08\xd0\xbd\xb4\x89\x85\x9e\x02\x3b\xa0\xea\x4c\xad\xf5\x2c\x0d\x5d\x15\xc7\x03\x11\x51\xdc\xf2\x5d\xb2\x97\x4b\xad\x76\xbb\x7f\xdd\x1b\x4f\xec\xab\x96\xa3\x5b\x2e\x62\x4b\x3d\x30\xaa\x0b\x56\x0a\x9b\x47\x99\x18\x13\x55\x87\xf5\xc2\xf2\x16\x7e\xa9\x2d\xc5\x14\x69\x45\x19\xf9\x8d\x74\x18\x08\xcf\xb1\x46\xe3\x22\xf4\x8e\x56\xe8\x84\x91\x48\xa5\x9b\x59\xb2\x35\x6c\x5f\x3a\xef\xed\x6d\xf4\x38\x83\xd6\xf6\x87\x1e\xfb\x71\xa2\xde\xe9\xe2\xba\x26\x97\x46\xe4\xe7\x7a\xbe\x14\x6f\x40\xda\xf3\x50\x08\xc8\xb3\x05\xb4\x28\x59\x0c\xf9\xa0\x41\x25\x2a\xa6\xb0\xdb\x8c\xf6\xd6\xbf\xe6\xa2\xa9\x59\xf3\x23\x46\xec\x37\x8f\x92\x25\x4e\xfa\x25\x6a\xa3\x8a\x9b\xf0\xe1\xf2\xc6\x23\x13\xca\xc2\xe6\xa2\x84\x1a\x59\x44\x4c\xf7\x14\xc8\x4a\xce\x76\x47\xee\xee\x43\xf5\x5f\x6a\xde\x1a\x8b\xda\x37\xd0\xcf\xb6\x12\x9f\x47\xc2\x2b\x2d\x51\xca\x5a\xa6\x5f\xcd\x6c\xab\xd5\x6b\x35\xad\x5c\x41\x32\x75\xca\x8c\xb0\x11\x45\x04\x1a\x0e\x5d\x3b\x4e\xc3\xcc\x85\x88\xc9\x76\xb7\x3f\xb0\x87\x13\x13\x5e\x1b\x3f\x6e\x50\x20\xf2\x03\x2c\xd5\xa9\x3a\x8f\x5d\x1d\x35\xc5\xea\x76\x04\xa7\x11\xcb\x22\x21\x34\x92\x59\xf1\x8d\x1f\x4d\x56\xcc\x47\x58\x9e\x4f\xd0\x3b\x13\x05\x13\x13\x8c\x36\xf4\x5c\x4c\xae\xa4\xf6\x7b\x3b\xa7\xa9\x9c\xf5\x43\x6f\x47\xc8\x3d\x27\xdb\xf9\x75\x8f\xae\x4d\x30\x33\x7b\x63\xe7\x9d\x63\x0f\x35\x54\x51\xdc\xab\x50\x47\x78\x31\xf7\x1b\x6d\xc9\x31\xa2\xb1\x59\xe8\x87\x4e\xf2\x35\x95\x77\x93\x2d\xe2\x23\xe2\x3e\x6a\xe3\xa5\x2e\xcf\xb3\xa2\x7e\x37\x8a\x26\xe6\xc6\xe8\xa4\xa2\x67\xd7\xa7\xd3\xe9\x6b\x28\x74\xd5\x7f\x12\x84\x3e\x38\xdd\x6e\x1e\x81\x2e\x10\xa0\x29\x1f\xae\xaf\x9d\x0e\xcc\xa4\x58\xe6\x32\x7a\x0f\xb2\x81\x66\x8e\xa0\x6b\x26\x1a\x35\xc6\x2c\xef\x22\x59\x7f\xdd\x3c\x7e\xdd\x7c\xfd\x3b\xfb\xf5\xc4\x65\xa7\xfc\x84\x9d\xbc\x62\xa7\x74\xa8\x2b\x44\x84\x34\xa5\x48\xd1\xa0\x84\x1f\x4a\xe6\x23\xea\x25\xd7\x22\xc5\x99\x3f\x01\x06\xd7\x1d\xa7\xa3\x9a\x27\xe2\xbe\xcc\xb2\x52\x81\xbb\x98\x41\x94\xe1\x46\x1e\x03\xea\x9b\x5a\x50\xbc\x07\x19\xe3\xc1\x07\x20\x09\x9c\xda\x42\xca\x34\xca\x71\x43\xad\x47\xe6\xf5\xb7\x90\x55\x7f\x84\x66\x6f\x11\xf7\xe8\x5e\x23\x4d\x7d\xef\xf9\xb6\x76\x5f\xb7\xb5\x64\xb5\x7d\x50\x93\x50\x9c\x20\xd6\xc0\x1f\x7f\xfc\x01\xd5\x83\x98\x63\x57\xef\x27\x6b\x70\x97\x38\x31\x75\xc0\xf2\x69\x88\xcb\x89\x71\x4f\x77\x69\x9b\x01\xea\x90\x26\x11\xd2\xc4\x99\x91\x65\xc8\x13\x4a\xfe\x23\x0d\xf2\xae\x88\xd6\xd8\x85\x1f\x99\x66\x7c\xc1\x54\x37\xce\x02\x8c\x4d\x14\x66\xca\xf5\x16\x9f\xd3\xc5\xca\x66\x64\x25\x15\xee\x77\x5c\xfb\xe8\x0d\x3f\xd1\x65\xea\xbf\xd7\xbb\xfe\x54\x32\xb9\xae\x5f\x29\x33\x74\x38\xdd\xcd\xd6\xf3\x01\xf7\x09\xb2\x90\xab\x1b\x92\x8f\x0a\x40\x9e\x36\x5d\x4a\x91\xb0\x74\x82\x5c\xaa\x83\xca\x94\x2d\xfa\x8f\x70\x6f\xf6\xd8\x16\x3f\x44\x12\xcd\x21\x83\xfe\x2b\x7c\x8a\x78\x51\xe4\x04\x1f\xcd\xd9\xcf\x24\x9d\xe1\xa9\xf1\x5f\xdf\x61\x99\x4f\x0f\x71\x54\x8f\xe1\xdb\xfb\x07\x6c\x0b\xa4\xf0\xbd\x2e\xc3\x52\xbb\xb0\xf3\x03\x73\xb9\x24\xb9\xd7\x16\x01\x16\x98\xb3\xfd\x4f\xc7\x27\x27\x1f\x8f\xdf\x9e\x34\x96\xfb\x74\xf3\x8a\xce\x79\xb8\xd2\xa4\x95\x69\x90\xf2\x87\x0b\xa7\xb4\x10\x8a\xe2\x63\x7c\x56\x2e\xd9\x57\xd7\xdd\xd6\xb8\x3f\x7c\xa2\xc9\xda\x2c\x0f\xed\xd1\x75\x77\x3c\xc2\xd0\x0d\xc5\x22\x8d\xd0\xd0\xad\x5e\x67\xd8\x77\x3a\xfa\x8a\x98\x7a\xe4\xb8\xce\x8d\xec\x08\xb8\xec\xd6\xcb\x2e\x76\x11\x84\x1a\xf4\xf1\xf3\xa1\x1a\x11\x15\xb0\xbc\xc1\xd4\xc2\xfe\x04\xff\x67\x30\xf5\xe7\xb0\x77\xd9\x6a\xff\xfd\x08\x44\x18\xac\x41\xdd\xae\xe3\x82\xe4\xd8\x3e\x24\xa9\x0c\xb9\x97\xdd\xf3\xcd\x7c\x89\x59\x9c\xac\x04\x4e\x8c\xae\x08\x3d\x4c\x7d\x07\xe2\xd4\xbd\x51\x7d\x8b\x83\x39\x46\xf1\x7b\x43\xf7\x95\x0c\x56\x6c\x0d\x22\x4d\x72\xef\x18\x76\x68\xf3\x47\xb5\xa9\xc5\x6a\x2f\x38\x92\xc1\x10\x46\x3e\xc8\x79\xc5\x48\xb4\x41\xab\xe7\xb4\xe1\x23\x41\x08\xb5\xe8\xd4\x53\x1d\x41\x94\x26\x99\x3c\x2b\x9c\x7a\xe6\x90\xa9\x0d\x84\xb2\x9f\xe9\xca\x1b\x4f\x4d\x0c\x7a\x1f\xa8\xdb\x50\x8c\xcb\x87\xcc\xef\xa9\x45\x44\x37\xa2\x2d\xd5\x01\x34\x9a\xab\x45\x71\x8a\x42\x44\x2c\xf4\xdd\x23\x05\x7b\x2b\xca\x52\xa6\x61\x95\x4a\x9d\x4a\xe3\x35\x2c\xb1\x84\xa1\x91\xd2\xe8\x08\x42\xaa\x86\xf1\xf6\x7e\x29\x27\xcb\xbd\xbe\x6c\x38\xde\xd1\xcd\x10\xce\x6d\xb4\x58\x29\x23\xaa\x82\x9a\x46\x35\xb8\x62\xeb\x29\x57\x1c\xab\x5f\x36\xd1\x78\x9f\xed\xa6\xe0\xaf\x7e\xc9\x42\xeb\x1e\x6e\x50\x1c\x3d\xd3\xbb\x42\x4a\xee\x26\x3a\x07\x32\x46\x97\xa8\xd6\x7e\x0c\xab\x85\x51\x22\x10\x73\x88\xd9\x3a\x7e\xf3\x29\x2c\x6e\xdc\x61\xaf\x6c\x8b\xbe\x1a\x3e\x86\x3d\xfa\x20\x10\x1e\x90\x81\x72\xb7\xc4\x23\xce\x11\x1c\x03\xff\x86\x1b\x3b\x62\x98\x85\x22\xb3\x63\xc0\x13\x94\xc0\x55\xee\xa6\xd3\x3a\xdc\xf0\xa0\x3d\x1c\x22\xb7\xff\x85\xdb\xd4\x01\xed\xb6\x2d\x3a\xe6\xa8\xec\x30\xf8\xb7\xe8\x67\x14\x6c\x90\x82\x0d\x25\xa2\x4d\x22\xe6\x2e\xc7\xb7\x37\x05\x01\x5d\x9d\xc0\x94\x4d\xd7\x47\xe8\x9e\x1c\x28\xdc\xc7\x74\xfd\x86\x38\x95\x77\x0e\xc6\xb1\x71\xab\x32\x7e\xe6\x43\xc3\x76\x0f\x5a\x9d\x73\x98\x63\x9f\x18\xeb\xe9\x41\xe8\x5b\x0b\x3c\x45\x8d\x93\x92\x84\x8e\x79\x0a\x42\x21\xf1\x69\x8c\x20\x3f\x63\xf8\xa9\xd8\xd3\x96\xfd\x97\x14\x33\xc5\xe3\x11\xc7\x8c\xc4\xd3\x58\x5d\x34\xf1\xc4\x24\x3c\xd6\x96\x20\xd0\x31\x0b\x2b\xac\xfb\x18\xae\x18\x0f\x3c\xdc\xfa\x8a\x51\x59\x9d\x06\x58\xbb\xd5\x7a\x5e\x54\xa0\x51\x2f\xde\x28\x32\xe5\x2e\xc3\x3c\xa0\xba\xee\x13\x6f\x1c\x2d\x60\x9a\xce\xc9\x9b\x25\xe6\x4d\x95\xdc\x16\xca\x6d\x69\x99\x4d\x2d\xec\x61\x1e\x25\x59\x04\x1a\x6d\x88\xed\x2d\xd2\x66\xc8\xf7\x48\xe7\xb6\x20\xac\x21\x33\xdc\xea\x1a\x53\xc4\x88\xad\x48\x0b\xba\xd2\xf2\x43\x3f\x5e\x60\x0e\x4e\x45\x42\x56\x57\x15\x15\x73\xf1\x08\x08\x7c\xbc\x48\x19\xaf\x99\xa1\x96\x9e\xb2\xe4\x5a\xdb\x84\xcd\x99\x1f\x1e\x6d\xec\x83\x9e\x22\x72\x2c\xc0\x1d\xfe\x7c\xae\x79\x67\x1e\x2f\x86\x76\x4e\x78\x82\xbc\x62\x00\x6c\xd4\xc9\x45\x80\x7a\x9b\x43\xc0\x8a\x9d\x12\x89\x09\x6e\x80\xbd\xae\xf1\xff\xa8\x3d\xb4\xed\xde\xa4\xdb\x6f\x75\xb0\xe3\xc3\x14\x20\x0b\xc6\x74\xcb\x43\xdb\xd1\x25\x11\xc4\xeb\xb8\x36\x15\x22\x99\xa0\xd3\x23\x74\x37\x57\x57\x31\x74\xe1\x01\xfb\x9f\xe4\x3e\xe5\x41\x69\xb5\xa0\x12\x4d\xb9\x50\x24\xa8\x3b\x86\x86\x6a\x19\x74\x2f\x64\x80\xf9\xb4\x9c\xaf\xae\xdf\x64\x63\xa1\x6d\xbc\x5a\xac\xd5\x7b\xaa\x85\xfe\x40\x7d\x62\x81\x56\xd8\x56\xc0\x7b\x8f\x2d\xc3\x7c\x06\xc4\x81\x58\xfd\x53\x56\x96\x7f\x90\xc2\xaa\xa4\x9b\x04\xca\xae\xee\x38\xc6\xcc\x5a\x8b\x64\x9c\x43\xbb\x6a\x9b\xaa\xa7\x92\x24\x25\xd0\xc6\x50\x4e\x71\x1e\x46\x9d\xb7\x0e\xad\x15\x93\x7c\x29\x70\x73\xd1\xb9\x44\xad\xe0\xd7\x44\xa4\xee\x22\x1f\x13\x22\x74\x33\xc7\x6e\xd5\xf2\x43\x2a\x5e\x88\xd1\x28\x1f\xf6\x98\xaf\x9b\x45\x48\xca\x73\xc0\xd1\x8f\xcb\x9f\xf2\xb6\x2b\x14\x09\xa3\x95\x4c\x43\x6a\xa1\x6a\xf0\x97\x48\xf7\x25\x71\x45\x4c\xc7\x7a\xbc\x06\x3c\x1d\x63\xfa\xff\xf7\x7f\xfe\xc7\x7f\xe5\x61\xed\xd8\xbc\xd2\xa3\x3b\x68\x6c\x7d\x1e\xfe\x67\x5a\xa1\xec\x8d\x4c\xe7\xef\xd9\x3c\xd2\x56\x6d\xa8\x1e\x23\x14\x4e\x58\x6a\x82\xa0\x17\xff\x09\x73\x6f\x28\x47\x67\xe8\x5b\x35\x42\xb0\xfa\x49\xe3\xf7\xe3\xe3\xd3\xe6\x6f\xf5\x57\xbf\xfd\xde\x50\x93\x03\xb6\x09\x0a\xb0\x72\x1d\xc2\x42\x79\x25\x03\x3b\x4c\xf7\x9b\x72\xe9\x00\x74\x4c\xbe\xa2\xeb\xa4\x2c\x92\x1b\x3a\x64\xcd\x52\xe3\x2d\xa8\xda\xb0\x7e\xab\x7c\x0a\x87\x18\x11\x4c\x8b\x9d\xbd\x53\xa3\x3b\x41\xcb\x0a\x85\x95\xfa\xb9\xfe\xce\xbc\x05\xdb\x2a\xa5\xc9\x3c\x75\x5c\xbf\xa6\x50\x44\xe8\x6f\x0b\xfc\x20\xc1\xe1\xa3\x62\xb6\x5a\xcd\x93\x8a\xf9\x2b\x8a\xef\x25\xd0\xac\xbc\x54\x84\xc6\x8b\x29\x1c\xbf\x94\x42\xe3\xf7\x17\x53\x78\xfd\x62\x0a\xbf\xbd\x98\xc2\xaf\xdf\xe9\x4c\xd5\x76\x7f\xe7\xd9\xec\x5a\xda\x7a\x09\x11\x7e\x97\x48\x66\x65\x7a\x2c\x9b\xf4\xce\x3b\xf6\x11\x20\xd6\x2f\x22\x38\x17\x62\x1e\xf0\x1f\x41\x0f\x01\xdc\xf2\x97\x73\xeb\xee\xf5\xaf\x56\x3e\xf4\x1f\xa5\x65\xeb\xdc\x79\x41\x5a\x66\x6c\x98\x5c\x72\x36\xf5\xad\xdb\xdf\x98\xf5\xf2\x4c\x7b\x4a\xf8\x0d\x64\x0f\x02\xce\xe8\x55\x9a\x79\xad\x4d\xf0\xaf\x4d\x07\x74\xe4\xd7\x53\x40\x59\x14\xfa\x9a\x3f\xa7\xd8\x6a\x6d\xae\x9f\xde\x77\xb4\xd2\x9b\xe9\x6f\xdc\x1a\x5e\xd8\x63\x35\xfb\xa1\x45\x1e\xbe\x19\x51\x4a\x60\x2b\xbd\xd5\xc2\xba\x05\x57\x91\x02\x9a\xf8\xac\x50\x0f\x7d\x56\x92\xdd\xbb\xa1\x00\xe6\xfd\x81\xe9\xc1\xf0\x17\xbd\xe0\xa1\xae\xcc\xa5\x5b\xb6\xff\x09\x00\x00\xff\xff\x9e\x4a\xac\xb9\x60\x26\x00\x00")

func scriptsBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBash,
		"scripts.bash",
	)
}

func scriptsBash() (*asset, error) {
	bytes, err := scriptsBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.bash", size: 9824, mode: os.FileMode(420), modTime: time.Unix(1468410536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.bash": scriptsBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.bash": &bintree{scriptsBash, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

