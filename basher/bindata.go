// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\xfd\x72\xdb\x36\xb6\xff\x5b\x7a\x8a\x53\xd9\x13\x27\xf7\x9a\xa2\x25\x27\x4d\xd2\xc4\xb9\xa3\x48\x8a\xa3\x5b\x7f\x68\x2c\xbb\x77\x3a\x49\xc7\x03\x91\x90\x88\x6b\x92\xe0\x00\xa0\x65\x8d\xd7\x7d\x83\x7d\x86\x7d\x8f\x7d\xaa\x7d\x84\x3d\x07\x20\x25\x4a\x96\x37\x6e\x9d\x76\x1a\xdb\xc2\xc7\x0f\xe7\xfb\xfc\x00\x1d\xb3\x2b\xfe\x49\xc6\x21\x57\xfa\xf9\x0b\xb8\xad\xd7\x92\xab\x50\x28\xf0\x32\x68\xe6\x99\x8e\xc4\xc4\xf8\xb1\x9c\x6a\x7f\xd3\xc4\x38\x17\x71\xe8\xd7\xef\xea\xf5\x8b\x6c\xaa\x58\xc8\x47\x81\x12\x99\x71\x38\x41\xae\x62\xf0\x26\x7a\x74\x04\x91\x31\x99\xfe\xc9\xf7\x15\x9b\x35\xa7\xc2\x44\xf9\x38\xd7\x5c\x05\x32\x35\x3c\x35\xcd\x40\x26\x7e\xcc\x27\xc6\x62\xa2\x18\x7e\x09\x9f\x30\x8d\x9f\x7d\x91\x6a\xc3\xe2\xb8\xa9\x23\xf8\x00\xc5\x5c\xd3\xf0\x24\x83\x67\xcf\x20\x88\x12\x19\xc2\x7f\xdf\xdc\x9b\x68\xfa\xeb\x23\x2a\x59\x59\x44\x62\x8f\xb8\xc9\xb3\x43\x9e\x38\x89\x0f\xfb\xc7\x07\xdb\xad\x7a\xad\x3b\x38\xd8\x6e\xd7\x6b\x67\x52\x9a\x21\xd3\x7a\x26\x55\x78\xb0\xbd\x5f\xaf\xd7\xc4\x04\xbe\x40\x63\xbb\xdd\x80\x83\x03\x68\x18\x95\xf3\x06\xfc\xf6\x0e\x4c\xc4\xd3\x7a\xad\xb6\x05\xdd\x01\x08\x0d\x34\xbe\x0b\x33\x0e\xa9\x9c\x41\xca\x79\x08\x59\x81\x82\x8b\x0a\x88\xfd\x06\xfc\x80\x10\xd5\xed\x35\x1e\x44\x12\x3c\xee\x66\xff\x06\x3a\x0f\xf1\xe3\x08\xa6\x3c\x81\xc2\x04\x40\xd2\xe1\xc2\x1b\x61\x60\x0f\xff\xe2\xb1\xe6\x8b\x01\x9a\x9a\x88\x7a\x39\xb8\x05\x17\x68\x63\xd0\x91\xcc\xe3\x10\xcc\x3c\xe3\x88\x42\x67\x55\xa5\x79\xf0\x8c\xf2\x08\x04\x44\x33\x1d\x0a\x33\xcc\xe3\xd8\x59\xe9\xac\x7f\x7c\x7a\xde\xb7\x86\xfa\x78\xd6\x39\xe9\x7e\xb6\xc6\x3a\x3a\x3d\xfc\x34\x38\xea\x93\x9d\x6a\x95\x90\xaa\xd7\xd0\xdf\x90\xe5\x16\x17\xb6\xdb\xd0\xfe\xf0\xac\x85\xca\x19\xce\x01\x97\x3a\xec\x51\x3e\x46\x27\xe6\x31\x1f\xa4\xa2\x08\x9e\x05\x5c\x6b\x03\x9c\x2e\xd7\xa3\xcc\xf8\xb1\x0a\xd9\x5a\x87\xbc\xc8\x42\x66\xf8\x1f\x02\xcd\xed\x96\xfb\xb0\x43\x19\x0e\x9c\x8d\xbe\x01\x97\x61\x44\x96\xd6\x5c\x41\xa9\x15\x30\x67\x3c\x93\x0f\x09\x76\xe1\x42\xb4\x2b\xd3\x89\x98\x3a\x2c\x85\xcb\x4b\xa9\x3c\xef\x9a\xab\xb1\xd4\x7c\x03\xb2\x8b\x66\xcc\xc3\x98\xff\x9f\x03\x5e\xd5\xd2\xce\xc0\x4c\xb1\x2c\xe3\xca\x6e\x30\x4c\x99\x91\x48\xf2\x98\x19\xa9\xdc\x96\x5e\xff\x97\x41\x77\x83\x52\x37\x81\xca\x53\xab\x96\xca\x13\x4c\x5b\x0d\xde\x0c\x43\xb5\xd5\x80\xd6\x07\x3f\xe4\xd7\x7e\x9a\x17\xea\x12\x72\x57\x26\x99\x40\x87\x9e\x8e\x1c\xea\xf0\xec\xf4\x7f\xfb\xdd\xf3\xcb\xf3\x5f\x87\x0e\xbb\x1c\x18\x76\xce\x5d\x00\x8d\xba\x9f\xfb\xc7\x2e\x7e\x4a\x11\x5e\x5a\xcb\x14\x4b\x5e\xad\xc9\xa3\xb9\x01\x4f\x42\x26\x32\x3e\x61\x22\xa6\x04\xbf\x09\x64\xc8\x6d\x4d\x02\xcf\x4a\x66\x53\xd5\xd3\x41\xc4\x93\x22\xad\xbc\x48\x60\x95\x8a\x78\x1c\xbb\x52\xd5\x4f\xaf\x85\x92\x29\x29\x84\x0b\xc3\x2b\x10\x59\x24\x53\xae\x4b\x9b\x80\x17\x72\x6d\x44\xca\x8c\x90\x29\x34\x32\x1c\x9c\x48\x95\x1c\xac\x2d\xdb\x4d\x59\xc2\x51\xe0\x06\xad\x57\xe2\x9a\x87\x3d\x66\xd8\x90\x99\x68\xad\x58\x16\x0e\x6b\x6c\xbf\xa2\x14\xbf\x09\x32\xc5\x8d\x99\x93\xc5\x3a\x2a\x88\x70\xe3\x9f\xb3\x58\x39\x77\xd2\x39\xfe\x8b\xec\xf6\x0d\xb5\x3c\xe6\xc4\x5f\x9d\xdb\x7e\xd9\xbc\x09\x8a\x19\x28\x7f\x3f\x68\x81\xfe\x4d\x26\x95\xb9\x67\x00\xa7\x53\xab\xaa\x53\xfb\x8f\xe9\xc4\x2d\x70\x61\xe0\xf2\xe3\x69\x46\x2e\xd5\xc3\x58\x68\x03\xcd\x0c\xb5\xc3\xf4\xf2\xdd\x5c\x33\xb3\xa3\x0f\x28\xd5\xaa\x28\x55\x80\xad\xae\xa8\xa6\xa6\x35\xe5\xaa\x9e\x9f\xb8\x09\xa2\x4e\x4a\x55\x80\x09\x35\x54\xf2\x5a\x68\x14\x45\xa4\x53\xfc\x7b\x82\x59\x53\x34\xe2\x2d\xac\xd6\xd8\x4e\xb0\x55\x6a\xd0\x62\x1a\xd1\x48\x28\x67\x69\x2c\x59\x08\x54\x5b\x44\x6a\xe4\x42\x74\x98\x58\x6b\xd0\x22\x96\x86\xb6\xa9\x00\x65\x2c\x55\xfc\x49\x9e\x06\x36\x80\x87\x32\xa3\x80\xe5\x9b\x0e\xad\xd7\x3a\xdd\xee\xe9\xc5\xc9\xf9\x65\xff\xb8\x33\x38\xb2\x26\xa7\x63\xa9\xfc\x30\x6a\xfc\x39\x2c\x86\x4a\x31\x2e\x49\x8c\x62\x62\x49\x0f\xfc\x52\x26\x1c\xbc\x86\xff\x6a\x26\x72\x8c\x07\x64\xe5\x99\xb0\x9c\xfe\x8f\xf2\x90\xa9\x44\x1a\x6e\x98\x5b\x54\xaa\xfe\xd1\xe9\xb0\x7f\x76\x59\x08\xee\x7a\xd2\xc5\x49\xef\xa8\x7f\x39\xe8\xf5\x4f\xce\x07\x9f\x06\xfd\x33\x1b\x2e\x56\x6a\x2b\x28\x7a\x95\xfa\x90\xe7\xb1\x30\x92\x81\x2b\xc8\x0f\x0b\x51\x7a\xe2\x10\x23\x8c\x2c\x79\x71\x31\xe8\xc1\x44\xc9\xa4\xa2\xc4\xd6\x82\xdf\x4c\x31\x6a\x0a\x82\x63\x59\x4d\x72\x93\x29\xff\x4d\x7b\xef\x4d\xfb\xcd\x5b\xf6\xe3\x7e\xc0\x5e\xf2\x7d\xb6\xff\x8a\xbd\xa4\x4d\x47\x52\x66\x88\xa9\x64\x8e\xa2\x91\x1d\xed\x81\xbb\x80\x0c\x61\x2e\x73\x6c\xc9\x06\x18\x5c\xf4\x06\xbd\x5d\x60\xa1\x75\x68\x02\xe8\x6f\x92\xc2\x46\xa7\x9c\x40\xb6\x70\xdd\x4a\x3a\x58\x8e\xe1\x85\xd0\x58\x7a\xc2\x5f\x25\x2a\xe7\x08\xb2\x16\x38\x80\x2d\x5f\x1b\x4d\x24\x42\xe6\xd6\xea\x16\xfa\x60\xc2\x1c\x9f\xc0\xb2\x57\x9e\x77\x82\xc5\x8e\xc8\xc4\x02\xfc\x9e\x8b\xdf\x61\x84\x10\x31\xc9\x73\x81\xd4\xe9\xb9\x9f\x6b\xe5\xc7\x62\xcc\x6f\x78\xe0\xdb\x8c\xfb\x98\x87\xe1\x1c\xbc\x00\x76\x86\x0a\xc3\xd8\xda\x75\x07\x6c\x1f\xd1\x26\x44\xec\xf7\xef\xdf\xc3\xf6\x73\xcd\x91\x45\x0a\x33\x87\x20\xc1\x7e\xd3\x03\x4f\x60\x42\xdd\x56\xc4\xb8\x6b\x60\xb2\x2d\xda\xcf\x8b\x17\x75\x3a\x75\x0b\x06\x13\xb2\x1d\xf9\xca\x6a\xb5\xeb\xd2\x21\x90\xd9\x1c\x84\xb1\x26\xc6\x8e\x1f\x31\x9d\xee\xa0\x91\x63\xc5\x19\x0a\x33\xe6\x6e\x89\xe0\xc4\x8c\x4a\xa2\x76\x4b\x2a\xdc\x6d\x60\x6b\x85\x95\x27\xf0\xbb\x7f\x24\xc6\x8a\xa9\xb9\x7f\x6c\x8d\xd0\xe3\xd7\x22\xe0\x7e\x35\x9a\xbe\x42\x69\x4e\xbf\x00\xbc\x97\x13\x55\x64\x54\x60\x84\x93\xa9\x89\x51\xdc\x69\x2a\x15\x77\xc3\x19\x99\x6a\xb2\x6e\x81\xc2\x71\x25\xbb\x2b\x84\xf9\x9a\x36\xec\xa6\x92\x22\x5a\x7a\x4a\xfa\xd3\x3e\x8a\x23\x17\xc9\x45\xcd\xa0\xff\x82\x8c\xb4\xb9\x67\xde\xef\xa2\xde\xaa\xfc\xc7\x38\x9a\x4e\x61\x4d\x8d\x2f\xc5\xde\xdf\x48\xba\x35\x2d\x88\xd7\xd6\xd6\x23\x93\x78\x76\xbd\x9c\x0c\xb1\x1d\xd7\x97\xfc\x7a\x65\xa5\xa5\xeb\xb4\x7a\x85\x6d\xaf\x93\xe8\x52\xba\x5e\x1e\x22\x7d\xff\x15\x53\xd0\x72\x77\x14\x86\xd2\x4f\x4b\x8c\xf9\xac\xa2\xf4\x22\xf9\xaa\x99\x50\xc8\xbb\x89\x8f\x97\xf0\x9f\xf9\x7c\xd7\x26\x78\x15\x1d\x3f\xab\xc7\xa2\x97\xe0\x8e\x9a\x63\x1f\x51\x52\x84\xdd\x98\xb3\x74\x41\x26\x8b\x36\xb9\x4e\xe1\x9a\xbe\xa3\x80\x33\x08\x68\xf9\x7d\x86\x5b\x80\x5d\xa4\x62\x8d\xe7\x7e\x13\x30\x2f\xb7\x74\xd6\x39\x6f\x05\xb7\x60\xcf\x3d\xec\xcb\xd3\xc7\x43\x8b\xca\x2e\x2c\xdb\xf8\x21\xb8\x32\x8a\x05\x1b\x18\x7a\x71\x4e\x47\x6b\x9e\x8c\x63\xfe\xf8\x33\x58\xb1\xe3\x71\xf8\x47\xe8\xc9\xc7\x63\xc7\x54\xdf\x1e\x82\xb2\x0c\xbc\x83\xcd\xf9\x1a\xab\x5c\xc1\x7b\x3a\xdd\x9f\x3b\x87\x05\x03\xef\x0c\x4e\xb0\xbb\x9d\x0f\x7e\x19\x9c\xff\x7a\x9f\xf7\xb0\x70\x8c\x17\x3c\x24\xb3\xc0\x12\xd0\x04\x05\x5e\x8a\x07\x10\x47\xc1\xc5\x15\x89\x19\x32\x80\xa8\x5f\x25\xfa\xab\x50\xf5\x9a\xe2\x61\x57\xc6\x18\x87\x07\x3b\x5f\xf7\xf6\xf7\xbf\xec\xbd\xdb\x6f\x25\x3b\x74\x6b\xc0\xba\xb8\x3e\xd3\xa6\x99\x71\x9c\xf3\xf5\x89\x97\x34\x91\xca\xd5\x61\x1c\xab\xd7\xfa\xc7\x17\x47\x9d\xf3\xd3\xb3\x07\xf8\xdc\x62\xfa\xac\x3f\xba\x38\x3a\x1f\x61\xd7\x48\x65\x94\x67\x98\xcb\x9d\x93\xde\xd9\xe9\xa0\x77\xf9\xf9\xf4\xb8\xef\x1b\x29\x63\xed\xf3\x42\x13\x24\xa6\xec\x3a\x74\xd7\x90\xf6\x07\x6c\xeb\x2d\xfa\xf1\x8c\xda\x00\x36\xb9\xd3\xde\x29\xfc\x84\xbd\x0e\x49\x14\xfe\xcf\x60\x2c\xa6\xb0\xf5\x19\xcd\xbb\x0b\x32\xc5\xda\xca\x95\x92\x0a\x27\x14\x47\x8e\x63\x72\x95\xf2\xb0\xac\xa2\x13\xa1\xb0\xc5\x9a\x99\x04\x6c\x41\x32\x0d\xb1\x2f\x0f\xf0\x8a\x18\x5c\x59\x72\x35\xc0\xf6\x46\xad\xe3\x8a\x6e\xf8\x0c\x66\x6c\x0e\x32\x37\xc8\x32\x62\xce\x33\xd8\xac\xcd\xfb\xed\xb6\x13\xab\x1b\x71\x84\xc1\x3a\x85\xe7\xe0\xc9\x33\x46\xa2\x0d\x3b\x27\x83\x2e\x7c\xa1\xfe\xce\xe9\x60\x94\x79\x17\xaf\xcd\xa6\x94\x67\x86\x97\x94\x29\x94\x6a\x03\x5d\x37\x7e\xa3\x50\xc1\x5d\x97\x05\xf7\x79\x6e\xdf\x0f\xb0\x7e\xaf\x1f\x7e\x47\x04\x14\xdd\x88\xb6\xb4\x1b\xd0\x68\x81\x13\x65\xb0\x2a\x44\xc6\x52\x11\xec\x5a\x4e\x32\xa3\x06\xc9\x1c\xe7\xa1\xb7\x1a\xdb\x41\xe7\x90\x70\x4c\x94\x10\xef\xa2\xbb\x90\x4a\x83\x33\x8b\x37\x91\xdb\x8a\x2c\x78\xa0\x37\xc5\xe2\x5a\x29\xb7\x65\xf5\x23\xe2\xb1\xd0\x62\x66\x8d\x68\xe9\x6c\x9e\x35\xe1\x98\xcd\xc7\xdc\x9e\xb8\x7d\xbb\x88\xc6\xbb\x72\x35\x35\x89\xed\xdb\x32\xb4\xee\xe0\x0a\xc5\x11\xb6\x81\x07\x52\x29\x1e\x18\x57\x1d\x97\x65\x56\xf1\x1d\x0d\xb3\xa8\x50\x22\x96\x53\xd0\x6c\xae\x7f\xfa\x9a\xae\x2e\xdc\x60\xaf\x72\x89\xab\xb4\x7b\xb0\x45\x3f\x88\xff\x0c\xc9\x40\x95\x17\x96\x11\xe7\xc8\x4b\x62\x71\xc5\x0b\x3b\x62\x98\xa5\xb2\xb4\x63\xcc\x0d\x4a\x10\x58\x77\xd3\x6e\x17\x6e\xb8\xb1\x7f\x76\x86\xa7\xfd\x01\xb7\xd9\x0d\xce\x6d\x4b\x62\x52\x41\xd9\x60\xf0\xc7\xe8\x57\x28\xd8\x22\x05\x5b\x56\xc4\x3e\x89\xb8\xa1\x27\x52\x55\xa7\x4b\xd6\x98\x8d\xb1\x7b\x6d\xdf\x56\x8a\xc2\x9d\xad\x3b\xd8\xb2\xaa\xce\xc1\x38\x2e\xdc\x6a\x8d\x5f\xfa\xb0\x38\x76\x0b\x3a\xbd\x8f\x30\xc5\xfb\x93\x76\x57\x1c\x69\xef\x62\xb4\x6b\xc6\x50\x22\x92\x84\xb6\x85\x96\x6a\x80\x11\x74\xd7\x21\x3f\x63\xf8\xd9\xd8\x73\x96\xfd\xff\x1c\x33\x25\xe4\x19\xc7\x8c\xc4\xdd\x48\xec\x1c\xb8\x29\x12\x1e\x69\x5d\x1c\xbb\x98\x85\x19\x92\x72\x0c\x57\x8c\x07\x9e\x2e\x7d\xc5\xa8\xcd\x62\xd9\x4f\xdc\x7c\x55\x54\xa0\x8b\xa4\x5e\x28\x32\xe6\x01\xc3\x3c\x20\xd2\x2d\xe8\x6c\xbc\xff\x00\xf6\x23\xf2\xa6\xad\xc2\x24\xb7\x87\x72\x7b\x4e\xe6\x82\x86\x9e\x60\x1e\x99\x32\x02\x0b\x6d\xe8\xd8\x6b\xc4\x66\x78\xee\xae\xcb\x6d\x49\xb5\x86\xcc\x70\xed\xb8\xd8\x6a\x8d\x58\x8a\x84\x84\x15\x0b\x53\x2a\xb0\xe4\xa3\x44\xd2\x90\xd5\x2d\x99\xc5\x5c\xdc\x05\x2a\x3e\x61\x66\x8d\xd7\x2e\xab\x96\xbb\x0a\xaa\xb9\xb3\x09\x9b\x32\x91\xee\x2e\xec\x43\x9c\x03\xe1\x58\x8c\x2b\xc4\x74\xea\xce\x2e\x3d\xbe\x1a\xda\x15\xe1\xa9\xe4\xad\x06\xc0\x42\x9d\x4a\x04\xd8\xf7\x4f\x2a\xac\x78\x8d\x21\x31\x91\x71\x48\x5d\xd2\xa3\x51\xf7\xac\xdf\x3f\xb9\x3c\x3a\xed\xf4\x06\x27\x87\x98\x02\xcb\x3e\x86\xcb\xd1\x25\x19\xe8\xb9\x6e\x8e\xa5\x34\x97\xe8\xf4\x0c\xdd\xcd\xed\xcb\x09\x3d\xc7\xc0\xce\x57\xb5\x43\x79\x50\x9b\x45\x44\x65\x29\x17\x56\x01\x1d\x59\x6f\x59\xb6\xee\xae\x21\x45\x61\x7e\x59\xaf\xb2\xd0\x47\xd9\x58\x3a\x1b\xcf\xa2\xb9\x7d\xd9\x8d\xdc\x0f\xd4\x47\x4b\xb4\xc2\xb2\x03\xde\x85\x2c\x49\xab\x19\xa0\x63\x39\xfb\x9f\x92\xbe\x7e\x27\x85\x4b\x8e\x4b\x09\x14\xa3\xcb\x22\xf4\x3a\xc7\x98\x99\x3b\x91\x0a\xe7\xd0\xaa\xe6\xa2\xeb\xd9\x24\xc9\xb5\xa3\x9a\x39\x5e\xda\x51\xe7\xa5\x43\x9b\xab\x49\x9e\x48\x5c\xbc\xea\x5c\x42\x5b\xf1\xab\x91\x79\x10\x55\x63\x42\xa6\x41\xe9\xd8\xa5\x5a\x22\xa5\xe6\x85\x35\x1a\xe5\x43\xfa\xf3\xa6\xbd\x5a\x92\xaa\x27\x8c\xf2\x8c\xab\x1f\xaa\xb6\x5b\x69\x12\x85\x56\x2a\x4f\x89\x17\x37\x89\x98\xef\x28\x3a\x15\x6b\x3a\xf6\xe3\x39\xe0\x6e\x8d\xe9\xff\xaf\x7f\xfc\xfd\x9f\xd5\xb2\xb6\x57\xd0\x6f\xfc\x57\xa5\xb6\xc5\xf7\x14\xbd\x9f\xcb\x9b\x7d\xd7\xde\xf8\xdc\x9d\xde\xd6\x05\xcf\x5e\xe7\xf1\x36\x6f\x99\x20\xe5\xe4\x04\x7d\x69\xef\xf3\xcc\xdf\x6f\xbd\xdd\xdb\x7b\xd9\x7e\xed\xbf\x7a\xfd\xb6\x65\xaf\xf1\x48\x0b\x6c\x81\xaa\x30\x82\xc8\x7a\xa1\x2c\x6e\x98\xde\x57\xf5\xda\x73\x70\x31\xf8\x8a\x1e\xa7\xca\xc8\x6d\xb9\x10\x2d\xa6\x5a\xef\xc0\xf6\x82\xf9\x3b\xeb\x43\x78\x81\x11\xc0\x9c\xd8\xe5\xeb\x2f\xbd\x50\x7a\x5e\x2a\xbd\x5c\xdc\xe7\xd5\x0b\xa5\x1c\xca\x43\xbb\xed\x93\x8d\xc3\xc0\xdf\x78\xc9\x30\x78\xf9\x6f\x14\x4b\xbd\xf6\x7e\xe3\x89\x00\xed\xa7\x02\xb4\x9e\x0a\xb0\xf7\x44\x80\xd6\xdb\xa7\x02\xbc\x79\x2a\xc0\xeb\xa7\x02\xfc\xf8\x27\x01\x2c\xbf\xfe\x93\x7b\xcb\xd7\x71\xef\x29\x20\xfc\x06\x2f\x5f\x5e\xa9\x47\xd2\xa6\x2f\x3f\xb4\xc0\x4a\x30\x7f\x12\xe0\x54\xca\x69\xcc\xbf\x07\x1e\x56\x6a\x4f\x24\x53\x8f\xa9\x84\xb3\xb1\xf0\xae\x5f\x2f\xc5\xa5\xe0\xb7\xdf\x86\x56\xbe\xc3\x59\xfb\x56\xf5\x77\xbf\x7c\x27\xae\xd7\x5c\x2d\x5d\x8e\xf8\x81\xfb\xd6\x07\x21\x8a\x9c\xee\x72\xe4\x56\x13\x11\xa0\x50\xc5\x5b\xe4\xc7\xce\xa8\xbf\xbc\x73\x2e\x1e\xc8\x44\x42\xef\xd0\x74\xf7\x63\x19\xf6\x8f\x66\x80\xa2\x7a\x57\x95\xd7\x9b\x9f\xf9\x3c\x88\xb0\xff\x6b\xfa\x3a\x57\xa4\xcd\xab\xe2\x33\x78\xe7\x60\xdf\xe7\xc6\x22\xf5\xe9\xd1\x5c\x8b\xe9\xea\x60\x79\xc6\xc6\xd3\x42\xa1\x91\x3d\x8c\x73\x22\x70\xcd\xac\xd5\xfe\xde\x87\x82\x37\x84\x46\xe3\xdb\x47\xff\x15\xfa\xde\xfd\x3b\x00\x00\xff\xff\x1a\x72\x9e\xe1\x1c\x1f\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 7964, mode: os.FileMode(420), modTime: time.Unix(1466942175, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

