// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x6d\x6f\x9b\x4c\x10\xfc\x0c\xbf\x62\x1e\x8c\xf2\x24\x6a\x30\x79\xf9\x96\xda\x91\x5c\xcb\x6d\x2d\x39\x8d\x05\xb6\x54\xa9\xaa\x22\x0a\xcb\x8b\x0a\x1c\xba\x3b\xe4\x44\x49\xfe\x7b\xf7\x70\x70\x9d\xc6\x52\xbe\x1d\x7b\x33\xb3\x3b\x7b\xc3\xba\xc9\x64\x94\x50\x18\xcb\xa2\xd1\xc7\x27\x78\xb4\xad\xb8\x95\x25\xbc\x54\x85\x0b\xe4\x5a\x37\xea\xca\xf7\x65\xb4\x19\x66\x85\xce\xdb\x5f\xad\x22\x19\x8b\x5a\x53\xad\x87\xb1\xa8\xfc\x92\x52\xad\xf2\x22\xd5\x24\x95\xdf\x36\xdd\xd1\xaf\x22\xc5\xdf\xfd\x27\xae\xf1\x72\x1a\x6a\xaa\x1a\x1c\x1d\x21\xce\x2b\x91\xe0\xc3\xfd\x9b\x8b\xa1\xff\xaa\x52\xd4\x4a\x47\x65\x69\x6e\x64\xf5\x0a\x6c\x3f\xdb\x76\x48\xba\x6d\xbe\xc7\x8d\x24\xad\x1f\xb6\xb3\x4f\xe7\x63\xf7\xdc\xb6\x02\x21\xf4\x32\x52\x6a\x23\x64\x32\x76\x2f\x6c\xdb\x2a\x52\xfc\x80\xe3\x3e\x4e\xe7\xcf\x0e\xc6\x63\x38\x5a\xb6\xe4\xe0\xe7\x47\xe8\x9c\x6a\xdb\xb2\x06\x98\xce\x51\x28\x98\xfa\x29\x36\x84\x5a\x6c\x50\x13\x25\x68\x5e\x84\x18\xd4\xab\xec\xeb\xb3\xde\x7f\xac\xb7\xaf\x65\x51\x9c\x0b\x78\x74\x00\xfa\x04\xd5\x26\x7c\x17\x22\xa3\x6a\xe7\xef\xfe\xc5\x44\xc7\xbd\x2f\x34\xce\xf8\x44\xa5\xa2\x5d\x81\x4d\x59\x69\x61\xf7\xc5\x01\xd6\xfc\x10\x50\xb9\x68\xcb\x04\xfa\xa1\x21\xd6\x32\xed\xf7\xa7\x7d\xa7\x53\xdf\x88\x65\x79\x99\x5f\x0a\xbd\x6c\xcb\x72\xbb\xc6\x60\x76\x73\xbb\x9a\x75\xab\xfc\x14\x4c\xbe\x4d\xbf\x9a\x25\x5a\xab\xf9\xcd\x2c\x5c\x4d\x6e\x96\x63\xf7\xd2\xb6\xaa\xdf\x49\x21\xe1\x35\x18\xf6\xcf\x5e\x8a\x4c\xf9\xb6\xc5\x41\x41\xc3\x52\x70\xcf\xe1\x5e\xe0\xe2\xfa\xe8\x9c\x6d\x6b\x22\x30\xcd\xe6\xd1\x97\xeb\xc5\xe2\x2e\x98\x85\xeb\xc5\x2a\x1c\xbb\xc7\x23\xe7\xb5\x02\xf3\x3d\xc3\xf7\xdc\xcb\x21\x17\x9c\x93\x7f\x39\x77\x9f\x27\xab\xc9\x82\x99\x99\xa4\x06\x4e\x1a\xb1\xb3\x2b\x07\x5e\x8c\xd1\x68\x64\x76\xbe\x0f\x7e\x3e\xc0\x9f\x05\xc1\x6d\xb0\xe3\x93\x94\x42\xbe\xc7\x1f\x60\x9e\x9a\xfd\x4a\xc2\x26\x52\x88\xd0\x75\x45\xc7\x3d\x65\x73\x6c\xd7\x6c\xdf\xfc\x1e\x5b\xd8\xff\x0a\x4a\x54\xa4\xf3\xa2\xce\xb0\x91\xa2\xce\x8c\x4c\x1f\xa0\xb7\x76\x38\x1b\x5e\xa6\xe1\x9c\x71\x90\xf0\xf4\x74\x00\xd6\x4d\xbd\x0f\xeb\xf3\x36\xc0\x2e\x23\x03\x6c\x03\xc2\xa5\x01\x26\x3c\x54\x22\x6a\xfa\x8b\x38\x33\x47\xf3\xde\x7f\x02\x00\x00\xff\xff\xda\x2c\x66\xf3\xf7\x03\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 1015, mode: os.FileMode(420), modTime: time.Unix(1465404129, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

