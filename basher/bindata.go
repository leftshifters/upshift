// Code generated by go-bindata.
// sources:
// scripts.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x5a\xfb\x72\xda\x48\x97\xff\xdb\x3c\xc5\x19\xec\x8a\xe3\x8c\x05\x06\x27\x93\xab\x67\x0b\x03\x71\xd8\xb1\x81\x02\x9c\xad\xa9\x24\x45\x35\x52\x03\xbd\x96\xd4\x5a\xb5\x64\xcc\x66\xbc\x6f\xb0\xcf\xb0\xef\xb1\x4f\xf5\x3d\xc2\x77\x4e\xb7\x1a\x24\x4c\x9c\xcc\xd8\xf3\xc7\x97\x9a\xb2\x8d\xd4\x7d\xee\x97\xdf\x39\xcc\x88\xab\x64\xe8\xc6\x22\x4a\x9e\x1e\xc0\xd7\xd2\x0e\x77\xe7\x12\xf6\x6a\xa5\x1d\xe5\x73\x1e\x01\xfe\xe1\x2b\x70\x7c\x56\xba\x2d\x95\xd6\x67\xeb\xe6\xf0\x45\x7b\x38\x6c\x9c\xb5\x4f\xe8\xfc\x79\xef\xec\x7d\xe7\xbc\x3d\x3c\xd9\xab\xdf\xa1\x52\xb7\x54\xa0\xfe\xeb\x93\x1a\xfc\x01\x09\xe7\x80\xe7\x90\xe6\x59\xcc\x3c\x9f\xff\x47\xcc\xa2\x88\xc7\x86\xea\x4c\x3f\x82\x85\x79\xb6\x3e\xb4\x18\x31\x75\x65\x8e\xf4\x1b\x83\xc6\xc5\xd0\xf2\x1d\xf7\x1b\xa3\x0f\x9a\xef\x05\xbb\xe2\xef\xa5\xef\xf1\x58\x95\x76\x2a\x55\x43\x69\x01\xe5\xbd\x5a\xf9\x2e\xeb\x21\x4f\xd2\xe8\x8c\x07\x86\xe4\x59\xfb\x42\xd3\x6b\x76\x34\xa5\x81\x94\x49\x9f\x29\xb5\x90\xb1\x77\xb2\x77\x5c\x2a\xed\x88\x29\x7c\x42\x4a\xf5\x32\x9c\x9c\x40\x39\x89\x53\x5e\x86\x2f\x6f\x21\x99\xf3\xb0\xb4\xb3\xb3\x0b\xcd\x0e\x08\x05\xf4\xfc\x10\x16\x1c\x42\xb9\x80\x90\x73\x0f\xa2\x8c\x0a\x1e\xca\x48\x1c\x97\xe1\x27\x24\x91\xbf\x6e\x2c\xe6\x70\xf3\xf6\x0f\x50\xa9\x87\x1f\xaf\xc0\x19\xc2\x8c\x07\x20\x42\x95\x30\xdf\xd7\x26\xc5\xb3\x37\x22\x81\x23\xfc\x8b\xfb\x8a\xaf\x1e\xd0\xab\xa9\x28\xd9\x87\xbb\x70\xa9\x78\x0c\x6a\x2e\x53\xdf\x83\x64\x19\x71\xa4\x42\xec\xf2\x02\x59\x36\x77\x78\x58\x16\x48\x10\x2d\x75\x19\x66\x2f\xff\x35\xac\x95\x5a\x71\xc1\x61\x9d\x9b\xbf\xd5\x68\xdb\x58\x15\x6d\xd7\x97\x5e\xc7\x1c\x31\x96\xcb\xf2\x44\x5b\xaf\x10\xae\x91\xf4\x56\x3e\xc8\xc7\x6a\x2d\xa3\x32\xe0\x91\xbc\x8c\x3c\x96\xf0\xbb\x84\xe8\x6e\x8c\xef\x21\xd5\x07\xc0\x71\xae\x79\x3c\x91\x8a\xdf\xa5\x74\x26\x92\x61\x3a\x09\xa4\x97\xfa\xbc\x13\x8a\xe4\x2e\xb1\x19\x8a\xaf\xec\x11\x14\x09\x3f\xde\x4b\xe5\x5b\x42\x15\xe9\x64\x92\x6d\xa3\xd4\x4f\xad\x71\x06\xed\x8b\xde\xc8\xdc\x3e\x1d\x34\xba\x4d\x93\xd5\x2b\xa2\xc7\x86\x68\x94\xea\x30\xc5\x34\x2e\x90\x3b\x26\x72\xa7\x31\x5f\x14\xec\x3d\xea\xf5\xce\x35\xc1\x09\xbe\x29\x04\x79\xe6\xa7\xec\xd2\x65\x44\xd5\x82\x6f\xbb\x94\x9a\x57\xdb\x2e\x59\xf7\x6f\xbd\x16\x6e\xe7\x96\x71\xca\x57\xdd\xd3\xf6\xa8\xa1\x2f\x76\xba\xc3\x51\xe3\xfc\x7c\x7c\x39\x38\x3f\x29\xcf\x93\x24\x52\x6f\xaa\xd5\x98\x2d\x2a\xa8\xf7\x3c\x9d\xa4\x18\x9d\xae\x0c\x13\x1e\x26\x15\x57\x06\x55\x9f\x4f\x13\x35\x17\xd3\x04\x23\xa8\x9a\x46\xfa\xcf\x6a\xc0\x14\x7e\xae\x66\xcc\x2b\x6a\x5e\x5e\xa5\xe3\x57\x62\x74\xbb\x3d\x27\x1f\x83\xf5\x4c\x16\xd9\x52\x6a\xb9\x69\x8c\xd9\x31\x55\xc3\x73\x12\x20\xc7\x05\xe5\x80\x5f\x61\x7d\x1e\x9e\x3c\x01\x77\x8e\xe1\x02\x3f\xdf\x6c\x3c\xae\x54\x8b\x9f\xe3\xa0\xf0\x48\x57\xf3\x84\xc5\xc9\x50\x04\xa9\xcf\x12\x99\x75\x92\x56\xfb\x63\xa7\x69\xc2\xe9\xc6\x8d\xd3\x50\x53\x8d\xd3\x00\x75\xc0\x76\x94\xf5\x85\xda\xaf\x55\x8f\x5f\x57\xc3\x34\xcb\x3b\x22\xd6\xe9\x0d\x3b\xa1\x1b\x73\x3a\x79\x9a\x0a\xdf\xeb\xa6\xc1\xc4\xf6\xa7\xfe\xa0\xf7\xef\xed\xe6\x68\xdc\x6d\x5c\x68\xda\xa8\xa2\x0c\x02\x91\x34\x65\x1a\x26\x27\x7b\x4f\x29\x44\x63\x7e\xed\xf8\x42\x25\x98\x89\xba\x38\x38\x2e\xbd\x3c\xd0\xd6\x88\x8b\x44\xf1\x46\x35\x55\x71\xd5\x17\x13\x7e\xc3\xdd\x6a\x9f\xee\x9d\xa6\x9e\xb7\x04\xc7\x85\x72\x3f\x16\x61\x02\xcd\xf7\xa7\x69\x88\xbd\xec\x23\x5a\x5b\xc8\xb0\x8c\x21\x55\xed\x84\x53\x59\x89\xe8\xf4\x01\xca\x10\xf2\x45\x9e\x68\x79\xed\xf4\x9c\x74\x65\x70\x66\x09\x3d\xba\x23\x45\x3e\x12\x36\x48\xe5\x09\xac\x2a\xe5\xe6\x99\xa7\x4f\xb7\x10\xfd\xb9\x76\x70\xa0\x83\xa0\xb4\x73\x9f\x8a\xd8\x88\xe1\xcd\x86\x86\xb0\x57\xe4\x50\x26\x67\xe5\x54\x2e\x23\xcd\x5d\x68\x78\x1e\x74\x46\xc3\x46\x14\x61\xdd\x56\x5d\x19\xb6\x6f\x78\x10\x25\x6d\xf4\xdd\x32\x4a\x88\x0c\x53\x30\x65\x28\x32\xa0\x31\xd0\x2f\x42\x85\xfb\x58\x95\x38\x2a\xc2\x42\xb5\xe0\xf1\x48\xae\x0f\xff\x90\x27\xee\x65\x77\x47\xca\x03\xe3\x85\x4f\xb0\x77\x97\x1d\x65\xe1\xb3\x72\x4b\x72\x05\x5d\x99\x40\xfb\x86\x2e\x3c\x83\x2f\x6b\x47\xdc\x27\x0d\xa9\xfe\xe6\x7e\xdd\x27\x52\xfa\x46\xfb\xbb\xd6\xcb\xba\x13\x06\x7a\xfb\x26\x92\x71\xb2\x3d\xb4\x8b\xe8\x0a\xcd\x06\x8e\x84\x48\x44\x7c\xca\x84\x4f\x89\x78\xe3\x4a\x8f\x4f\xc8\x4d\xd8\x8e\x35\xa1\x46\xec\xce\xc5\x35\xb7\x1f\x7b\x5a\x14\xa5\x85\x87\x4a\x14\x8b\x6b\xec\x02\x55\xf3\xce\xc8\x82\x9d\xd3\x5c\xe9\xb3\x64\x0e\x15\x5b\x4a\xf6\x6a\x95\x1b\x97\x15\x89\x15\x4f\xe4\x8b\xbf\x46\x1a\x7f\xa0\x38\x51\xcc\x93\x64\x49\xaa\xad\xff\x35\x65\x10\x09\xec\x76\xbd\x61\x51\xcb\xd1\xef\x7d\xa3\xa5\x7d\xb0\xd2\x74\xd8\xfc\xd0\xbe\x30\x0d\xc7\xd6\x90\xe7\x79\x63\xbc\xf8\xae\x31\x74\x69\xd1\x52\x39\xca\x9d\x63\x21\x31\x58\xc5\x99\x0b\xac\xfc\x73\xee\xfb\xa6\xfc\xb7\xc3\x6b\x11\xcb\x90\xea\x0c\x1e\xf4\xae\x40\x44\x73\x19\x72\x65\xeb\x18\x38\x1e\x82\x6e\x11\x32\xed\xd0\x72\x84\x0f\xa7\x32\x0e\x4e\x36\x8e\x1d\x86\x2c\xe0\x28\x63\x99\xce\xa3\x8d\xb9\xd7\x62\x09\x2b\x9a\xcb\x08\x66\xcd\xf5\x62\xd3\x5c\x04\xee\x1f\xd7\x42\x37\x6e\x42\x01\xf8\x4d\x53\x3c\x86\xba\x09\x1e\xcf\xe9\x44\x8a\x64\x01\xf8\xd7\x74\x29\x26\xc0\x23\xf9\xfc\x3b\x2e\xf9\x46\xfc\x3f\xcf\xc5\xbf\xfd\xfd\x4d\xef\xbd\xe7\x89\x3b\x6f\x84\x04\x12\x99\x88\xfb\xb1\xbc\x16\x54\x45\x45\x38\xc3\xbf\xa7\x18\xfc\xca\x18\x63\x17\x4b\x0b\xe2\x6e\x6c\xe6\x0a\x94\x98\xcd\xe9\x89\x27\x17\xa1\x2f\x99\x07\xd4\xa9\xb0\xc4\xc9\x55\x9e\xc2\x54\x83\x53\x3a\xc4\x42\x4f\x57\x25\xa0\x36\x4a\x80\x78\x9a\x86\xae\xf6\x52\x5f\x46\xe4\x15\xbe\x8d\x69\x69\xa7\xd1\x6c\xf6\x2e\xbb\xa3\x71\xfb\xa2\xd1\x31\xd8\x88\xd8\x12\x58\x45\x39\xc1\x49\x61\xf5\xc8\x8a\x31\xd6\x0d\xd3\xbc\x08\xae\xe1\x59\x25\x90\x13\xa4\x15\x59\xf2\x2b\xe9\xd0\x5b\xf7\xb1\x26\xab\x88\xd0\xdb\xf2\x6e\x05\x0e\xda\xe7\xbd\x7e\x7b\x30\xce\x64\x34\xb0\xf3\xb2\xdb\x3a\x6f\x8f\x3b\xad\x76\x77\xd4\x79\xdf\x69\x0f\x4c\xe5\x23\x01\xb5\x4c\xe8\xad\x6c\x7c\xbc\x8f\xb9\x35\xf6\x19\x06\x0c\x19\xeb\xf2\xb2\xd3\x82\x69\x2c\x83\x9c\xf0\xbb\x60\x41\xd6\x0c\xab\x60\x86\xb2\x34\xb4\x0a\x6e\xa2\xb8\xfa\xaa\x7e\xf4\xaa\xfe\xea\x35\xfb\xe5\xd8\x65\xcf\xf9\x31\x3b\x7e\xc1\x9e\xd3\xa5\x73\x29\x23\xa4\x19\xcb\x14\x45\x22\x53\x69\x86\x87\xd4\xdf\x96\x32\xc5\xa1\x24\x01\x06\x97\xad\x4e\xeb\x10\x98\xa7\x7d\x16\x00\xba\x94\xa4\xd0\xd5\x56\x4e\x21\xb2\x26\xca\x20\x82\xe3\x41\xb9\x52\x5d\x15\xe7\xe2\xa0\x36\xc2\x8b\x1b\xf1\x00\x9c\x5a\x95\xa2\xd1\x09\x31\x81\x67\x95\x3e\xd1\xad\x46\x3f\x8d\x2d\x8f\x2e\x26\x2a\x8d\x50\x2b\xe2\x77\xdc\xf9\x16\x1d\x4f\xe3\x58\x9a\x0a\xef\xfe\x06\xbc\x6f\x1a\x30\xd9\x72\x1f\x34\x66\x53\x89\x87\xb4\xdf\xbd\x7b\x07\x7b\x4f\x15\x47\xfc\x21\x92\x25\xb8\x01\x62\xbb\x16\x38\x82\xe0\x66\x4e\x8c\x5b\x5a\x01\xac\xa0\xde\x01\x61\x26\xd2\xaf\x33\x25\x7b\x91\x7f\xb4\x56\x87\x26\xca\x5d\x19\x2d\x11\x2f\x1c\x66\xb0\x61\xce\x34\x6e\x60\x7e\xcc\x19\x0a\x33\xe1\xe6\x88\xe0\x34\x0f\xae\xc0\x35\xa9\x70\xbb\x65\x5a\xcd\xac\x3c\x85\xff\xa9\x9e\x8b\x49\xcc\xe2\x65\xf5\x42\x1b\xa1\xc5\xaf\x85\xcb\xab\xf9\x08\xfa\x0c\xd6\x9c\xd5\x8c\xe0\x9d\xf8\xcf\x53\x46\x05\x86\xf8\x32\x4c\x7c\x14\x77\x16\xca\x98\x9b\xc7\x11\x99\x6a\xba\x69\x81\xcc\x71\x76\xa6\xcd\x84\xf9\x1c\x96\xf5\x25\x3b\x18\xeb\xf1\x9c\xf4\xa7\x7b\x14\x3b\x26\x7a\xb3\x52\x40\xff\xdc\x88\xb4\xb9\x63\xde\x47\x51\xaf\x28\xff\x05\x3e\x0d\x67\xb0\xa1\xc6\xa7\xec\xee\x17\x92\x6e\x43\x0b\x1a\x39\x76\x36\x23\x93\x66\x9d\x92\x7d\xe9\x61\x2b\x29\xad\xf7\x0b\x85\x93\x7a\x34\xa2\xd3\x85\x6d\xc3\xe6\xea\xc0\x4a\xd7\x4a\x3d\x7e\x08\xbf\x63\xda\xe9\xdd\x05\x0a\x43\x29\xa7\x24\xc6\x7c\x94\x53\x7a\x95\x70\xf9\x4c\xc8\xe4\xdd\xb6\x85\xb0\xe4\x3f\xf0\xe5\xa1\x4e\xea\x3c\x75\xfc\x1c\xff\x28\x75\x4b\xdc\x60\x3d\x6c\x0f\xb1\x14\x9e\x1e\x94\x1a\x58\xbb\xaf\x31\x5b\xec\x3a\xad\xf9\x9b\xdd\xe3\x61\x9d\xee\x62\x45\x1c\x75\x3e\x76\x46\xbf\xeb\xe2\xc7\xbc\x09\x28\x82\x2c\xc0\x02\x50\x74\x1b\x9c\x90\x06\x10\x84\x68\xa6\x14\x66\x94\xcf\x19\xf6\x84\x79\x3b\x3f\x82\x95\x76\x62\xee\x35\xa5\x8f\x42\x9f\xec\x7f\x3e\x3a\x3e\xfe\x74\xf4\xf6\xb8\x16\xec\xd3\x96\x0f\x93\x68\xf3\x4d\x9d\xde\x4c\xfc\x94\x6f\xbe\x78\x4e\x2f\x42\x59\x7c\x8c\xcf\x4a\x3b\xed\x8b\xcb\xf3\xc6\xa8\x37\xf8\x06\x66\x5d\xbd\x1e\xb4\x87\x97\xe7\xa3\x21\x96\x98\x50\xce\xd3\x08\x1d\xdf\xe8\xb6\x06\xbd\x4e\x6b\xfc\xa1\x77\xd1\xae\x12\x54\x51\x55\x9e\xc9\x8e\x4d\x9b\x5d\x7b\x76\x6f\xb8\x57\xc7\x21\x11\x7f\x3c\x39\xd0\x43\xc7\xa8\xd7\xea\xc1\x1b\x2c\x8c\xd8\x48\xf1\x3f\x06\x13\x31\x83\xdd\x0f\x68\xc3\x43\x90\x21\x26\x22\x8f\x63\x19\xe3\x8b\x98\x63\x9f\x4b\xd2\x38\xe4\x9e\x4d\xb9\xa9\x88\xb1\x06\x27\x0b\x89\x33\x08\x4e\xd3\x1e\x16\xee\x0e\xa8\xd4\xbd\xd2\x0d\xb6\x83\xb5\x90\xea\xcc\x15\xad\xc3\x18\x2c\xd8\x12\x64\x9a\xe4\xb6\xa8\x5b\xb4\x79\xb7\x57\x37\x62\x35\xe7\x1c\xc9\x60\x50\x23\x1f\xe4\xbc\x60\x24\x5a\xbf\xd1\xed\x34\xe1\x13\x35\x00\x42\x4a\xd4\xfc\x0f\x21\x4a\x13\x2b\xcf\x02\xc1\xe7\x0c\xac\xda\x40\xb8\xea\x0b\xc5\x03\xde\x1a\x67\x4d\xf1\xa9\x5e\xb6\x61\xb2\x6f\x32\xbf\x25\x10\x82\x6e\x44\x5b\xea\x0b\x68\x34\xd7\x88\xd2\x29\x0a\x11\xb1\x50\xb8\x87\xba\x69\x2d\xa8\x9a\x32\xd3\x14\x69\xa3\xa0\xcb\xed\x12\x02\xae\x14\x1a\x29\x8d\x0e\x21\xc4\x51\x28\x55\xeb\x8d\x45\x4e\x96\x5b\x33\xbe\x1e\xe5\x72\xd3\xa6\x0a\x75\xa9\x95\x16\x0b\x6d\x44\x0d\x69\xd2\xa8\x02\x17\x6c\x39\xe1\x9a\xe3\xde\xd7\x55\x34\xde\xda\xd3\x54\x51\xf6\xbe\xda\xd0\xba\x85\x2b\x14\xc7\x4c\x89\xae\xc4\x79\xd6\x4d\x4c\x2a\xad\x73\x32\xe6\xfb\x0a\x16\xf3\x4c\x09\x5f\xce\x40\xb1\xa5\x7a\xf3\x39\x2c\x1e\xdc\x62\x2f\x7b\xc4\xa4\xe5\x11\xec\xd2\x0f\x6a\x96\x7d\x32\x50\x6e\x09\x39\xe4\x1c\x9b\x98\x2f\xae\x78\x66\x47\x0c\xb3\x50\x5a\x3b\xfa\x3c\x41\x09\x5c\xed\x6e\xba\x6d\xc2\x0d\x2f\xb6\x07\x03\xe4\xf6\x27\xdc\xa6\x2f\x18\xb7\xad\xbb\x58\x8e\xca\x16\x83\xff\x88\x7e\x99\x82\x35\x52\xb0\xa6\x45\x6c\x93\x88\x5b\x0a\x68\x03\x8b\x0a\x81\xea\x09\x9b\x60\xa9\xdb\xfb\x9a\x2b\x0a\xb7\xba\xd2\x60\x7d\xcb\x3b\x07\xe3\x38\x73\xab\x36\xbe\xf5\x61\xc6\x76\x17\x1a\xad\x53\x98\x21\x50\x56\x06\xe6\x4a\x33\x07\xe3\xad\x05\x43\x89\x48\x12\xba\xe6\xe9\xbe\x04\x89\x20\xbc\x4b\x7e\xc6\xf0\xd3\xb1\x67\x2c\xfb\x9f\x29\x66\x8a\xc7\x23\x8e\x19\x89\xb7\x11\x05\x18\xe2\x49\x96\xf0\x88\x01\x7c\xdf\xc4\x2c\x2c\x10\xb5\x61\xb8\x62\x3c\xf0\x70\xed\x2b\x46\x35\x79\xe2\x23\xf2\xd2\xef\xf3\xa2\x02\x0d\x0e\x6a\xa5\xc8\x84\xbb\x0c\xf3\x80\x50\x99\x20\xde\x88\x81\x61\x92\xce\xc8\x9b\xba\xee\x92\xdc\x0e\xca\xed\x18\x99\x33\xcc\xd2\xc5\x3c\x4a\x6c\x04\x66\xda\x10\xdb\x6b\xa4\xcd\x90\xef\xa1\xc9\x6d\x49\xb5\x86\xcc\x70\x6d\x1a\x77\xb1\x46\xac\x45\x9a\xd3\x92\x44\x84\x02\x8b\x3c\x4a\x24\x13\xb2\xba\x46\x3e\x98\x8b\x87\x40\xc5\xc7\x8b\xb4\xf1\xea\xb6\x6a\x99\x71\x20\x5e\x1a\x9b\xb0\x19\x13\xe1\xe1\xca\x3e\xd4\xa0\x90\x1c\xf3\xf1\x84\x98\xcd\x0c\x6f\xeb\xf1\x62\x68\xe7\x84\xa7\x92\x57\x0c\x80\x95\x3a\xb9\x08\xd0\x5f\x16\x50\x61\x45\x9c\x4b\x62\x82\xeb\x4b\x65\x7b\xe9\xb0\x39\x68\xb7\xbb\xe3\xf3\x5e\xa3\xd5\xe9\x9e\x61\x0a\xac\x3b\x17\x1e\x47\x97\x44\xa0\x96\xaa\x32\x91\x32\x19\xa3\xd3\x23\x74\x37\xd7\x13\x31\xcd\x9d\xb0\xff\x39\xde\xa7\x3c\xd8\x59\xcc\x09\xf7\x50\x2e\x14\x09\x1a\x64\x57\xd3\xd0\xce\x60\xd6\xac\x30\x3f\x2f\xe5\x21\xcb\x0f\xd9\x58\x1a\x1b\x2f\xe6\x4b\xfd\x35\xc8\xdc\xfc\x40\x7d\x94\x44\x2b\xac\x3b\xe0\xad\xc7\x82\x30\x9f\x01\xca\x97\x8b\x7f\xb3\x58\xe7\x91\x14\xb6\x80\x88\x12\xc8\x47\x97\xcd\xd1\xeb\x1c\x63\x66\x69\x44\xca\x9c\x43\xa7\x2a\xab\xae\xa7\x93\x24\x55\x06\x97\xa4\x38\xb8\xa1\xce\x6b\x87\x56\x8a\x49\x1e\x48\x3c\x5c\x74\x2e\x51\x2b\xf8\x35\x91\xa9\x3b\xcf\xc7\x84\x0c\x5d\xeb\xd8\xb5\x5a\x22\xa4\xe6\x85\x35\x1a\xe5\xc3\x59\xe0\x55\xbd\x58\x92\xf2\x1c\x86\x69\xc4\xe3\x9f\xf2\xb6\x2b\x34\x89\x4c\x2b\x1c\x67\x09\x44\x55\x08\xc5\xed\xc7\xc4\x15\x6b\x3a\xf6\xe3\x25\xe0\x6d\x85\xe9\xff\x8f\xff\xfb\xdf\xff\xcf\x97\xb5\xa3\x0c\xab\xd1\x56\x73\x0d\x7d\xec\x4e\xbf\xf5\x9b\x1d\xfd\x9a\x7a\x3c\x30\x43\x9f\xae\x0b\x8e\x9e\xf7\x70\xdc\xc3\xc2\xe6\x5e\x51\x4e\x4e\xd1\x97\x7a\xe0\x63\xd5\xe3\xda\xeb\xa3\xa3\xe7\xf5\x97\xd5\x17\x2f\x5f\xd7\xf4\x9c\x87\xb0\x40\x17\xa8\x1c\x22\x98\x6b\x2f\xd8\xe2\x86\xe9\x7d\x55\xda\x79\x0a\x26\x06\x5f\xd0\x32\xc2\x46\x6e\xcd\x84\x68\xf6\xaa\xf6\x16\x74\x2f\x58\xbe\xd5\x3e\x84\x03\x8c\x00\x66\xc4\xb6\xdf\xca\xd0\x2a\xc6\x71\x42\xe9\xa4\x79\xa4\x98\x7d\x8f\xb2\x52\xca\x50\xf9\xd6\x6d\xb3\xe7\xd6\x34\xf0\x37\x22\xd2\x04\x27\xc5\x72\x76\xd4\xa9\x1f\x97\x1f\x48\xa0\xfe\x50\x02\xb5\x87\x12\x38\x7a\x20\x81\xda\xeb\x87\x12\x78\xf5\x50\x02\x2f\x1f\x4a\xe0\x97\xbf\x48\x40\xe3\xeb\xbf\x78\xd7\xae\x01\x9d\x87\x10\xe1\x37\x49\xcc\x1c\xab\x47\x50\xa7\xaf\x4b\x95\xc0\x4a\xb0\x7c\x10\xc1\x99\x94\x33\x9f\x3f\x06\x3d\xac\xd4\x8e\x08\x66\x0e\x8b\x03\xce\x26\xc2\xb9\x7e\xb9\x16\x97\x82\x9f\xb6\xf5\x26\x21\x9b\x1c\x81\xd1\x54\xb8\x48\x31\xdb\x34\x9d\x36\x86\xed\x6c\xe6\xa1\x75\x9a\x5d\x85\x88\x80\xb6\xe6\x34\xaa\xb1\x08\x8b\x7f\xc5\x45\x3e\xce\x55\x6e\x4e\xff\x8d\x2f\xdd\x39\x36\x6f\x55\x45\x1c\x2b\xc2\xca\x55\xf6\x19\x9c\x11\xe8\x4d\xcc\x44\x84\x55\xda\x70\x2a\x31\x2b\x3e\xb4\x3c\xb6\x72\xf3\x84\xc2\xd6\x3f\x49\x09\x7d\x55\xa2\x5a\xfd\xb1\x99\x82\xd3\x07\xfa\x82\xeb\x7b\xac\xff\x0e\x7d\xd1\x0d\x4d\x44\x80\x09\x6f\x44\x51\x2f\xec\x24\x69\x68\x9d\xf0\x67\x16\x8a\xc5\x3d\xf3\x71\x09\x7b\x98\xf4\x52\xec\x7a\xb9\x25\x23\x45\x4a\x14\x8d\x69\x26\xd3\x8b\x64\xf3\xdd\x31\xc1\xc6\x4e\xbf\x81\xa3\xff\xe8\x7b\xac\xf1\xd8\x7a\x10\x8e\x84\x4f\x93\x95\xbe\x8f\x94\x69\xf8\xd2\x94\x89\x9b\x23\x22\x96\x2d\xae\x1d\x75\x25\xa2\x31\xc1\x4e\xec\x8a\x63\xcc\xba\xb1\x5e\x52\x8f\x51\x3e\x17\x01\x2f\xe1\x01\xbd\x1e\x59\xfd\x1f\x06\xba\x5f\x78\xde\x70\x21\xa6\xc9\x10\xdb\xac\x6b\x65\x6a\x0c\x9a\x1f\x3a\x1f\xdb\xeb\xb9\x9c\xc4\x59\x7d\x58\x2f\x1e\xb7\x7d\xe1\x53\x35\xe4\xd2\x88\xdc\x5a\x58\x48\xae\x40\x85\xe7\x91\x2c\x79\xb6\x76\xcd\x89\x7c\x34\x5a\xdd\xab\x99\xbe\x9d\x86\xff\x2d\x22\x70\xfe\x2b\xb7\x5b\xaf\x57\x48\x63\x64\xbf\x7a\x94\x04\x11\x1e\xa5\xef\x95\x8b\x87\xf0\x61\x70\xe5\xd1\xaa\x3a\x2e\x1c\x2e\x4a\x68\xbe\x9f\x90\x04\xdb\x69\x37\x16\x4f\xb7\x7f\x8f\xb5\xfd\x52\xf5\x59\xc5\x5b\xfa\x62\xf2\x03\xf4\xed\x51\xe2\x73\x47\x78\xad\x25\x4a\x59\xb1\xfa\x55\xb2\x63\x95\x6a\xa5\x62\x94\x2b\x48\xa6\x6f\xe9\xd5\xd0\x3f\x03\x00\x00\xff\xff\xb0\x66\xa6\x7c\x05\x26\x00\x00")

func scriptsBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBash,
		"scripts.bash",
	)
}

func scriptsBash() (*asset, error) {
	bytes, err := scriptsBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.bash", size: 9733, mode: os.FileMode(420), modTime: time.Unix(1468100473, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.bash": scriptsBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.bash": &bintree{scriptsBash, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

