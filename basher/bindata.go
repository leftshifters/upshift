// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x6d\x6f\xdb\xc6\x0f\x7f\x6d\x7d\x0a\xfe\x15\xa3\x0f\xff\x45\x56\xed\xa4\x43\xb7\xd6\x05\x52\xdb\x4b\x3c\xc4\x8d\x10\x3b\x1b\x8a\x75\x58\xcf\xd2\xc9\xba\x55\xd2\x1d\xee\x21\xb1\x91\x65\x9f\x7d\xbc\x93\xe4\x5a\x79\x58\xb7\x0e\xc3\x5e\xd9\x77\xe4\xfd\x48\xfe\x48\x8a\xbc\x10\x2b\x49\x12\x3a\x8f\x25\x13\xfa\xc9\x53\xb8\xf6\x3a\xb1\x91\x39\x04\xa9\x9a\x9f\x42\xa6\xb5\x50\xdf\x86\xa1\x24\x57\xbd\x15\xd3\x99\x59\x1a\x45\x65\xcc\x4b\x4d\x4b\xdd\x8b\x79\x11\xe6\x34\xd5\x2a\x63\xa9\xa6\x52\x85\x46\xb8\xbf\x61\x41\x14\x9e\x9b\x23\xbc\x86\xfa\x5f\x4f\xd3\x42\xc0\xa3\x47\x10\x67\x05\x4f\xe0\xab\xf5\x1d\x41\x2f\x6c\xdd\xb0\x52\x69\x92\xe7\x56\x22\x8b\x96\xb2\x77\xe3\x79\x73\xaa\x8d\x38\xa6\x45\xe5\xf6\xf1\x64\x36\xec\xf6\xbd\xce\x68\x3a\xec\x0e\xbc\xce\x39\xe7\x3a\x22\x4a\x5d\x71\x99\x0c\xbb\x07\x9e\xd7\x61\x29\xfc\x04\x7e\x77\xe0\xc3\x70\x08\xbe\x96\x86\xfa\xf0\xf3\x4b\xd0\x19\x2d\xbd\x4e\x67\x0f\x46\x53\x60\x0a\xec\xfd\x3e\x5c\x51\x28\xf9\x15\x94\x94\x26\x20\x6a\x14\x54\xaa\x21\x0e\x7c\xf8\x1f\x42\xec\x3e\xef\xd0\x38\xe3\x10\xd0\x4a\xfa\x1b\x28\x93\xe0\x71\x0e\x2b\x5a\x6c\xa3\xb0\xde\xa1\xe2\x9a\x69\x78\x86\xff\x68\xae\xe8\xf6\xc2\x8a\x52\xe6\x35\x97\x7b\x70\x81\x44\x83\xca\xb8\xc9\x13\xd0\x1b\x41\x11\xc5\xda\xda\xf5\xe6\x41\x1b\x8d\x09\x04\x44\x9a\x8e\x99\x8e\x4c\x9e\x57\x2c\x9d\x4f\x66\x67\x8b\x89\x23\xea\xcd\xf9\xd1\xdb\xd1\x89\x23\xeb\xf4\xec\xf8\xbb\xe9\xe9\xc4\xf2\xd4\x29\x3e\x26\x4c\x42\x20\xa0\xd7\xa4\x33\xe7\x2b\x15\x7a\x1d\x2c\x00\x10\xc6\xd9\x80\xee\x00\x06\xaf\x1f\xf5\x31\x50\x4d\x29\xe0\xb3\xca\xce\xdc\x2c\x31\xb1\x26\xa7\xd3\x92\xd5\xd5\xb4\x85\xee\x7f\x06\x5a\x35\x6f\x31\x16\x3c\xee\xc2\xf7\x6f\xc3\x5f\x88\x84\x68\xfa\xc5\x06\x8c\x7b\x7e\xd7\x44\xc4\x93\x69\xc5\xe3\xdf\x80\x16\x58\xc9\x0d\xfb\x2d\xc4\xce\xa7\x1a\xc5\x16\xcb\xe9\x8f\x15\xe8\xca\x1d\xe0\x4a\x12\x21\xa8\x74\x3a\x9a\x48\x3d\x67\x85\xc9\x89\xe6\xb2\xd2\x1a\x4f\x7e\x98\x8e\x2a\xcb\xeb\x58\x9a\xd2\x99\x90\xa6\xc0\xbe\x53\x10\x5c\x61\x99\xf5\x7d\xe8\xbf\x0e\x13\x7a\x19\x96\xa6\x36\x6d\xc1\x46\xbc\x10\x0c\x13\x70\x36\xaf\x80\xa2\xf3\xb3\xef\x27\xa3\xc5\x2f\x8b\x77\x51\x05\xd7\x5c\x44\x47\x8b\x2a\xf9\xf3\xd1\xc9\x64\x56\xe5\xbe\xb1\x7a\xe8\x62\xaf\x55\x9e\xff\x49\xf0\x77\x05\x4b\xc3\xf2\x04\x25\x8a\x6a\x08\x38\x08\x26\x68\x4a\x98\x6b\xe1\x75\xcc\x13\xea\xe4\x10\x38\xff\x5d\x33\x06\x2a\xce\x68\x51\x37\x4e\x90\x31\xfc\x18\x65\x34\xcf\xab\x2f\xd2\xa4\xbc\x64\x92\x97\x36\x6c\x54\x4c\x3e\x02\x13\x19\x2f\xa9\x6a\xc8\x82\x20\xa1\x4a\xb3\x92\x68\xc6\x4b\xf0\x05\x5e\xa6\x5c\x16\xc3\x5b\x6a\xfb\x25\x29\x28\x86\xe5\x5b\x7d\xc9\x2e\x69\x32\x26\x9a\x44\x44\x67\xb7\x1c\xaf\x93\xe7\x77\x9f\xdb\x26\x5e\xc7\x42\x52\xad\x37\x96\xd7\x23\x19\x67\xf8\xf0\xcb\x78\x6d\x64\x6f\x8f\x66\xff\x29\xbb\x9f\x09\x3e\x20\x55\x90\x6d\x59\xf7\xb0\xb7\x8e\x6b\x09\x34\xbf\x0f\xf2\x34\x59\x0b\x2e\xf5\x1d\x9a\xaa\xc8\xfb\xbb\x91\x0f\xfe\x8d\xc8\xa9\x33\x5f\x27\xab\x39\x9e\x09\x5b\x1e\x2a\xca\x99\xd2\xd0\x13\xc8\x01\xb6\x7f\x58\xc9\x7a\xc2\xdd\x3e\x10\x7a\x7f\x27\xf4\x1a\xec\x8e\x06\x13\x64\xb7\xf1\x1d\xed\x6d\x4e\xbc\x3d\x08\x43\xf8\xc7\x9e\xfb\x42\xf2\x14\x7b\x5b\xb5\x5c\xf7\xdb\xbe\xfb\x15\x51\xdd\x6b\x54\xfe\x95\xc6\xfa\x2d\x56\xfe\xcd\xa7\x28\xfc\x56\x18\xf7\x2b\x63\x40\x7e\x2b\x22\xe7\x66\x63\x25\xe8\x5e\x2f\xa6\xb3\xc9\xfc\x64\x71\x34\x8b\x6e\x7a\x98\xb0\x56\xb8\xf8\x11\x15\xb6\xe9\x68\x24\xf9\x25\x53\xe8\x3d\x2b\x57\x51\xed\x78\x55\x13\x7b\x70\x8c\x54\xd8\x61\x76\x71\x31\x1d\x43\x2a\x79\xb1\xcd\x8a\x95\x36\x5b\xc7\x0a\xa3\xab\xd7\x0e\xb7\x6b\x14\x6b\x21\xc3\x17\x83\x67\x2f\x06\x2f\xbe\x21\x5f\x1f\xc4\xe4\x90\x1e\x90\x83\xe7\xe4\xd0\x3e\x3a\xe5\x5c\x20\xa6\xe4\x66\x95\x81\xfd\x16\x3b\x83\xfb\x80\x23\x7b\xc3\x0d\xce\x48\x0d\x04\x2e\xc6\xd3\xf1\x3e\x90\x24\xb1\xd6\x0b\xd0\xdc\x79\xe1\xc8\xe5\x29\x34\xf4\xd6\xab\x42\x90\x80\xdf\x0b\xb7\xe5\xd2\x5e\x16\x16\xf8\xae\x11\x41\xca\x73\xec\x2c\xc0\xb1\xab\xb4\xb2\x83\x9c\x9b\x32\x69\x62\x1e\xa6\xa4\x9a\xe9\xf8\x61\x6a\x4c\x58\x9e\xed\x40\xdf\x82\xff\xbf\x57\xf0\x25\x0a\x44\x43\xda\x4b\x48\xb8\x5d\x0e\x8c\x61\xb8\xbe\x3c\x09\x8d\x92\x61\xce\x96\x74\x4d\xe3\xd0\x55\xc3\x1b\x93\x24\x1b\x08\x62\x78\x1c\x49\x86\x5f\x47\x4b\xe5\x63\x70\xf3\x40\xe9\x04\xb1\x5f\xbd\x7a\x05\xdd\x27\x8a\xe2\x3a\xc7\xf4\x06\xe2\x02\xe7\xc6\x18\x02\x86\x05\x7a\xbd\xe3\xc6\x8d\x4d\xf5\x76\x8c\x3c\x7d\xea\x59\xab\x7b\x30\x4d\x2d\x5d\x36\x3d\x2e\xaa\x7d\x17\x39\xc4\x5c\x6c\x80\x69\xc7\x2a\x4e\xd4\x8c\xa8\xf2\x31\xf2\x9a\x4b\x4a\xd0\x99\x25\xad\x54\x18\xb5\xdb\x49\xb3\x2c\x5d\xdb\x10\x6e\xee\xd9\x98\xec\xca\x65\xf1\xac\x27\x36\x15\x55\x31\x38\x2a\x9d\xf8\x43\x2c\x70\x0d\x85\xb6\xb7\xf0\x7b\x78\xca\x96\x92\xc8\x4d\x38\x73\x8c\x8d\xe9\x25\x8b\x69\xb8\x5b\x6d\xef\xa1\xe1\x3e\xac\xad\xdf\x66\xf7\x83\x33\x20\x2c\x71\x29\xf8\x0b\x49\x4a\x65\x7b\x02\xdf\x56\xde\x3c\xf0\xac\x5d\xaa\xd6\xe7\xda\x97\xf7\xa5\xef\x10\xdb\x89\xb7\xab\xa4\xbd\xb6\x7b\x5d\x27\xc1\x79\xe4\x7d\x5a\x21\x5b\x9a\x6e\x23\xb5\xda\xad\x85\xf2\xf6\x9e\xd8\xb8\x3b\x36\x09\x6e\xa8\xef\xb0\xa8\xdd\x7a\x8a\x5e\xd8\x82\x56\x1c\x4b\x4a\xec\xb0\xb0\x2d\xe7\xdd\x42\xab\x1d\xbd\x6f\xe5\x6c\xe0\x4f\xe8\x66\xdf\xb5\xcc\x2e\x3a\x9e\xe5\x5f\x45\x6f\xc0\xed\xf6\xf9\x47\x00\x00\x00\xff\xff\x8d\x51\xc6\x4a\x5f\x0c\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 3167, mode: os.FileMode(420), modTime: time.Unix(1465469938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

