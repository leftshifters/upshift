// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x7d\x72\xdb\xc6\x15\xff\x9b\x3c\xc5\x0b\xa5\xb1\xec\x96\x20\x44\x4a\x8e\xed\xd8\x72\x87\x21\x19\x99\x8d\x3e\x38\xa2\x94\x4e\xc6\xce\x68\x96\xc0\x92\xd8\x0a\xc0\x62\x76\x17\xa2\x38\xaa\x72\x83\x9e\xa1\xf7\xe8\xa9\x7a\x84\xbe\xb7\x0b\x90\x20\x25\x35\x4a\xe4\x66\x62\x49\xc4\xee\xfe\xf6\x7d\xbf\xdf\x03\x8f\xd9\x15\xff\x41\xc6\x21\x57\xfa\xe5\x2b\xb8\xad\xd7\x92\xab\x50\x28\xf0\x32\x68\xe5\x99\x8e\xc4\xd4\xf8\xb1\x9c\x69\xff\xa1\x85\x49\x2e\xe2\xd0\xaf\xdf\xd5\xeb\x17\xd9\x4c\xb1\x90\x8f\x03\x25\x32\xe3\x70\x82\x5c\xc5\xe0\x4d\xf5\xf8\x08\x22\x63\x32\xfd\x9d\xef\x2b\x36\x6f\xcd\x84\x89\xf2\x49\xae\xb9\x0a\x64\x6a\x78\x6a\x5a\x81\x4c\xfc\x98\x4f\x8d\xc5\x44\x31\xfc\x12\x3e\x61\x1a\x3f\xfb\x22\xd5\x86\xc5\x71\x4b\x47\xf0\x11\x8a\xb5\x96\xe1\x49\x06\x2f\x5e\x40\x10\x25\x32\x84\x3f\xdf\xdc\x5b\x68\xf9\x9b\x4f\x54\xb2\xb6\x89\xc4\x1e\x73\x93\x67\x87\x3c\x71\x12\x1f\x0e\x8e\x0f\xb6\xdb\xf5\x5a\x6f\x78\xb0\xdd\xa9\xd7\xce\xa4\x34\x23\xa6\xf5\x5c\xaa\xf0\x60\x7b\xaf\x5e\xaf\x89\x29\x7c\x86\xc6\x76\xa7\x01\x07\x07\xd0\x30\x2a\xe7\x0d\xf8\xe5\x3d\x98\x88\xa7\xf5\x5a\x6d\x0b\x7a\x43\x10\x1a\xe8\x79\x13\xe6\x1c\x52\x39\x87\x94\xf3\x10\xb2\x02\x05\x37\x15\x10\x7b\x0d\xf8\x06\x21\xaa\xc7\x6b\x3c\x88\x24\x78\xdc\xad\xfe\x03\x74\x1e\xe2\xc7\x31\xcc\x78\x02\x85\x09\x80\xa4\xc3\x8d\x37\xc2\xc0\x2e\xfe\xc5\x63\xcd\x97\x0f\x68\x69\x2a\xea\xe5\xc3\x2d\xb8\x40\x1b\x83\x8e\x64\x1e\x87\x60\x16\x19\x47\x14\xba\xab\x2a\xcd\xa3\x77\x94\x57\x20\x20\x9a\xe9\x50\x98\x51\x1e\xc7\xce\x4a\x67\x83\xe3\xd3\xf3\x81\x35\xd4\xf7\x67\xdd\x93\xde\x27\x6b\xac\xa3\xd3\xc3\x1f\x86\x47\x03\xb2\x53\xad\x12\x52\xf5\x1a\xfa\x1b\xb2\xdc\xe2\xc2\x76\x07\x3a\x1f\x5f\xb4\x51\x39\xc3\x39\xe0\x56\x87\x3d\xce\x27\xe8\xc4\x3c\xe6\xc3\x54\x14\xc1\xb3\x84\x6b\x3f\x00\xa7\xcb\xfd\x28\x33\x7e\xac\x42\xb6\x37\x21\x2f\xb2\x90\x19\xfe\xbb\x40\x73\x7b\xe4\x3e\xec\x48\x86\x43\x67\xa3\xdf\x80\xcb\x30\x22\x4b\x6b\xae\xa1\xd4\x0a\x98\x33\x9e\xc9\xc7\x04\xbb\x70\x21\xda\x93\xe9\x54\xcc\x1c\x96\xc2\xed\xa5\x54\x9e\x77\xcd\xd5\x44\x6a\xfe\x00\xb2\x8b\x66\xcc\xc3\x98\xff\xcd\x01\xaf\x6b\x69\x57\x60\xae\x58\x96\x71\x65\x0f\x18\xa6\xcc\x58\x24\x79\xcc\x8c\x54\xee\x48\x7f\xf0\xd3\xb0\xf7\x80\x52\x37\x81\xca\x53\xab\x96\xca\x13\x4c\x5b\x0d\xde\x1c\x43\xb5\xdd\x80\xf6\x47\x3f\xe4\xd7\x7e\x9a\x17\xea\x12\x72\x4f\x26\x99\x40\x87\x9e\x8e\x1d\xea\xe8\xec\xf4\xaf\x83\xde\xf9\xe5\xf9\xcf\x23\x87\x5d\x3e\x18\x75\xcf\x5d\x00\x8d\x7b\x9f\x06\xc7\x2e\x7e\x4a\x11\xf6\xad\x65\x8a\x2d\xaf\x37\xe4\xd1\xdc\x80\x27\x21\x13\x19\x9f\x32\x11\x53\x82\xdf\x04\x32\xe4\xb6\x26\x81\x67\x25\xb3\xa9\xea\xe9\x20\xe2\x49\x91\x56\x5e\x24\xb0\x4a\x45\x3c\x8e\x5d\xa9\x1a\xa4\xd7\x42\xc9\x94\x14\xc2\x8d\xe1\x15\x88\x2c\x92\x29\xd7\xa5\x4d\xc0\x0b\xb9\x36\x22\x65\x46\xc8\x14\x1a\x19\x3e\x9c\x4a\x95\x1c\x6c\x6c\x6b\xa6\x2c\xe1\x28\x70\x83\xf6\x2b\x71\xcd\xc3\x3e\x33\x6c\xc4\x4c\xb4\x51\x2c\x0b\x87\x35\xb6\x5f\x53\x8a\xdf\x04\x99\xe2\xc6\x2c\xc8\x62\x5d\x15\x44\x78\xf0\x8f\x59\xac\x5c\x3b\xe9\x1e\xff\x9f\xec\xf6\x1b\x6a\x79\xcc\x89\xbf\xbe\xb6\xbd\xdf\xba\x09\x8a\x15\x28\x7f\x3f\x6a\x81\xc1\x4d\x26\x95\xb9\x67\x00\xa7\x53\xbb\xaa\x53\xe7\xf7\xe9\xc4\x2d\x70\x61\xe0\xf2\xe3\x69\x46\x2e\xd5\xa3\x58\x68\x03\xad\x0c\xb5\xc3\xf4\xf2\xdd\x5a\x2b\xb3\x4f\x1f\x51\xaa\x5d\x51\xaa\x00\x5b\xdf\x51\x4d\x4d\x6b\xca\x75\x3d\x7f\xe0\x26\x88\xba\x29\x55\x01\x26\xd4\x48\xc9\x6b\xa1\x51\x14\x91\xce\xf0\xef\x29\x66\x4d\xd1\x88\xb7\xb0\x5a\x63\x3b\xc1\x56\xa9\x41\x8b\x59\x44\x4f\x42\x39\x4f\x63\xc9\x42\xa0\xda\x22\x52\x23\x97\xa2\xc3\xd4\x5a\x83\x36\xb1\x34\xb4\x4d\x05\x28\x63\xa9\xe2\x4f\xf3\x34\xb0\x01\x3c\x92\x19\x05\x2c\x7f\xe8\xd2\x7a\xad\xdb\xeb\x9d\x5e\x9c\x9c\x5f\x0e\x8e\xbb\xc3\x23\x6b\x72\xba\x96\xca\x0f\xa3\xc6\x9f\xc3\xf2\x51\x29\xc6\x25\x89\x51\x2c\xac\xe8\x81\x5f\xca\x84\x0f\xaf\xe1\x4f\xad\x44\x4e\xf0\x82\xac\xbc\x13\x56\xcb\xff\x53\x1e\x5b\x2b\x1f\x5f\x2f\x8d\x74\x88\xce\x27\x25\x2f\x2e\x86\x7d\x98\x2a\x99\x54\xf0\xb7\x96\xd4\x63\x86\x0e\x2d\xb8\x87\x25\x1c\xc9\x4d\xa6\xfc\xb7\x9d\xdd\xb7\x9d\xb7\xef\xd8\xb7\x7b\x01\xdb\xe7\x7b\x6c\xef\x35\xdb\xa7\x43\x47\x52\x66\x88\xa9\x64\x8e\xba\x92\x8a\xf6\xc2\x26\x60\xf3\x5e\xc8\x1c\xbb\xa5\x01\x06\x17\xfd\x61\xbf\x09\x2c\xb4\xb6\x4e\x00\x5d\x41\x52\xd8\xc0\x91\x53\xc8\x96\x56\x5d\x8b\x54\xdb\xfe\xbd\x10\x1a\x2b\x23\xf9\xeb\x1c\xe2\x1c\x41\x36\x7c\x0a\xd8\x8d\xb5\xd1\xd4\xdf\x65\x9e\x86\xa5\x01\x0e\xa6\xcc\xb5\x7a\xac\x48\xe5\x7d\x27\x58\x87\xa8\xcf\x2f\xc1\xef\x59\xff\x3d\x3a\x8f\x38\x43\x9e\x0b\x64\x35\x2f\xfd\x5c\x2b\x3f\x16\x13\x7e\xc3\x03\xdf\x26\xc3\xf7\x79\x18\x2e\xc0\x0b\x60\x67\xa4\x30\xc2\xac\x5d\x77\xc0\x96\x78\x6d\x42\xc4\xfe\xf0\xe1\x03\x6c\xbf\xd4\x1c\x09\x9e\x30\x0b\x08\x12\x6c\x05\x7d\xf0\x04\xc6\xfa\x6d\x45\x8c\xbb\x06\xe6\xc1\xb2\x33\xbc\x7a\x55\xa7\x5b\xb7\x60\x38\x25\xdb\x91\xaf\xac\x56\x4d\x17\xa9\x81\xcc\x16\x20\x8c\x35\x31\x36\xe3\x88\xe9\x74\x07\x8d\x1c\x2b\xce\x50\x98\x09\x77\x5b\x04\x27\xd2\x52\x72\xa8\x5b\x52\xe1\xee\x01\x22\x55\x58\x79\x0a\xbf\xfa\x47\x62\xa2\x98\x5a\xf8\xc7\xd6\x08\x7d\x7e\x2d\x02\xee\x57\xa3\xe9\x0b\x94\xe6\xf4\x0b\xc0\x7b\xe1\x5a\x45\x46\x05\xc6\xb8\x98\x9a\x18\xc5\x9d\xa5\x52\x71\xf7\x38\x23\x53\x4d\x37\x2d\x50\x38\xae\x24\x5e\x85\x30\x5f\xd2\x86\x3d\x54\xb2\x37\xcb\x1c\x49\x7f\x3a\x47\x71\xe4\x22\xb9\x48\x67\xfa\x2f\xc8\x48\x9b\x7b\xe6\xfd\x2a\xea\xad\xcb\x7f\x8c\x4f\xd3\x19\x6c\xa8\xf1\xb9\x38\xfb\x0b\x49\xb7\xa1\x05\x51\xce\xda\x66\x64\x12\x05\xae\x97\x8b\x21\x76\xca\xfa\x8a\xfa\xae\xed\xb4\x4c\x9a\x76\xaf\x11\xe1\x4d\x7e\x5b\x4a\xd7\xcf\x43\x64\xd6\x3f\x63\x0a\x5a\x5a\x8d\xc2\x50\xfa\x69\x89\x31\x9f\x55\x94\x5e\x26\x5f\x35\x13\x0a\x79\x1f\xa2\xca\x25\xfc\x27\xbe\x68\xda\x04\xaf\xa2\xe3\x67\xf5\x54\xf4\x12\xdc\xb1\x66\x2c\xf1\x4a\x8a\xb0\x17\x73\x96\x2e\x79\x5e\xd1\xc1\x36\xd9\x55\xcb\x77\xec\x6c\x0e\x01\x6d\xbf\x4f\x3e\x0b\xb0\x8b\x54\x6c\x50\xd0\xdf\x04\xcc\xcb\x23\xdd\x4d\x3a\x5a\xc1\x2d\x88\x6d\x1f\x5b\xe6\xec\xe9\xd0\xa2\x72\x0a\x99\x29\x7e\x08\xae\x8c\x62\xc1\x03\xe4\xb9\xb8\xa7\xab\x35\x4f\x26\x31\x7f\xfa\x1d\xac\x38\xf1\x34\xfc\x23\xf4\xe4\xd3\xb1\x63\xaa\x6f\x8f\x41\x59\x72\xdc\xc5\xbe\x79\x8d\x55\xae\xa0\x24\xdd\xde\x8f\xdd\xc3\x82\x1c\x77\x87\x27\x97\xdd\xde\xf9\xf0\xa7\xe1\xf9\xcf\xf7\x29\x09\x0b\x27\x38\x7b\x21\xcf\x04\x96\x80\x26\x28\xf0\x52\xbc\x80\xe8\x03\x6e\xae\x48\xcc\xb0\x39\x47\x83\x2a\x07\x5f\x87\xaa\xd7\x14\x0f\x7b\x32\xc6\x38\x3c\xd8\xf9\xb2\xbb\xb7\xf7\x79\xf7\xfd\x5e\x3b\xd9\x21\x42\x8f\x75\x71\x73\xa5\x43\x2b\x93\x38\xe7\x9b\x0b\xfb\xb4\x90\xca\xf5\xc7\xf8\xac\x5e\x1b\x1c\x5f\x1c\x75\xcf\x4f\xcf\x1e\xa1\x5a\xcb\xe5\xb3\xc1\xf8\xe2\xe8\x7c\x8c\x5d\x23\x95\x51\x9e\x61\x2e\x77\x4f\xfa\x67\xa7\xc3\xfe\xe5\xa7\xd3\xe3\x81\x6f\xa4\x8c\xb5\xcf\x0b\x4d\x90\x33\xb2\xeb\xd0\x4d\x08\x9d\x8f\x38\xf9\xb5\xe9\xc7\x0b\x6a\x03\xd8\xe4\x4e\xfb\xa7\xf0\x1d\xf6\x3a\xe4\x37\xf8\x3f\x83\x89\x98\xc1\xd6\x27\x34\x6f\x13\x64\x8a\xb5\x95\x2b\x25\x15\x2e\x28\x8e\xf4\xc3\xe4\x2a\xe5\x61\x59\x45\xa7\x42\x61\x8b\x35\x73\x09\xd8\x82\x64\x1a\x62\x5f\x1e\xe2\xf4\x16\x5c\x59\xde\x33\xc4\xf6\x46\xad\xe3\x8a\x86\x6f\x06\x73\xb6\x00\x99\x1b\xa4\x2d\x31\xe7\x19\x3c\xac\xcd\x87\xed\x8e\x13\xab\x17\x71\x84\xc1\x3a\x85\xf7\xe0\xcd\x73\x46\xa2\x8d\xba\x27\xc3\x1e\x7c\xa6\xfe\xce\xe9\x62\x94\xb9\x89\x13\xad\x29\xe5\x99\xe3\xfc\x30\x83\x52\x6d\xa0\x49\xe0\x17\x0a\x15\x3c\x75\x69\xf9\x14\xde\x60\x47\x7b\xac\xdf\x9b\x97\xdf\x11\x37\x44\x37\xa2\x2d\xed\x01\x34\x5a\xe0\x44\x19\xae\x0b\x91\xb1\x54\x04\x4d\xcb\x49\xe6\xd4\x20\x99\xe3\x3c\xf4\x1a\xc5\x76\xd0\x05\x24\x1c\x13\x25\xc4\x31\xb1\x09\xa9\x34\xb8\xb2\x7c\x5d\x71\x5b\x91\x05\x2f\xf4\x66\x58\x5c\x2b\xe5\xb6\xac\x7e\x44\x3c\x96\x5a\xcc\xad\x11\x2d\xd3\xcc\xb3\x16\x1c\xb3\xc5\x84\xdb\x1b\xb7\x6f\x97\xd1\x78\x57\xee\xa6\x26\xb1\x7d\x5b\x86\xd6\x1d\x5c\xa1\x38\xc2\x36\xf0\x40\x2a\xc5\x03\xe3\xaa\xe3\xaa\xcc\x2a\xbe\xa3\x61\x1e\x15\x4a\xc4\x72\x06\x9a\x2d\xf4\x77\x5f\xd2\xf5\x8d\x0f\xd8\xab\xdc\xe2\x2a\xed\x2e\x6c\xd1\x0f\xe2\x3f\x23\x32\x50\xe5\xe5\xc7\x98\x73\xe4\x25\xb1\xb8\xe2\x85\x1d\x31\xcc\x52\x59\xda\x31\xe6\x06\x25\x08\xac\xbb\xe9\xb4\x0b\x37\x3c\x38\x38\x3b\xc3\xdb\x7e\x87\xdb\xec\x01\xe7\xb6\x15\x31\xa9\xa0\x3c\x60\xf0\xa7\xe8\x57\x28\xd8\x26\x05\xdb\x56\xc4\x01\x89\xf8\x40\x4f\xa4\xaa\x4e\xf3\xcf\x84\x4d\xb0\x7b\x6d\xdf\x56\x8a\xc2\x9d\xad\x3b\xd8\xb2\xaa\xce\xc1\x38\x2e\xdc\x6a\x8d\x5f\xfa\xb0\xb8\x76\x0b\xba\xfd\xef\x61\x86\xa3\x8d\x76\xd3\x87\xb4\x63\x12\x9d\x9a\x33\x94\x88\x24\xa1\x63\xa1\xa5\x1a\x60\x04\x8d\x21\xe4\x67\x0c\x3f\x1b\x7b\xce\xb2\x7f\xcf\x31\x53\x42\x9e\x71\xcc\x48\x3c\x8d\xc4\xce\x81\x9b\x22\xe1\x91\xd6\xc5\xb1\x8b\x59\x98\x23\x29\xc7\x70\xc5\x78\xe0\xe9\xca\x57\x8c\xda\x2c\x96\xfd\xc4\xad\x57\x45\x05\x9a\xf1\xf4\x52\x91\x09\x0f\x18\xe6\x01\x91\x6e\x41\x77\xe3\x68\x02\xd8\x8f\xc8\x9b\xb6\x0a\x93\xdc\x1e\xca\xed\x39\x99\x0b\x1a\x7a\x82\x79\x64\xca\x08\x2c\xb4\xa1\x6b\xaf\x11\x9b\xe1\xbd\x4d\x97\xdb\x92\x6a\x0d\x99\xe1\xda\x71\xb1\xf5\x1a\xb1\x12\x09\x09\x2b\x16\xa6\x54\x60\xc9\x47\x89\xa4\x21\xab\x5b\x32\x8b\xb9\xd8\x04\x2a\x3e\x61\x66\x8d\xd7\x29\xab\x96\x9b\xd2\xd4\xc2\xd9\x84\xcd\x98\x48\x9b\x4b\xfb\x10\xe7\x40\x38\x16\xe3\x0e\x31\x9b\xb9\xbb\x4b\x8f\xaf\x87\x76\x45\x78\x2a\x79\xeb\x01\xb0\x54\xa7\x12\x01\xf6\xd5\x24\x15\x56\x1c\x63\x48\x4c\x64\x1c\x52\x97\xf4\x68\xdc\x3b\x1b\x0c\x4e\x2e\x8f\x4e\xbb\xfd\xe1\xc9\x21\xa6\xc0\xaa\x8f\xe1\x76\x74\x49\x06\x7a\xa1\x5b\x13\x29\xcd\x25\x3a\x3d\x43\x77\x73\xfb\x52\x83\xde\x94\xc0\xce\x17\xb5\x43\x79\x50\x9b\x47\x44\x65\x29\x17\xd6\x01\x1d\x59\x6f\x5b\xb6\xee\xc6\x90\xa2\x30\xef\xd7\xab\x2c\xf4\x49\x36\x96\xce\xc6\xf3\x68\x61\x5f\xba\x46\xee\x07\xea\xa3\x25\x5a\x61\xd5\x01\xef\x42\x96\xa4\xd5\x0c\xd0\xb1\x9c\xff\xa5\xa4\xaf\x5f\x49\xe1\x92\xe3\x52\x02\xc5\xe8\xb2\x08\xbd\xce\x31\x66\x16\x4e\xa4\xc2\x39\xb4\xab\xb5\xec\x7a\x36\x49\x72\xed\xa8\x66\x8e\xf3\x34\xea\xbc\x72\x68\x6b\x3d\xc9\x13\x89\x9b\xd7\x9d\x4b\x68\x6b\x7e\x35\x32\x0f\xa2\x6a\x4c\xc8\x34\x28\x1d\xbb\x52\x4b\xa4\xd4\xbc\xb0\x46\xa3\x7c\x48\x7f\xde\x76\xd6\x4b\x52\xf5\x86\x71\x9e\x71\xf5\x4d\xd5\x76\x6b\x4d\xa2\xd0\x4a\xe5\x29\xf1\xe2\x16\x11\xf3\x1d\x45\xb7\x62\x4d\xc7\x7e\xbc\x00\x3c\xad\x31\xfd\xff\xf3\xaf\x7f\xfe\xbb\x5a\xd6\x76\x0b\xfa\x8d\xff\xaa\xd4\xb6\xf8\x0a\xa1\xff\x63\x39\xd9\xf7\xec\xc4\xe7\x66\x7a\x5b\x17\x3c\x3b\xce\xe3\x34\x6f\x99\x20\xe5\xe4\x14\x7d\x69\xe7\x79\xe6\xef\xb5\xdf\xed\xee\xee\x77\xde\xf8\xaf\xdf\xbc\x6b\xdb\x31\x1e\x69\x81\x2d\x50\x15\x46\x10\x59\x2f\x94\xc5\x0d\xd3\xfb\xaa\x5e\x7b\x09\x2e\x06\x5f\xd3\x7b\xa3\x32\x72\xdb\x2e\x44\x8b\xa5\xf6\x7b\xb0\xbd\x60\xf1\xde\xfa\x10\x5e\x61\x04\x30\x27\x76\xf9\x62\x96\x5e\x1e\x7a\x5e\x2a\xbd\x5c\xdc\xe7\xd5\x4b\xa5\x1c\xca\x63\xa7\xed\xdb\x14\x87\x81\xbf\x71\xc8\x30\x38\xfc\x37\x8a\xad\x5e\x67\xaf\xf1\x4c\x80\xce\x73\x01\xda\xcf\x05\xd8\x7d\x26\x40\xfb\xdd\x73\x01\xde\x3e\x17\xe0\xcd\x73\x01\xbe\xfd\x83\x00\x96\x5f\xff\xc1\xb3\xe5\x8b\x6b\xef\x39\x20\xfc\x06\x87\x2f\xaf\xd4\x23\xe9\xd0\xf7\x12\x5a\x60\x25\x58\x3c\x0b\x70\x26\xe5\x2c\xe6\x5f\x03\x0f\x2b\xb5\x27\x92\x99\xc7\x54\xc2\xd9\x44\x78\xd7\x6f\x56\xe2\x52\xf0\xdb\x2f\x2a\x2b\x5f\xaf\x6c\x7c\xe1\xf9\xab\x5f\xbe\xc2\xad\xd7\x5c\x2d\x5d\x3d\xf1\x03\xf7\x85\xcc\xdd\x7f\x03\x00\x00\xff\xff\x6f\x48\x22\xb5\x30\x1d\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 7472, mode: os.FileMode(420), modTime: time.Unix(1466930701, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

