// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\x4d\x8f\xd3\x30\x10\x3d\xdb\xbf\x62\xc8\x46\x15\x08\x9a\xd0\xee\x0d\x94\x95\xa0\x2a\xa5\x52\x97\x5d\x35\xf4\x84\x38\x64\x93\x49\x63\x61\xc7\x96\x3d\x56\x17\x01\xff\x1d\x27\x4d\xaa\x6e\x11\x42\xe2\x36\x5f\xef\xbd\x99\x67\xef\xcc\xde\x16\x15\xe6\xa5\x15\x86\x9e\xbf\x80\x1f\x9c\x95\xde\x4a\x98\xd6\x2e\xdf\x40\x43\x64\xdc\x9b\x34\xb5\xc5\x21\xd9\x0b\x6a\xfc\x83\x77\x68\x4b\xdd\x12\xb6\x94\x94\x5a\xa5\x12\x6b\x72\x8d\xa8\x09\xad\x4b\xbd\xe9\xc3\x54\x15\x2e\xe4\x63\x0a\x37\x30\x44\x09\xa1\x32\x30\x99\x40\xd9\x28\x5d\xc1\xcb\xc7\x3f\x1a\x49\xfa\xa4\x22\x5a\x47\x85\x94\x5d\xc7\xaa\x27\xc3\xfc\x17\xe7\x39\x92\x37\x2b\x54\xc7\xb5\x57\xcb\xdb\x2c\x9e\x71\xb6\x58\x67\xf1\x9c\xb3\xad\xd6\x74\x5f\x38\x77\xd0\xb6\xca\xe2\x6b\xce\x99\xa8\xe1\x0b\x44\xf1\x3c\x82\x2c\x83\x88\xac\xc7\x08\xbe\xbe\x05\x6a\xb0\xe5\x8c\x5d\xc1\x62\x0d\xc2\x41\x57\x7f\x05\x07\x84\x56\x1f\xa0\x45\xac\xc0\x0c\x2c\x61\x68\xa0\xb8\x8e\xe0\x59\xa0\x38\x87\x33\x2c\x1b\x0d\x53\x3c\x76\x7f\x82\xf3\x55\x48\x73\xd8\xa3\x3a\x5d\xd1\x6d\x17\x06\x1f\x05\xc1\xeb\x10\xa1\x74\x78\x2a\x74\xad\x5a\xf0\xb1\x78\x05\xbb\x60\x34\xb8\x46\x7b\x59\x01\x7d\x37\x18\x58\x3a\xad\xf3\x6d\xfe\xaa\x31\x4a\x04\xc2\x60\xd3\x4a\xd0\xbd\x97\xf2\xe8\xd2\x76\x79\x7b\xf7\x79\xd9\x1b\xf5\x7e\xfb\xee\xd3\xe2\x63\x6f\xd6\xe6\x6e\xf5\x61\xbd\x59\x76\x3e\x31\xf5\xad\x12\x16\xa6\x06\x92\xf1\x39\xa5\xde\xbb\x94\xb3\xf0\x01\xc0\xf8\x5e\x03\xe2\x39\xcc\x6f\x26\xb3\x70\x28\x21\x42\x80\x1d\x75\x72\xff\x10\x1e\xd6\x4b\x5c\xb7\x62\xf8\x4d\x27\xea\xd9\x3f\xa8\xdd\x88\x0d\xb7\x84\xf4\x9c\x7e\x76\x49\xbf\x33\x55\x41\xf8\xdf\x02\xbe\x87\x5f\x4a\xfc\x0e\x00\x00\xff\xff\x2b\xfd\x73\x10\x0b\x03\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 779, mode: os.FileMode(420), modTime: time.Unix(1465415229, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

