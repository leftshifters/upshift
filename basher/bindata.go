// Code generated by go-bindata.
// sources:
// scripts.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x5a\xef\x72\xda\x48\x12\xff\x0c\x4f\xd1\x8b\xa9\xd8\xce\x5a\xc8\x60\x67\xf3\xd7\x7b\x85\x41\xb1\x75\x8b\x81\x02\x9c\xd4\x56\x92\xa2\x84\x34\xc0\x9c\x85\x46\x37\x92\x8c\xb9\xac\xef\x0d\xee\x19\xee\x3d\xee\xa9\xee\x11\xae\x7b\x46\x02\xc9\x26\x4e\x2e\xce\x7d\xb8\xad\x2d\x0c\x9a\x99\xfe\xdf\xbf\xee\x1e\x65\xc4\xa2\x78\xe8\x4a\x1e\xc6\x7b\xfb\xf0\xb9\x5c\x62\xee\x5c\x40\xb5\x5e\x2e\x45\x3e\x63\x21\xe0\x17\x3f\x02\xc3\x77\xca\xb7\xe5\xf2\x66\x6f\x43\x6f\xbe\xb0\x86\xc3\xe6\x99\x75\x42\xfb\x3b\xbd\xb3\xb7\x76\xc7\x1a\x9e\x54\x1b\xf7\xa8\x34\x32\x2a\xd0\xf8\xf5\x49\x1d\xfe\x80\x98\x31\xc0\x7d\x48\xf3\x4c\x3a\x9e\xcf\xec\x20\x8a\x1d\xdf\xd7\x54\xed\xee\x70\xd4\xec\x74\xc6\x97\x83\xce\x49\x65\x1e\xc7\x61\xf4\xca\x34\x23\x26\xaf\xb9\xcb\xa2\xda\x4c\x1d\xa8\x09\x39\x33\x3d\x1e\xc5\x92\x4f\x92\x98\x8b\x20\x32\xf5\x82\xd1\xa8\xd5\x8f\x8d\x09\x0f\x6a\x7f\xe3\x61\xa5\x5c\x72\x13\xe9\x83\x61\x44\x73\xb1\x34\x98\x94\x42\xe2\x8f\x50\x8a\x99\x64\x51\x64\x4c\x1c\xfa\x39\x75\x38\x6d\xf1\x85\xeb\x10\x25\xa8\x54\x3f\xe7\x44\xb8\xad\xc0\xaf\xb0\x85\x76\xb9\x94\x04\xf8\x67\xfb\x52\xdb\x1e\x9c\x54\xaa\x7b\xe0\x7a\x40\x7f\x3c\x2e\x03\x67\xc1\x88\xf2\x69\x73\x78\x3e\x1e\xf6\x2e\x07\x2d\xeb\xc3\xe1\x27\x24\xbe\x5f\x81\x27\x4f\x20\x5c\x7a\xf8\x0d\x0d\x77\x13\x0a\x19\xc3\xd9\xa0\xd9\xee\x58\xe3\xf3\xde\x85\x85\x74\x3e\x23\xb9\xdb\xbc\x7e\x9b\x8d\xfd\xe6\xe8\xfc\xa4\x4a\x9f\xaf\xaa\xb9\x43\x26\x4a\xb2\xb1\xee\x7b\xe9\x84\x21\x93\xda\xba\x9a\x0c\x2c\xf5\xb3\xcd\xa6\xe5\xc8\x89\xae\xf4\x96\x7e\x73\xd0\xbc\x18\x66\x5e\x1d\x6b\x1e\xe8\xc3\x5a\x2a\xc3\x12\x15\xa9\x57\xee\xfb\x72\xc8\xe2\x24\x3c\x63\x0b\x4d\xe5\xcc\xba\x50\x24\x5a\xb6\x3a\x3c\x10\x22\xee\x3b\x51\xb4\x14\xd2\x3b\xa9\x1e\x95\xcb\x25\x3e\x85\x0f\x48\xa9\x51\x81\x93\x13\xa8\xc4\x32\x61\x15\xf8\xf4\x1a\xe2\x39\x0b\xca\xa5\xd2\x0e\xb4\x6c\xe0\x11\xd0\xf3\x03\x58\x32\x08\xc4\x12\x02\xc6\x3c\x08\x53\x2a\xb8\x29\x25\x71\x54\x81\x9f\x90\x44\xfe\xb8\x0e\x41\x83\xe9\xd5\x3f\x20\x4a\x3c\xfc\x79\x05\xc6\x10\x66\x6c\x01\x5c\x07\x9c\x8a\x51\xdc\x7b\xc3\x63\x38\xc4\x6f\xcc\x8f\xd8\xfa\x01\x2d\x4d\x79\x39\x7b\xb8\x03\x97\x18\x84\x80\x91\x94\xf8\x1e\xc4\xab\x90\x21\x15\x62\x97\x17\x28\x63\x73\x8f\x47\xc6\x02\x09\xa2\xa5\x2e\x83\x74\xf1\xff\xc3\x5a\x49\x26\x2e\x18\x8e\x7d\xf3\x3f\x35\xda\x36\x56\x45\xdb\xf5\x85\x57\x80\x8b\x14\x78\x94\xf5\x42\xe1\xad\xcd\x9e\x0f\xcf\x7a\x7a\x70\xc0\x42\x71\x19\x7a\x4e\xcc\xb6\x9f\x95\xb8\x0e\x89\xda\x80\x88\x70\xcd\xe4\x44\x44\xec\x3e\xa5\x33\x1e\x0f\x93\xc9\x42\x78\x09\x41\x17\x8f\xef\x13\x9b\xa1\xc4\x51\xb6\x05\x45\xc2\x9f\x0f\x52\xf9\x92\x50\x45\x3a\xa9\x64\xdb\x28\xf5\x93\xcc\x1e\x03\xeb\xa2\x37\xd2\xa7\x4f\x07\xcd\x6e\x4b\xe7\xee\x9a\xe8\x91\x26\x1a\x26\x2a\x32\x31\x73\x0b\xe4\x8e\x88\xdc\xa9\x64\xcb\x82\x89\x47\xbd\x5e\x47\x11\x9c\xe0\x4a\x21\xae\x53\xd7\xa4\x87\x2e\x43\x02\x08\xb6\xed\x50\xa2\x97\xb6\x1d\xca\x3c\xbe\xf5\x58\xb0\x9d\x5b\xca\x29\x5f\xb9\x4e\xad\x51\x53\x1d\xdc\x5a\x3f\xa4\xb3\xac\xa1\xde\xf3\x64\x92\x60\x40\xba\x22\x88\x59\x10\xd7\x5c\xb1\x30\x7d\x36\x8d\xa3\x39\x9f\xc6\x4c\x46\x66\x12\xaa\xaf\xe6\xc2\x89\xf0\xb7\x99\x32\xaf\x45\xf3\xca\x3a\x03\x3f\x13\xa3\xdb\xed\x69\xf8\x23\x58\xcf\x44\x91\x2d\x65\x93\xae\x62\xd3\x68\xd8\xb9\x5f\x9d\xb0\x3c\x6d\xf6\x53\x2d\x71\xe7\x18\x2e\xf0\xf3\xcd\x9d\xc7\x35\xb3\xf8\x5b\x2e\x0a\x8f\x14\x80\xc7\x8e\x8c\x87\x7c\x91\xf8\x4e\x2c\xd2\x7a\xd1\xb6\xde\xd9\x2d\x1d\x4e\x37\xae\x4c\x02\x45\x55\x26\x0b\xd4\x01\x4b\x7a\x5a\x0a\xea\xbf\x9a\x1e\xbb\x36\x83\x24\xcd\x3b\x22\x66\xf7\x86\x76\xe0\x4a\x46\x3b\x4f\x13\xee\x7b\xdd\x64\x31\xc9\xaa\x50\x7f\xd0\xfb\xb3\xd5\x1a\x8d\xbb\xcd\x0b\x45\x1b\x55\x14\x8b\x05\x8f\x5b\x22\x09\xe2\x93\xea\x1e\x85\xa8\x64\xd7\x86\x8f\x25\x1e\x33\x51\xe1\x81\xe1\xd2\xe2\xbe\xb2\x86\x2c\x12\xc5\x13\x66\x12\x49\xd3\xe7\x13\x76\xc3\x5c\xb3\x4f\xe7\x4e\x13\xcf\x5b\x81\xe1\x42\xa5\x2f\x79\x10\x43\xeb\xed\x69\x12\x60\xf9\x7a\x87\xd6\xc6\x3a\x5f\xc1\x90\x32\xed\x60\x2a\x6a\x21\xed\xde\x47\x19\x02\xb6\xcc\x13\xad\x6c\x9c\x9e\x93\xae\x02\xc6\x2c\xa6\x47\xf7\xa4\xc8\x47\xc2\x1d\x52\x79\x02\x6b\x70\xbc\xbb\x67\x6f\x6f\x0b\xd1\x9f\xeb\xfb\xfb\x2a\x08\xca\xa5\x87\x54\xc4\xda\x0b\xaf\xee\x68\x08\xd5\x22\x87\x0a\x39\x2b\xa7\x72\x05\x69\xee\x40\xd3\xf3\xc0\x1e\x0d\x9b\x61\x88\x50\x1d\x75\x45\x60\xdd\xb0\x45\x18\x5b\xe8\xbb\x55\xa8\x1a\x22\x27\x82\xa9\x83\x22\x03\x1a\x03\xfd\xc2\xa3\x60\x17\x51\x89\xa1\x22\x4e\x10\x2d\x99\x1c\x89\xcd\xe6\x6f\xf2\xc4\x83\xec\xee\x49\xb9\xaf\xbd\xf0\x01\xaa\xf7\xd9\x51\x16\x3e\xad\xb4\x05\x8b\xa0\x2b\x62\xb0\x6e\xe8\xc0\x53\xf8\xb4\x71\xc4\x43\xd2\x90\xea\xaf\x1e\xd6\x7d\x22\x84\xaf\xb5\xbf\x6f\xbd\xb4\x20\x61\xa0\x2b\x23\x17\x23\x7b\xf4\x7b\x5f\x67\x4d\xf6\x60\xdd\x46\x0d\x5b\xe7\xd6\x85\x46\xe2\x2c\xb9\x8e\xf3\x9d\xd6\x33\x6c\x9b\xd1\x9b\x86\x80\x90\x87\x4c\x75\xa7\x98\xae\x37\xae\xf0\xd8\x84\xf8\x80\xa1\x72\x4e\xf5\x02\x46\xe4\xce\xd9\x22\xad\xdb\xc6\x9c\x23\x24\xce\x99\xef\x6b\x5c\xb4\x82\x6b\x2e\x45\x40\x09\x88\x1b\xbd\x2b\xe0\xe1\x5c\x04\x2c\xca\x12\x1c\x0c\x0f\x3b\x7a\x1e\xa4\x6d\x6f\x88\x0f\xa7\x42\x2e\x4e\xee\x6c\x3b\xa0\xde\x15\x65\xac\xd0\x7e\xc9\xaf\x99\xd7\x76\x62\xa7\xef\xc4\x73\xa8\x65\xa0\xa5\x05\xd3\x45\xa4\x52\x7d\x46\x3d\xc4\x8d\x1b\x4a\x16\xc7\xab\xd4\x44\x34\x3c\xfc\x40\x0b\xdd\xb8\x31\x79\xe6\x8b\xa6\xf8\x11\xea\xc6\xb8\x3d\xa7\x53\xaa\x48\x53\xba\x73\x34\xc2\x77\xe8\x52\x04\xbd\x1f\xe4\xf3\xaf\xb8\xc4\x70\xb4\xb8\xc5\xb5\xea\x71\xed\xc6\x4d\x57\x20\xfb\xfb\x90\xf7\x2c\x35\x6e\x6c\xc7\xee\xe2\x90\xf0\x15\x35\xf4\xdc\x92\xda\x30\xfb\xd9\x53\xb9\x16\xa9\xec\x84\x5a\x88\x0a\x61\x9b\x63\xea\x35\x9d\x6c\x5f\xd2\xa3\x9e\xd3\x23\x25\x56\xdc\x91\xef\x6e\x94\xf5\x8a\xaa\xbd\x65\xb1\x3b\x6f\x06\xd4\x18\x3a\x5c\xf6\xa5\xb8\xe6\x84\x9c\x3c\x98\xe1\xf7\x29\xf7\x59\xa4\x75\xde\x81\x9d\x51\xaf\xdd\x83\x6e\x6f\x04\x97\x43\xbb\x7b\x06\xa3\x73\x7b\x08\xcd\xee\xef\xef\xcf\xad\x81\x75\x00\x5d\xcb\x6a\xc3\xa8\x07\x6d\xab\x65\xb7\x2d\xb0\xdf\xc2\x7b\x6b\xf3\xb0\xa7\xb6\x13\x99\x78\x8e\x5d\x3a\xf6\x01\x11\x44\x7c\x36\xa7\x27\x9e\x58\x06\xbe\x70\x3c\xa0\x22\x87\xe8\x28\xd6\x16\x80\xa9\xf0\xd1\xbd\xb4\xc9\x09\x3c\x05\x68\x40\x15\x98\xda\xe7\x69\x12\xb8\x2a\x8e\xfb\x22\xa4\xb8\x65\xdb\x64\x2f\x97\x9a\xad\x56\xef\xb2\x3b\x1a\x5b\x17\x4d\x5b\xb7\x55\xc4\x96\xfa\x5c\x54\x17\x8c\x04\xd6\x8f\x32\x31\xc6\xaa\xd6\xea\x85\xc5\x35\x3c\xad\x2d\xc4\x04\x69\x85\x19\xf9\xb5\x74\x18\x08\x0f\xb1\x46\xe3\x22\xbc\x0e\x97\xe8\x84\xa1\x48\xa4\x9b\x59\xb2\x39\x68\x9d\xdb\xef\xac\x4d\xf4\xd8\xfd\xe6\xe6\x87\x2a\xb7\x06\x4e\xcd\x5b\x5d\x6c\x6a\x72\x49\x48\x7e\x36\xf3\xe5\x36\xa4\xba\x32\x55\x88\x8e\x42\x40\x9e\x2d\xa0\x45\xc9\x62\xc8\x07\x0d\x2a\x51\xb1\x8f\x01\x62\x77\x3a\xbe\x1b\x7f\xcd\x45\x53\xa3\xc6\x43\x87\xd8\xaf\x1f\xc5\x0b\x9c\xe6\x4b\xd4\x2a\x15\x37\xe1\xc3\xc5\x95\x47\x26\x94\x85\xcd\x45\x09\x35\xb2\x08\xf4\x43\xc9\x45\x56\x72\xba\x3d\x72\xb7\x1f\x32\x9f\xd6\xbc\x15\x16\xae\x6f\xa0\x9f\x6d\x25\x3e\xf7\x84\x57\x5a\xa2\x94\xb5\x4c\xbf\x5a\xba\xad\x66\xd6\x6a\x5a\xb9\x82\x64\xea\x54\x3a\xa6\x86\x14\x11\x68\x38\x74\xed\x28\x09\x32\x17\x22\x26\x5b\x9d\x5e\xdf\x1a\x8c\xd3\xf0\x5a\xfb\x71\x8d\x02\x21\xf7\xb1\x1c\x27\xea\x3c\x76\x6e\xd4\xf8\xaa\x1b\x10\x9c\x38\x0c\x83\x84\xd0\x48\x66\x44\x57\x3c\x1c\x2f\x1d\x8e\xb0\x3c\x1b\xa3\x77\xc6\x0a\x26\xc6\x18\x6d\xe8\xb9\x88\x5c\x49\x2d\xf6\x66\x16\x53\x39\xcb\x03\x6f\x4b\xc8\x3d\x24\xdb\xe9\x65\x97\xae\x46\x30\x33\xbb\x23\xfb\xad\x6d\x0d\x34\x54\x51\xdc\xab\x50\x47\x78\x49\xef\x30\x5a\x92\x61\x44\x63\x43\xd0\x0b\xec\xf8\x6b\x2a\x6f\x27\x5b\xc4\x47\xc4\x7d\xd4\xc6\x4b\x5c\x96\x67\x45\x3d\x6d\x18\x8e\xd3\x5b\xa1\xa3\x8a\x9e\x4f\xbf\x9c\x4e\x5f\x43\xa1\x8b\xde\x17\x41\xe8\xbd\xdd\xe9\xe4\x11\xe8\x0c\x01\x9a\xf2\xe1\xf2\xd2\x6e\xc3\x54\x8a\x45\x2e\xa3\x77\x20\x1b\x5a\x66\x08\xba\xe9\xd4\xa2\x46\x95\xc5\x4d\x28\xcd\x17\x8d\xc3\x17\x8d\x17\x2f\x9d\x5f\x8e\x5c\xe7\x98\x1d\x39\x47\xcf\x9c\x63\x3a\xd4\x11\x22\x44\x9a\x52\x24\x68\x50\xc2\x0f\x25\xf3\x01\xf5\x8b\x2b\x91\xe0\x5c\x1f\x83\x03\x97\x6d\xbb\x7d\x00\x8e\xa7\x80\x6c\x91\x65\xa5\x02\x77\x31\x85\x30\xc3\x8d\x3c\x06\x98\xeb\x5a\x50\xbc\xeb\x18\xe1\xc1\x3b\x20\x09\x8c\x5a\x3f\xca\x34\xca\xf1\x94\x5a\x97\xcc\xcb\x37\x90\x65\xde\x43\xb3\xd7\x88\x7b\x74\x77\x91\x24\xdc\x7b\xb8\x75\xdd\xd5\xad\x2b\x59\x6d\x17\xd4\xb4\x13\xc5\x88\x35\xf0\xe6\xcd\x1b\xa8\xee\x45\x0c\x3b\x77\x1e\xaf\xc0\x5d\xe0\x54\xd4\x06\x83\xd3\xa0\x96\x13\xe3\x96\xee\xcb\xd6\x43\xd2\x3e\x4d\x1b\xa4\x89\x3d\x25\xcb\x90\x27\x94\xfc\x07\x1a\xe4\x5d\x11\xae\xb0\xd3\x3e\x48\x1b\xee\xb9\xa3\x3a\x6e\xc7\xc7\xd8\x44\x61\x26\x4c\x6f\xe1\x8c\x2e\x4f\xd6\x63\x29\xa9\x70\xbb\xe5\x6a\x47\x6f\xf8\x09\xc7\x47\xf8\xbb\xd9\xe1\x13\xe9\xc8\x95\x79\xa1\xcc\xd0\x66\x74\xa7\x6a\xe6\x03\xee\x23\x64\x21\x67\xa6\x24\xef\x15\x80\x3c\x6d\xba\x78\x22\x61\xe9\x04\xb9\x54\x07\x55\x5a\xb6\xe8\x3f\xc2\xbd\xe9\x7d\x5b\xfc\x10\x49\x34\x87\x0c\xfa\x2f\xf0\x29\xe2\x45\x91\x13\x7c\x48\xcf\x7e\x22\xe9\x52\x9e\x1a\xff\xf5\x3d\x55\xfa\xe9\x21\x8e\xea\x51\x7b\x73\xc7\x80\x6d\x81\x14\xdc\xeb\x38\x58\x6a\xe7\x56\x7e\x28\x2e\x97\x24\xf3\x5a\xc2\xc7\x02\x73\xb2\xfb\xf1\xf0\xe8\xe8\xc3\xe1\xeb\xa3\xfa\x62\x97\x6e\x57\xd1\x39\x77\x57\x1a\xb4\x32\xf1\x13\x76\x77\xe1\x98\x16\x02\x51\x7c\x8c\xcf\xca\x25\xeb\xe2\xb2\xd3\x1c\xf5\x06\x5f\x68\xb2\xd6\xcb\x03\x6b\x78\xd9\x19\x0d\x31\x74\x03\x31\x4f\x42\x34\x74\xb3\xdb\x1e\xf4\xec\xb6\xbe\x06\xa6\x1e\x39\x32\x59\x2a\x3b\x02\xae\x73\xed\x65\x97\xb7\x08\x42\x75\xfa\x78\xb2\xaf\xc6\x40\x05\x2c\xaf\x30\xb5\xb0\x3f\xc1\xff\x1d\x98\xf0\x19\xec\x9c\x37\x5b\xbf\x1d\x80\x08\xfc\x15\xa8\xdb\x73\x5c\x90\x0c\xdb\x87\x38\x91\x01\xf3\xb2\xbb\xbc\x29\x97\x98\xc5\xf1\x52\xe0\x54\xe8\x8a\xc0\xc3\xd4\xb7\x21\x4a\xdc\x2b\xd5\xb7\xd8\x98\x63\x14\xbf\x57\x74\x27\xe9\xc0\xd2\x59\x81\x48\xe2\xdc\xbb\x81\x2d\xda\xbc\xa9\x36\xb4\x58\xad\x39\x43\x32\x18\xc2\xc8\x07\x39\x2f\x1d\x12\xad\xdf\xec\xda\x2d\xf8\x40\x10\x42\x2d\x3a\xf5\x54\x07\x10\x26\x71\x26\xcf\x12\xa7\x9e\x19\x64\x6a\x03\xa1\xec\x27\xba\xd6\xc6\x53\xe3\x14\xbd\xf7\xd4\x8d\x27\xc6\xe5\x5d\xe6\xb7\xd4\x22\xa2\x1b\xd1\x96\xea\x00\x1a\xcd\xd5\xa2\xd8\x45\x21\x42\x27\xe0\xee\x81\x82\xbd\x25\x65\xa9\xa3\x61\x95\x4a\x9d\x4a\xe3\x15\x2c\xb0\x84\xa1\x91\x92\xf0\x00\x02\xaa\x86\xd1\xe6\x0e\x29\x27\xcb\xad\xbe\x50\x38\xdc\xd2\xcd\x10\xce\xad\xb5\x58\x2a\x23\xaa\x82\x9a\x84\x35\xb8\x70\x56\x13\xa6\x38\x56\x3f\xaf\xa3\xf1\x36\xdb\x4d\xc1\x5f\xfd\x9c\x85\xd6\x2d\x5c\xa1\x38\x7a\x6e\x77\x85\x94\xcc\x8d\x75\x0e\x64\x8c\xce\x51\xad\xdd\x08\x96\xf3\x54\x09\x5f\xcc\x20\x72\x56\xd1\xab\x8f\x41\x71\xe3\x16\x7b\x65\x5b\xf4\xf5\xef\x21\xec\xd0\x07\x81\x70\x9f\x0c\x94\xbb\x09\x1e\x32\x86\xe0\xe8\xf3\x2b\x96\xda\x11\xc3\x2c\x10\x99\x1d\x7d\x16\xa3\x04\xae\x72\x37\x9d\xd6\xe1\x86\x07\xad\xc1\x00\xb9\xfd\x17\x6e\x53\x07\xb4\xdb\x36\xe8\x98\xa3\xb2\xc5\xe0\xdf\xa2\x5f\xaa\x60\x9d\x14\xac\x2b\x11\x2d\x12\x31\x77\x01\xbe\x6e\x42\xb1\x02\xd2\x18\x34\x71\x26\xab\x03\x74\x4f\x0e\x14\x6e\x23\xba\x62\x43\x9c\xca\x3b\x07\xe3\x38\x75\xab\x32\x7e\xe6\xc3\x94\xed\x0e\x34\xdb\xa7\x30\xc3\x3e\x31\xd2\xd3\x83\xd0\x37\x13\x78\x8a\x1a\x27\x25\x09\x1d\xf3\x14\x84\x42\xcc\x69\x8c\x20\x3f\x63\xf8\xa9\xd8\xd3\x96\xfd\x4b\x82\x99\xe2\xb1\x90\x61\x46\xe2\x69\xac\x2e\x9a\x78\x9c\x26\x3c\xd6\x16\xdf\xd7\x31\x0b\x4b\xac\xfb\x18\xae\x18\x0f\x2c\xd8\xf8\xca\xa1\xb2\x3a\xf1\xb1\x76\xab\xf5\xbc\xa8\x40\xa3\x5e\xb4\x56\x64\xc2\x5c\x07\xf3\x80\xea\x3a\x27\xde\x38\x5a\xc0\x24\x99\x91\x37\x4b\x8e\x37\x51\x72\x1b\x28\xb7\xa1\x65\x4e\x6b\x61\x17\xf3\x28\xce\x22\x30\xd5\x86\xd8\x5e\x23\x6d\x07\xf9\x1e\xe8\xdc\x16\x84\x35\x64\x86\x6b\x5d\x63\x8a\x18\xb1\x11\x69\x4e\xd7\x56\x3c\xe0\xd1\x1c\x73\x70\x22\x62\xb2\xba\xaa\xa8\x98\x8b\x07\x40\xe0\xe3\x85\xca\x78\x8d\x0c\xb5\xf4\x94\x25\x57\xda\x26\xce\xcc\xe1\xc1\xc1\xda\x3e\xe8\x29\x22\xe7\xf8\xb8\x83\xcf\x66\x9a\x77\xe6\xf1\x62\x68\xe7\x84\x27\xc8\x2b\x06\xc0\x5a\x9d\x5c\x04\xa8\x37\x36\x04\xac\xd8\x29\x91\x98\xe0\xfa\xd8\xeb\xa6\xfe\x1f\xb6\x06\x96\xd5\x1d\x77\x7a\xcd\x36\x76\x7c\x98\x02\x64\xc1\x88\x6e\x79\x68\x3b\xba\x24\x84\x68\x15\xd5\x26\x42\xc4\x63\x74\x7a\x88\xee\x66\xea\x2a\x86\x2e\x3c\x60\xf7\xa3\xdc\xa5\x3c\x28\x2d\xe7\x54\xa2\x29\x17\x8a\x04\x75\xc7\x50\x57\x2d\x83\xee\x85\x52\x60\x3e\x2e\xe7\xab\xeb\x37\xd9\x58\x68\x1b\x2f\xe7\x2b\xf5\x2e\x6a\xae\x3f\x50\x9f\x48\xa0\x15\x36\x15\xf0\xd6\x73\x16\x41\x3e\x03\x22\x5f\x2c\xff\x94\x95\xe5\x1f\xa4\xb0\x2a\xe9\x69\x02\xf9\xe8\xb2\x39\x7a\x9d\x61\xcc\xac\xb4\x48\xa9\x73\x68\x57\x6d\x5d\xf5\x54\x92\x24\x04\xda\x18\xca\x09\xce\xc3\xa8\xf3\xc6\xa1\xb5\x62\x92\x2f\x04\x6e\x2e\x3a\x97\xa8\x15\xfc\x1a\x8b\xc4\x9d\xe7\x63\x42\x04\x6e\xe6\xd8\x8d\x5a\x3c\xa0\xe2\x85\x18\x8d\xf2\x61\x8f\xf9\xa2\x51\x84\xa4\x3c\x07\x1c\xfd\x98\xfc\x29\x6f\xbb\x42\x91\x48\xb5\x92\x49\x40\x2d\x54\x0d\x7e\x17\xc9\xae\x24\xae\x88\xe9\x58\x8f\x57\x80\xa7\x23\x4c\xff\x7f\xff\xf3\x1f\xff\xca\xc3\xda\x61\xfa\xda\x8e\xee\x99\xb1\xf5\xb9\xfb\x5f\xda\x0a\x65\x6f\x5d\xda\xbf\x65\xf3\x48\x4b\xb5\xa1\x7a\x8c\x50\x38\x61\xa8\x09\x82\x5e\xd8\xc7\x8e\x7b\x45\x39\x3a\x45\xdf\xaa\x11\xc2\x31\x8f\xea\x2f\x0f\x0f\x8f\x1b\xcf\xcd\x67\xcf\x5f\xd6\xd5\xe4\x80\x6d\x82\x02\xac\x5c\x87\x30\x57\x5e\xc9\xc0\x0e\xd3\xfd\xaa\x5c\xda\x03\x1d\x93\xcf\xe8\x3a\x29\x8b\xe4\xba\x0e\xd9\x74\xa9\xfe\x1a\x54\x6d\x58\xbd\x56\x3e\x85\x7d\x8c\x08\x47\x8b\x9d\xbd\x37\xa3\x3b\x41\xc3\x08\x84\x91\xf0\x5c\x7f\x97\xbe\xe9\x5a\x2b\xa5\xa9\x7c\xe9\xb4\x7e\x13\xa1\x68\xd0\x3f\x1d\xe0\x7e\x8c\xb3\x47\x25\xdd\x6a\x34\x8e\x2a\x8f\x24\xd0\x78\x2c\x81\xfa\x63\x09\x1c\x3e\x92\x40\xfd\xe5\x63\x09\xbc\x78\x2c\x81\xe7\x8f\x25\xf0\xcb\x77\x12\x50\xfd\xf6\x77\x9e\xcd\xee\xa3\x8d\xc7\x10\x61\x37\xb1\x74\x8c\x4c\x8f\x45\x83\x5e\x68\x47\x1c\x91\x61\xf5\x28\x82\x33\x21\x66\x3e\xfb\x11\xf4\x10\xb9\x0d\xbe\x98\x19\x8e\x5c\x30\x67\xc2\x8d\xeb\xe7\x1b\x71\x29\xf8\xef\xe5\x65\xf3\xd4\xfe\xfe\xbc\xfc\x76\x6e\xe9\xbd\xcf\xbb\xb6\x66\xb6\x1e\xbb\x46\xcd\xc1\x99\x35\xda\xfc\xa3\x26\x6c\x58\x37\x12\xb8\xea\x10\xd0\x50\x65\x04\x7a\xae\x32\x62\x75\xb5\x85\x94\xff\x13\x00\x00\xff\xff\xc7\x3d\xce\x5f\x5a\x25\x00\x00")

func scriptsBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBash,
		"scripts.bash",
	)
}

func scriptsBash() (*asset, error) {
	bytes, err := scriptsBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.bash", size: 9562, mode: os.FileMode(420), modTime: time.Unix(1468316017, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.bash": scriptsBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.bash": &bintree{scriptsBash, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

