// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xc1\x8e\xd3\x30\x10\x86\xcf\xf6\x53\x0c\xd9\xa8\x02\x41\x13\xda\xbd\x81\xb2\x12\x54\xa5\x44\xea\xb2\x55\x43\x4f\x88\x43\x36\x99\x34\x16\x4e\x6c\xd9\x63\x75\x11\xec\xbb\xe3\x24\x4d\xd5\xb2\x42\x08\x6e\x9e\x19\xcf\xf7\x7b\x7e\xcf\x4e\xef\x4d\x5e\x62\x56\x18\xa1\xe9\xf9\x0b\xf8\xc1\x59\xe1\x8c\x84\x69\x65\xb3\x35\xd4\x44\xda\xbe\x89\x63\x93\x1f\xa2\xbd\xa0\xda\xdd\x3b\x8b\xa6\x50\x2d\x61\x4b\x51\xa1\x9a\x58\x62\x45\xb6\x16\x15\xa1\xb1\xb1\xd3\xfd\x31\x6e\x72\xeb\xe3\x31\x84\x1b\x38\x9e\x22\xc2\x46\xc3\x64\x02\x45\xdd\xa8\x12\x5e\x3e\x3c\x29\x44\xf1\x45\x46\xb4\x96\x72\x29\xbb\x8a\x69\x2e\x2e\xf3\x47\xce\x33\x24\xa7\x57\xd8\x0c\xcf\x5e\x2d\x6f\x93\x70\xc6\xd9\x22\x4d\xc2\x39\x67\x5b\xa5\x68\x93\x5b\x7b\x50\xa6\x4c\xc2\x6b\xce\x99\xa8\xe0\x0b\x04\xe1\x3c\x80\x24\x81\x80\x8c\xc3\x00\xbe\xbe\x05\xaa\xb1\xe5\x8c\x5d\xc1\x22\x05\x61\xa1\xcb\xbf\x82\x03\x42\xab\x0e\xd0\x22\x96\xa0\x8f\x14\x7f\xe9\x88\xb8\x0e\xe0\x99\x47\x9c\xb7\x33\x2c\x6a\x05\x53\x1c\xaa\x3f\xc1\xba\xd2\x87\x19\xec\xb1\x39\x4d\xd1\xbd\xce\x5f\x7c\x10\x04\xaf\xfd\x09\xa5\xc5\x53\xa2\x2b\x55\x82\x8f\xc9\x2b\xd8\x79\xa3\xc1\xd6\xca\xc9\x12\xe8\xbb\x46\x4f\xe9\xb4\xce\x5f\xf3\x47\x8d\x51\xc2\x03\xbd\x4d\x2b\x41\x1b\x27\xe5\xe0\xd2\x76\x79\x7b\xf7\x79\xd9\x1b\xf5\x7e\xfb\xee\xd3\xe2\x63\x6f\xd6\xfa\x6e\xf5\x21\x5d\x2f\x3b\x9f\x58\xf3\xad\x14\x06\xa6\x1a\xa2\xf1\x3b\xa5\xda\xdb\x98\x33\xbf\x00\xa0\x5d\xaf\x01\xe1\x1c\xe6\x37\x93\x99\x1f\x94\x10\xc1\xb7\x0d\x3a\x99\xbb\xf7\x1f\xeb\x24\xa6\xad\x38\x6e\xd3\x09\x3d\xfb\x0b\xda\x8e\xbd\x7e\x16\x1f\x9e\xe3\x67\xbf\xe3\x77\xba\xcc\x09\xff\x5b\xc0\xf5\xed\x4f\x25\x36\xaa\x4c\x07\x1f\xff\x01\xad\xfd\x26\x8f\xee\x5f\x10\x19\x7f\xfc\x15\x00\x00\xff\xff\x03\x7a\xef\xe7\x5e\x03\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 862, mode: os.FileMode(420), modTime: time.Unix(1465417036, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

