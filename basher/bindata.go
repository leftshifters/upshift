// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\x51\x6f\xd3\x30\x10\xc7\x9f\xed\x4f\x71\x74\xd5\x04\x82\x26\xb4\x7b\x03\x65\x12\x54\xa5\x44\xea\x58\xd5\x50\xf1\x80\x78\xc8\x92\x4b\x62\xe1\xc4\x96\x7d\x56\x86\x60\xdf\x1d\x27\x69\x4a\xcb\x84\x10\xbc\xf9\xee\x7c\xbf\xbf\xef\x9f\xcb\x5e\x97\x26\xcd\x31\xc9\x8c\xd0\xf4\xf4\x19\x7c\xe7\x2c\x73\x46\xc2\xac\xb0\xc9\x06\x2a\x22\x6d\x5f\x85\xa1\x49\xdb\xa0\x14\x54\xb9\x3b\x67\xd1\x64\xaa\x21\x6c\x28\xc8\x54\x1d\x4a\x2c\xc8\x56\xa2\x20\x34\x36\x74\xba\x3f\x86\x75\x6a\x7d\x3c\x86\x70\x0d\x87\x53\x40\x58\x6b\xb8\xbc\x84\xac\xaa\x55\x0e\xcf\xef\x1f\x15\x82\xf0\x2c\x23\x1a\x4b\xa9\x94\x5d\xc5\xd4\x67\x97\xf9\x03\xe7\x09\x92\xd3\x6b\xac\x87\x67\xaf\x57\x37\xd1\x74\xce\xd9\x32\x8e\xa6\x0b\xce\x76\x4a\xd1\x36\xb5\xb6\x55\x26\x8f\xa6\x57\x9c\x33\x51\xc0\x67\x98\x4c\x17\x13\x88\x22\x98\x90\x71\x38\x81\x2f\xaf\x81\x2a\x6c\x38\x63\x17\xb0\x8c\x41\x58\xe8\xf2\x2f\xa0\x45\x68\x54\x0b\x0d\x62\x0e\xfa\x40\xf1\x97\x0e\x88\xab\x09\x3c\xf1\x88\xd3\x76\x86\x59\xa5\x60\x86\x43\xf5\x07\x58\x97\xfb\x30\x81\x12\xeb\xe3\x14\xdd\xeb\xfc\xc5\x7b\x41\xf0\xd2\x9f\x50\x5a\x3c\x26\xba\x52\x21\xf8\x98\xbc\x80\xbd\x37\x1a\x6c\xa5\x9c\xcc\x81\xbe\x69\xf4\x94\x4e\xeb\xf4\x35\x7f\xd4\x18\x25\x3c\xd0\xdb\xb4\x16\xb4\x75\x52\x0e\x2e\xed\x56\x37\xb7\x1f\x57\xbd\x51\x6f\x77\x6f\x3e\x2c\xdf\xf7\x66\x6d\x6e\xd7\xef\xe2\xcd\xaa\xf3\x89\xd5\x5f\x73\x61\x60\xa6\x21\x18\x3f\xa7\x54\xa5\x0d\x39\xf3\x0b\x00\xda\xf5\x1a\x30\x5d\xc0\xe2\xfa\x72\xee\x07\x25\x44\xf0\x6d\x83\x4e\xe2\xee\xfc\x87\x75\x12\xe3\x46\x1c\xb6\xe9\x88\x9e\xff\x05\x6d\xc7\x5e\x3f\x8b\x0f\x4f\xf1\xf3\xdf\xf1\x7b\x9d\xa7\x84\xff\x2d\xe0\xfa\xf6\xc7\x12\x5b\x95\xc7\x83\x8f\xff\x80\xd6\x7e\x93\x47\xf7\xcf\x88\xec\xd7\x8e\xfa\x5f\x4c\xe2\xa7\x01\x5a\xf6\x01\xb4\x26\xd5\x1a\x0d\x7f\xf8\x19\x00\x00\xff\xff\x1b\xc8\xef\x11\x82\x03\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 898, mode: os.FileMode(420), modTime: time.Unix(1465419103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

