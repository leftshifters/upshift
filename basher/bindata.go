// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x5b\x6f\xd3\x4a\x10\x7e\xb6\x7f\xc5\x1c\x37\xaa\xce\xd1\xa9\xe3\x93\xf4\xf4\x05\x94\x4a\x25\x35\x69\x50\x4b\xa2\x38\x05\x21\x84\xd0\xd6\x3b\x8e\x57\x5d\xef\xae\xf6\xd2\xa4\x82\xfe\x77\xd6\xb7\xd2\x8b\x00\xc1\x9b\xe7\xb2\xdf\x37\xf3\xcd\x8c\x2f\xd5\x46\x13\x8a\x59\xae\x99\xb2\x7f\xff\x03\x5f\xc2\x20\x77\x9a\x43\x5c\x98\xec\x1c\x4a\x6b\x95\x79\x91\x24\x9a\x6c\x87\x1b\x66\x4b\x77\xe5\x0c\xea\x5c\x0a\x8b\xc2\x0e\x73\x59\x25\x1c\x0b\x6b\x4a\x56\x58\xd4\x26\x71\xaa\xf9\x4c\x2a\x62\xbc\xdd\x9b\x70\x0c\xdd\xd7\xd0\x62\xa5\x60\x7f\x1f\xf2\xb2\x92\x14\xfe\xdd\x3d\x0b\x0c\x93\x47\x1e\x26\x8c\x25\x9c\xd7\x11\x5d\x3d\x4a\x0e\xef\xc2\x30\x43\xeb\xd4\x0c\xab\xb6\xec\x59\x7a\x31\x19\x8c\xc2\x60\x3a\x9f\x0c\xc6\x61\xb0\x92\xd2\x2e\x89\x31\x5b\xa9\xe9\x64\x70\x18\x86\x01\x2b\xe0\x23\x44\x83\x71\x04\x93\x09\x44\x56\x3b\x8c\xe0\xd3\x4b\xb0\x25\x8a\x30\x08\xf6\x60\x3a\x07\x66\xa0\xf6\x1f\xc0\x16\x41\xc8\x2d\x08\x44\x0a\xaa\x43\xf1\x49\x1d\xc4\x61\x04\x7f\x79\x88\x87\xcf\x03\xcc\x4b\x09\x31\xb6\xd1\xaf\x60\x1c\xf5\x66\x06\x1b\xac\xee\xbb\xa8\xab\xf3\x89\x3b\x66\xe1\x3f\xff\x85\xdc\xe0\xbd\xa3\x0e\x15\x2c\xec\x9d\x7b\x70\xe9\x85\x06\x53\x4a\xc7\x29\xd8\x5b\x85\x1e\xa5\xe6\x7a\x58\xcd\x0f\x39\x7a\x0a\x0f\xe8\x65\x9a\x31\xbb\x74\x9c\xb7\x2a\xad\xd2\x8b\xc5\x3a\x6d\x84\x7a\xb5\x3a\x79\x3b\x3d\x6b\xc4\x3a\x5f\xcc\x5e\xcf\xcf\xd3\x5a\xa7\xa0\xba\xa6\x4c\x43\xac\x60\xd8\x8f\x93\xcb\x8d\x49\xc2\xc0\x2f\x00\x28\xd7\x70\xc0\x60\x0c\xe3\xe3\xfd\x91\x6f\xd4\x22\x82\x7f\xd6\xf2\x64\xee\xca\x0f\xd6\x71\x9c\x0b\xd6\x6d\xd3\x3d\xf4\xe8\x17\xd0\xa6\x7f\xeb\x7b\xf1\xe6\x43\xf8\xd1\x53\xf8\x4b\x45\x89\xc5\x3f\x26\x70\xcd\xf3\xe7\x14\x4b\x49\xe7\xad\x8e\xbf\x01\xad\xfc\x26\xf7\xea\x3f\x42\x0c\xbe\xef\xa8\x3f\x31\x8e\xef\x5b\xd0\x4d\x63\xc0\x56\x13\xa5\x50\x37\x39\x96\x68\x9b\xb1\xca\x71\x62\xa5\x6e\xb3\x4e\xd3\x77\xf3\x69\xcb\xbc\xcb\xb5\x13\x0d\x85\x76\x95\xbf\x3b\x03\xf1\xd6\xaf\xd9\x28\x82\xd1\x71\x42\xf1\x26\x11\xae\xa3\xae\xc1\xa6\xb2\x52\xcc\x0f\x60\x91\xb5\x40\xcb\xd5\xe2\x4d\x3a\x5d\x7f\x5e\x7f\x58\xb6\x70\xbd\x63\x79\xb2\x6e\x87\x9f\x4d\xcf\xd2\x8b\x76\xf6\x3d\xeb\xff\x4d\xef\x5d\xca\xd1\x4f\x9a\x7f\x1e\xb8\x72\x8c\x53\x1f\x31\x68\x21\x96\xa0\x98\xc2\x82\xb0\xe6\x84\x77\xb9\xa4\xd8\xc4\x21\x6e\xea\x6f\x8e\x31\x36\x79\x89\x55\x77\x38\x71\xc9\xfc\xcf\xa8\x44\xce\xdb\x3f\x52\x2a\x6e\x98\x96\xa2\x6e\xdb\x27\xd2\x6b\x60\xaa\x94\x02\x4d\x2f\x16\xc4\x14\x8d\x65\x82\x58\x26\x05\x44\xca\x3b\x0b\xa9\xab\xc9\x93\xb4\x03\x41\x2a\xf4\x6d\x45\x75\xbe\x66\x37\x48\x4f\x89\x25\x4b\x62\xcb\x27\x85\x77\xc3\x8b\x06\x47\xf5\x11\xef\x72\xa5\xd1\xda\xdb\xf0\xee\x5b\x00\x00\x00\xff\xff\x1b\x04\x33\x36\x27\x05\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 1319, mode: os.FileMode(420), modTime: time.Unix(1465462690, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

