// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x54\x5d\x4f\xdb\x4a\x10\x7d\xb6\x7f\xc5\x5c\x13\xa1\x7b\x75\x71\xdc\x04\x78\x69\x15\xa4\x34\xb8\x21\x15\x21\x51\x1c\x5a\x55\x55\x55\x2d\xf6\x24\x5e\xb1\xde\x5d\xed\x07\x09\x6a\xfb\xdf\xbb\xfe\xa2\x04\x44\x51\x79\xe9\x93\x77\xe7\xcc\x9e\xb3\x73\x66\xc7\x97\x72\xad\x48\x86\x49\xaa\xa8\x34\xff\xfe\x07\xdf\x7c\x2f\xb5\x8a\x41\xb8\xd2\xc9\x39\xe4\xc6\x48\xfd\x3a\x8a\x14\xd9\x74\xd7\xd4\xe4\xf6\xca\x6a\x54\xa9\xe0\x06\xb9\xe9\xa6\xa2\x88\x18\xae\x8c\xce\xe9\xca\xa0\xd2\x91\x95\xd5\x32\x2a\x88\x76\xfb\x76\x0b\x27\xd0\xac\xba\x06\x0b\x09\xfb\xfb\x90\xe6\x85\xc8\xe0\xff\xed\x23\xa0\x1b\xed\x44\x28\xd7\x86\x30\x56\x22\xaa\xd8\x49\xf6\x7f\xf8\x7e\x82\xc6\xca\x31\x16\xf5\xb5\xc7\xf1\x74\xd0\xe9\xf9\xde\x68\x32\xe8\xf4\x7d\x6f\x21\x84\x99\x13\xad\x37\x42\x65\x83\xce\xa1\xef\x7b\x74\x05\x9f\x21\xe8\xf4\x03\x18\x0c\x20\x30\xca\x62\x00\x5f\xde\x80\xc9\x91\xfb\x9e\xb7\x07\xa3\x09\x50\x0d\x65\xfc\x00\x36\x08\x5c\x6c\x80\x23\x66\x20\x1b\x16\x97\xd4\x50\x1c\x06\xf0\x8f\xa3\xb8\x7f\xdc\xc3\x34\x17\x10\x62\x8d\x7e\x07\x6d\x33\xb7\x4d\x60\x8d\xc5\x5d\x15\xe5\xed\x5c\xe2\x96\x1a\x78\xe5\x56\xc8\x34\xde\x05\x4a\x68\x45\xfd\x36\xb8\x07\x97\xce\x68\xd0\xb9\xb0\x2c\x03\x73\x2b\xd1\xb1\x94\x5a\xf7\x6f\xf3\xa4\x46\x2b\xe1\x08\x9d\x4d\x63\x6a\xe6\x96\xb1\xda\xa5\x45\x3c\x9d\x2d\xe3\xca\xa8\xb7\x8b\xe1\xc5\xe8\xac\x32\xeb\x7c\x36\x7e\x37\x39\x8f\x4b\x9f\xbc\xe2\x3a\xa3\x0a\x42\x09\xdd\xb6\x9d\x4c\xac\x75\xe4\x7b\xee\x01\x80\xb4\x95\x06\x74\xfa\xd0\x3f\xd9\xef\xb9\x42\x0d\x22\xb8\x63\xb5\x4e\x62\xaf\x5c\x63\x2d\xc3\x09\xa7\xcd\x6b\xba\xa3\xee\x3d\x43\xad\xdb\xb3\xae\x16\xb7\xbd\x4f\xdf\x7b\x48\x7f\x29\x33\x62\xf0\xc5\x02\xb6\x3a\xfe\x58\x62\x2e\xb2\x49\xed\xe3\x1f\x50\x4b\xf7\x92\x5b\xf7\x77\x18\xbd\x5f\x6f\xd4\x8d\x18\xc3\x8f\x35\xe9\xba\xda\xc0\x46\x11\x29\x51\x55\x39\x86\x28\x93\xd0\xc2\x32\x62\x84\xaa\xb3\x4e\xe3\x0f\x93\x51\xad\xbc\x4d\x95\xe5\x95\x84\xb2\x85\x9b\x3b\x0d\xe1\xc6\x3d\xb3\x5e\x00\xbd\x93\x28\xc3\x9b\x88\xdb\x46\xba\x24\x1b\x89\x42\x52\xd7\x80\x59\x52\x13\xcd\x17\xb3\xf7\xf1\x68\xf9\x75\xf9\x69\x5e\xd3\xb5\x81\xf9\x70\x59\x37\x3f\x19\x9d\xc5\xd3\xba\xf7\xad\xea\x51\x55\x7b\x93\x72\xfc\x9b\xe2\x1f\x03\x57\x96\xb2\xcc\x21\x1a\x0d\x84\x02\x24\x95\xb8\x22\xb4\x1a\xe1\x6d\x2a\x32\xac\x70\x08\xab\xfb\x57\xc3\x18\xea\x34\xc7\xa2\x19\x9c\x30\xa7\xee\x67\x94\x23\x63\xf5\x1f\x29\xe6\x37\x54\x09\x5e\x96\xed\x12\xb3\x6b\xa0\x32\x17\x1c\x75\x6b\x16\x84\x19\x6a\x43\x39\x31\x54\x70\x08\xa4\x0b\xae\x84\x2a\x06\x0f\xd2\x0e\x38\x29\xd0\x95\x15\x94\xf9\x8a\xde\x60\x76\x4a\x0c\x99\x13\x93\x3f\xb8\x78\xd3\xbc\xa0\x73\x5c\x0e\xf1\x36\x95\x0a\x8d\xb9\x2d\x7d\x1d\xaa\x34\x77\x07\x5f\xe6\x6b\x8b\x5d\x0c\xa7\x7f\xd5\xdd\x67\x8a\x0f\x49\x5d\xe4\x2e\xd6\x39\xea\x6e\xd3\x06\x81\xf6\xfb\x84\x4f\x3f\x03\x00\x00\xff\xff\x34\x32\x86\x02\x4f\x06\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 1615, mode: os.FileMode(420), modTime: time.Unix(1465465540, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

