// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\x41\x4b\xc3\x40\x10\x85\xcf\xd9\x5f\xf1\x4c\x4b\x51\xb4\x89\x7a\x54\xea\xa5\xa7\x82\x07\x31\x14\x04\xf1\x10\x93\x49\x77\x21\xc9\x2e\xbb\xb3\xa4\xa5\xf6\xbf\xbb\xa9\x4d\x69\x51\xf0\x36\xfb\x66\xe6\x7b\xf3\xd8\xa5\x59\xd9\xbc\xa4\xac\xb0\xca\xf0\xe5\x15\xb6\x22\x2a\xbc\xad\x31\xad\x5c\xf6\x0c\xc9\x6c\xdc\x43\x9a\xda\xbc\x4b\x56\x8a\xa5\xff\xf4\x8e\x6c\xa1\x5b\xa6\x96\x93\x42\x37\x69\x4d\x15\x3b\xa9\x2a\x26\xeb\x52\x6f\xf6\x65\xda\xe4\x2e\xbc\x87\x27\x9e\x70\xa8\x12\xa6\xc6\x60\x32\x41\x21\x1b\x5d\xe2\x7a\xfd\xab\x91\xa4\x67\x8a\x6a\x1d\xe7\x75\xdd\x77\x6c\x73\x36\x2c\x76\x42\x64\xc4\xde\xbc\x15\xc6\x12\xf3\xe6\xe7\xf6\xf9\x02\x33\x8c\xef\x44\xf4\xaa\x35\xbf\xe4\xce\x75\xda\x96\xbd\x74\x2f\x44\xa4\x2a\xbc\x23\x1e\x6f\xe7\x8b\x5d\x8c\xd9\x0c\x31\x5b\x4f\x31\x3e\x1e\xc1\x92\x5a\x11\x45\x23\x84\x7d\xe5\xd0\xeb\x37\xe8\x08\xad\xee\xd0\x12\x95\x30\x07\x54\x18\x1a\x28\xa7\x0e\x81\x77\x11\x78\xa7\xac\x88\x0a\xa9\x31\xa5\x3f\x46\xbf\xe0\x7c\x19\x7a\x19\x56\xd4\x1c\x33\xae\x0f\x41\xf6\xbb\x6b\xc5\xb8\x0d\x15\xd5\x8e\x8e\x42\x88\x15\x55\x4a\x0c\xe2\x08\xcb\xf0\x19\x70\x52\xfb\xba\x04\x6f\x0c\x05\x56\x6f\x7f\x7a\xed\x3f\x4e\x83\x51\xc0\xee\xbe\x03\x00\x00\xff\xff\x91\x17\x3f\x7f\x0b\x02\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 523, mode: os.FileMode(420), modTime: time.Unix(1465386919, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

