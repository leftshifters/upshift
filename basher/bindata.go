// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x7d\x72\xdb\xc6\x15\xff\x9b\x3c\xc5\x0b\xa5\xb1\xec\x96\x20\x44\x4a\x8e\xed\xd8\x72\x87\x21\x19\x99\x8d\x3e\x38\xa2\x94\x4e\xc6\xce\x68\x96\xc0\x92\xd8\x0a\xc0\x62\x76\x17\xa2\x38\xaa\x72\x83\x9e\xa1\xf7\xe8\xa9\x7a\x84\xbe\xb7\x0b\x90\x20\x25\x35\x4a\xe4\x66\x62\x49\xc4\xee\xfe\xf6\x7d\xbf\xdf\x03\x8f\xd9\x15\xff\x41\xc6\x21\x57\xfa\xe5\x2b\xb8\xad\xd7\x92\xab\x50\x28\xf0\x32\x68\xe5\x99\x8e\xc4\xd4\xf8\xb1\x9c\x69\xff\xa1\x85\x49\x2e\xe2\xd0\xaf\xdf\xd5\xeb\x17\xd9\x4c\xb1\x90\x8f\x03\x25\x32\xe3\x70\x82\x5c\xc5\xe0\x4d\xf5\xf8\x08\x22\x63\x32\xfd\x9d\xef\x2b\x36\x6f\xcd\x84\x89\xf2\x49\xae\xb9\x0a\x64\x6a\x78\x6a\x5a\x81\x4c\xfc\x98\x4f\x8d\xc5\x44\x31\xfc\x12\x3e\x61\x1a\x3f\xfb\x22\xd5\x86\xc5\x71\x4b\x47\xf0\x11\x8a\xb5\x96\xe1\x49\x06\x2f\x5e\x40\x10\x25\x32\x84\x3f\xdf\xdc\x5b\x68\xf9\x9b\x4f\x54\xb2\xb6\x89\xc4\x1e\x73\x93\x67\x87\x3c\x71\x12\x1f\x0e\x8e\x0f\xb6\xdb\xf5\x5a\x6f\x78\xb0\xdd\xa9\xd7\xce\xa4\x34\x23\xa6\xf5\x5c\xaa\xf0\x60\x7b\xaf\x5e\xaf\x89\x29\x7c\x86\xc6\x76\xa7\x01\x07\x07\xd0\x30\x2a\xe7\x0d\xf8\xe5\x3d\x98\x88\xa7\xf5\x5a\x6d\x0b\x7a\x43\x10\x1a\xe8\x79\x13\xe6\x1c\x52\x39\x87\x94\xf3\x10\xb2\x02\x05\x37\x15\x10\x7b\x0d\xf8\x06\x21\xaa\xc7\x6b\x3c\x88\x24\x78\xdc\xad\xfe\x03\x74\x1e\xe2\xc7\x31\xcc\x78\x02\x85\x09\x80\xa4\xc3\x8d\x37\xc2\xc0\x2e\xfe\xc5\x63\xcd\x97\x0f\x68\x69\x2a\xea\xe5\xc3\x2d\xb8\x40\x1b\x83\x8e\x64\x1e\x87\x60\x16\x19\x47\x14\xba\xab\x2a\xcd\xa3\x77\x94\x57\x20\x20\x9a\xe9\x50\x98\x51\x1e\xc7\xce\x4a\x67\x83\xe3\xd3\xf3\x81\x35\xd4\xf7\x67\xdd\x93\xde\x27\x6b\xac\xa3\xd3\xc3\x1f\x86\x47\x03\xb2\x53\xad\x12\x52\xf5\x1a\xfa\x1b\xb2\xdc\xe2\xc2\x76\x07\x3a\x1f\x5f\xb4\x51\x39\xc3\x39\xe0\x56\x87\x3d\xce\x27\xe8\xc4\x3c\xe6\xc3\x54\x14\xc1\xb3\x84\x6b\x3f\x00\xa7\xcb\xfd\x28\x33\x7e\xac\x42\xb6\x37\x21\x2f\xb2\x90\x19\xfe\xbb\x40\x73\x7b\xe4\x3e\xec\x48\x86\x43\x67\xa3\xdf\x80\xcb\x30\x22\x4b\x6b\xae\xa1\xd4\x0a\x98\x33\x9e\xc9\xc7\x04\xbb\x70\x21\xda\x93\xe9\x54\xcc\x1c\x96\xc2\xed\xa5\x54\x9e\x77\xcd\xd5\x44\x6a\xfe\x00\xb2\x8b\x66\xcc\xc3\x98\xff\xcd\x01\xaf\x6b\x69\x57\x60\xae\x58\x96\x71\x65\x0f\x18\xa6\xcc\x58\x24\x79\xcc\x8c\x54\xee\x48\x7f\xf0\xd3\xb0\xf7\x80\x52\x37\x81\xca\x53\xab\x96\xca\x13\x4c\x5b\x0d\xde\x1c\x43\xb5\xdd\x80\xf6\x47\x3f\xe4\xd7\x7e\x9a\x17\xea\x12\x72\x4f\x26\x99\x40\x87\x9e\x8e\x1d\xea\xe8\xec\xf4\xaf\x83\xde\xf9\xe5\xf9\xcf\x23\x87\x5d\x3e\x18\x75\xcf\x5d\x00\x8d\x7b\x9f\x06\xc7\x2e\x7e\x4a\x11\xf6\xad\x65\x8a\x2d\xaf\x37\xe4\xd1\xdc\x80\x27\x21\x13\x19\x9f\x32\x11\x53\x82\xdf\x04\x32\xe4\xb6\x26\x81\x67\x25\xb3\xa9\xea\xe9\x20\xe2\x49\x91\x56\x5e\x24\xb0\x4a\x45\x3c\x8e\x5d\xa9\x1a\xa4\xd7\x42\xc9\x94\x14\xc2\x8d\xe1\x15\x88\x2c\x92\x29\xd7\xa5\x4d\xc0\x0b\xb9\x36\x22\x65\x46\xc8\x14\x1a\x19\x3e\x9c\x4a\x95\x1c\x6c\x6c\x6b\xa6\x2c\xe1\x28\x70\x83\xf6\x2b\x71\xcd\xc3\x3e\x33\x6c\xc4\x4c\xb4\x51\x2c\x0b\x87\x35\xb6\x5f\x53\x8a\xdf\x04\x99\xe2\xc6\x2c\xc8\x62\x5d\x15\x44\x78\xf0\x8f\x59\xac\x5c\x3b\xe9\x1e\xff\x9f\xec\xf6\x1b\x6a\x79\xcc\x89\xbf\xbe\xb6\xbd\xdf\xba\x09\x8a\x15\x28\x7f\x3f\x6a\x81\xc1\x4d\x26\x95\xb9\x67\x00\xa7\x53\xbb\xaa\x53\xe7\xf7\xe9\xc4\x2d\x70\x61\xe0\xf2\xe3\x69\x46\x2e\xd5\xa3\x58\x68\x03\xad\x0c\xb5\xc3\xf4\xf2\xdd\x5a\x2b\xb3\x4f\x1f\x51\xaa\x5d\x51\xaa\x00\xbb\xb7\x43\x64\xac\x9a\xa0\xd6\xa0\xeb\xda\xfe\xc0\x4d\x10\x75\x53\xaa\x05\x4c\xa8\x91\x92\xd7\x42\xa3\x40\x22\x9d\xe1\xdf\x53\xcc\x9d\xa2\x1d\x6f\x61\xcd\xc6\xa6\x82\x0d\x53\x83\x16\xb3\x88\x9e\x84\x72\x9e\xc6\x92\x85\x40\x15\x46\xa4\x46\x2e\x15\x80\xa9\xb5\x09\x6d\x62\x69\x68\x5b\x0b\x50\xde\x52\xdd\x9f\xe6\x69\x60\xc3\x78\x24\x33\x0a\x5b\xfe\xd0\xa5\xf5\x5a\xb7\xd7\x3b\xbd\x38\x39\xbf\x1c\x1c\x77\x87\x47\xd6\xf0\x74\x2d\x15\x21\x46\xed\x3f\x87\xe5\xa3\x52\x8c\x4b\x12\xa3\x58\x58\x91\x04\xbf\x94\x09\x1f\x5e\xc3\x9f\x5a\x89\x9c\xe0\x05\x59\x79\x27\xac\x96\xff\xa7\x3c\xb6\x62\x3e\xbe\x5e\x1a\xe9\x10\x43\x80\x94\xbc\xb8\x18\xf6\x61\xaa\x64\x52\xc1\xdf\x5a\x12\x90\x19\xba\xb5\x60\x20\x96\x76\x24\x37\x99\xf2\xdf\x76\x76\xdf\x76\xde\xbe\x63\xdf\xee\x05\x6c\x9f\xef\xb1\xbd\xd7\x6c\x9f\x0e\x1d\x49\x99\x21\xa6\x92\x39\xea\x4a\x2a\xda\x0b\x9b\x80\x2d\x7c\x21\x73\xec\x99\x06\x18\x5c\xf4\x87\xfd\x26\xb0\xd0\xda\x3a\x01\x74\x05\x49\x61\xc3\x47\x4e\x21\x5b\x5a\x75\x2d\x5e\x2d\x09\xf0\x42\x68\xac\x8c\xe4\xaf\x33\x89\x73\x04\xd9\xf0\x29\x60\x4f\xd6\x46\x53\x97\x97\x79\x1a\x96\x06\x38\x98\x32\xd7\xf0\xb1\x2e\x95\xf7\x9d\x60\x35\xa2\x6e\xbf\x04\xbf\x67\xfd\xf7\xe8\x3c\x62\x0e\x79\x2e\x90\xdb\xbc\xf4\x73\xad\xfc\x58\x4c\xf8\x0d\x0f\x7c\x9b\x12\xdf\xe7\x61\xb8\x00\x2f\x80\x9d\x91\xc2\x08\xb3\x76\xdd\x01\x5b\xe8\xb5\x09\x11\xfb\xc3\x87\x0f\xb0\xfd\x52\x73\xa4\x79\xc2\x2c\x20\x48\xb0\x21\xf4\xc1\x13\x18\xeb\xb7\x15\x31\xee\x1a\x98\x07\xcb\xfe\xf0\xea\x55\x9d\x6e\xdd\x82\xe1\x94\x6c\x47\xbe\xb2\x5a\x35\x5d\xa4\x06\x32\x5b\x80\x30\xd6\xc4\xd8\x92\x23\xa6\xd3\x1d\x34\x72\xac\x38\x43\x61\x26\xdc\x6d\x11\x9c\xa8\x4b\xc9\xa4\x6e\x49\x85\xbb\x07\xe8\x54\x61\xe5\x29\xfc\xea\x1f\x89\x89\x62\x6a\xe1\x1f\x5b\x23\xf4\xf9\xb5\x08\xb8\x5f\x8d\xa6\x2f\x50\x9a\xd3\x2f\x00\xef\x85\x6b\x15\x19\x15\x18\xe3\x62\x6a\x62\x14\x77\x96\x4a\xc5\xdd\xe3\x8c\x4c\x35\xdd\xb4\x40\xe1\xb8\x92\x7e\x15\xc2\x7c\x49\x1b\xf6\x50\xc9\xe1\x2c\x7f\x24\xfd\xe9\x1c\xc5\x91\x8b\xe4\x22\x9d\xe9\xbf\x20\x23\x6d\xee\x99\xf7\xab\xa8\xb7\x2e\xff\x31\x3e\x4d\x67\xb0\xa1\xc6\xe7\xe2\xec\x2f\x24\xdd\x86\x16\x44\x3c\x6b\x9b\x91\x49\x44\xb8\x5e\x2e\x86\xd8\x2f\xeb\x2b\x02\xbc\xb6\xd3\xf2\x69\xda\xbd\x46\x87\x37\x59\x6e\x29\x5d\x3f\x0f\x91\x5f\xff\x8c\x29\x68\xc9\x35\x0a\x43\xe9\xa7\x25\xc6\x7c\x56\x51\x7a\x99\x7c\xd5\x4c\x28\xe4\x7d\x88\x30\x97\xf0\x9f\xf8\xa2\x69\x13\xbc\x8a\x8e\x9f\xd5\x53\xd1\x4b\x70\xc7\x9d\xb1\xc4\x2b\x29\xc2\x5e\xcc\x59\xba\x64\x7b\x45\x1f\xdb\xe4\x58\x2d\xdf\x71\xb4\x39\x04\xb4\xfd\x3e\x05\x2d\xc0\x2e\x52\xb1\x41\x44\x7f\x13\x30\x2f\x8f\x74\x37\x49\x69\x05\xb7\xa0\xb7\x7d\x6c\x9c\xb3\xa7\x43\x8b\xca\x29\xe4\xa7\xf8\x21\xb8\x32\x8a\x05\x0f\x50\xe8\xe2\x9e\xae\xd6\x3c\x99\xc4\xfc\xe9\x77\xb0\xe2\xc4\xd3\xf0\x8f\xd0\x93\x4f\xc7\x8e\xa9\xbe\x3d\x06\x65\x29\x72\x17\xfb\xe6\x35\x56\xb9\x82\x98\x74\x7b\x3f\x76\x0f\x0b\x8a\xdc\x1d\x9e\x5c\x76\x7b\xe7\xc3\x9f\x86\xe7\x3f\xdf\x27\x26\x2c\x9c\xe0\x04\x86\x6c\x13\x58\x02\x9a\xa0\xc0\x4b\xf1\x02\xa2\x08\xb8\xb9\x22\x31\xc3\xe6\x1c\x0d\xaa\x4c\x7c\x1d\xaa\x5e\x53\x3c\xec\xc9\x18\xe3\xf0\x60\xe7\xcb\xee\xde\xde\xe7\xdd\xf7\x7b\xed\x64\x87\x68\x3d\xd6\xc5\xcd\x95\x0e\xad\x4c\xe2\x9c\x6f\x2e\xec\xd3\x42\x2a\xd7\x1f\xe3\xb3\x7a\x6d\x70\x7c\x71\xd4\x3d\x3f\x3d\x7b\x84\x70\x2d\x97\xcf\x06\xe3\x8b\xa3\xf3\x31\x76\x8d\x54\x46\x79\x86\xb9\xdc\x3d\xe9\x9f\x9d\x0e\xfb\x97\x9f\x4e\x8f\x07\xbe\x91\x32\xd6\x3e\x2f\x34\x41\xe6\xc8\xae\x43\x37\x27\x74\x3e\xe2\xfc\xd7\xa6\x1f\x2f\xa8\x0d\x60\x93\x3b\xed\x9f\xc2\x77\xd8\xeb\x90\xdf\xe0\xff\x0c\x26\x62\x06\x5b\x9f\xd0\xbc\x4d\x90\x29\xd6\x56\xae\x94\x54\xb8\xa0\x38\xd2\x0f\x93\xab\x94\x87\x65\x15\x9d\x0a\x85\x2d\xd6\xcc\x25\x60\x0b\x92\x69\x88\x7d\x79\x88\x33\x5c\x70\x65\x79\xcf\x10\xdb\x1b\xb5\x8e\x2b\x1a\xc1\x19\xcc\xd9\x02\x64\x6e\x90\xb6\xc4\x9c\x67\xf0\xb0\x36\x1f\xb6\x3b\x4e\xac\x5e\xc4\x11\x06\xeb\x14\xde\x83\x37\xcf\x19\x89\x36\xea\x9e\x0c\x7b\xf0\x99\xfa\x3b\xa7\x8b\x51\xe6\x26\xce\xb5\xa6\x94\x67\x8e\x53\xc4\x0c\x4a\xb5\x81\xe6\x81\x5f\x28\x54\xf0\xd4\xa5\xe5\x53\x78\x83\x1d\xf0\xb1\x7e\x6f\x5e\x7e\x47\xdc\x10\xdd\x88\xb6\xb4\x07\xd0\x68\x81\x13\x65\xb8\x2e\x44\xc6\x52\x11\x34\x2d\x27\x99\x53\x83\x64\x8e\xf3\xd0\xcb\x14\xdb\x41\x17\x90\x70\x4c\x94\x10\x87\xc5\x26\xa4\xd2\xe0\xca\xf2\xa5\xc5\x6d\x45\x16\xbc\xd0\x9b\x61\x71\xad\x94\xdb\xb2\xfa\x11\xf1\x58\x6a\x31\xb7\x46\xb4\x4c\x33\xcf\x5a\x70\xcc\x16\x13\x6e\x6f\xdc\xbe\x5d\x46\xe3\x5d\xb9\x9b\x9a\xc4\xf6\x6d\x19\x5a\x77\x70\x85\xe2\x08\xdb\xc0\x03\xa9\x14\x0f\x8c\xab\x8e\xab\x32\xab\xf8\x8e\x86\x79\x54\x28\x11\xcb\x19\x68\xb6\xd0\xdf\x7d\x49\xd7\x37\x3e\x60\xaf\x72\x8b\xab\xb4\xbb\xb0\x45\x3f\x88\xff\x8c\xc8\x40\x95\x57\x20\x63\xce\x91\x97\xc4\xe2\x8a\x17\x76\xc4\x30\x4b\x65\x69\xc7\x98\x1b\x94\x20\xb0\xee\xa6\xd3\x2e\xdc\xf0\xe0\xe0\xec\x0c\x6f\xfb\x1d\x6e\xb3\x07\x9c\xdb\x56\xc4\xa4\x82\xf2\x80\xc1\x9f\xa2\x5f\xa1\x60\x9b\x14\x6c\x5b\x11\x07\x24\xe2\x03\x3d\x91\xaa\x3a\x4d\x41\x13\x36\xc1\xee\xb5\x7d\x5b\x29\x0a\x77\xb6\xee\x60\xcb\xaa\x3a\x07\xe3\xb8\x70\xab\x35\x7e\xe9\xc3\xe2\xda\x2d\xe8\xf6\xbf\x87\x19\x0e\x38\xda\x4d\x1f\xd2\x0e\x4b\x74\x6a\xce\x50\x22\x92\x84\x8e\x85\x96\x6a\x80\x11\x34\x86\x90\x9f\x31\xfc\x6c\xec\x39\xcb\xfe\x3d\xc7\x4c\x09\x79\xc6\x31\x23\xf1\x34\x12\x3b\x07\x6e\x8a\x84\x47\x5a\x17\xc7\x2e\x66\x61\x8e\xa4\x1c\xc3\x15\xe3\x81\xa7\x2b\x5f\x31\x6a\xb3\x58\xf6\x13\xb7\x5e\x15\x15\x68\xd2\xd3\x4b\x45\x26\x3c\x60\x98\x07\x44\xba\x05\xdd\x8d\xa3\x09\x60\x3f\x22\x6f\xda\x2a\x4c\x72\x7b\x28\xb7\xe7\x64\x2e\x68\xe8\x09\xe6\x91\x29\x23\xb0\xd0\x86\xae\xbd\x46\x6c\x86\xf7\x36\x5d\x6e\x4b\xaa\x35\x64\x86\x6b\xc7\xc5\xd6\x6b\xc4\x4a\x24\x24\xac\x58\x98\x52\x81\x25\x1f\x25\x92\x86\xac\x6e\xc9\x2c\xe6\x62\x13\xa8\xf8\x84\x99\x35\x5e\xa7\xac\x5a\x6e\x4a\x53\x0b\x67\x13\x36\x63\x22\x6d\x2e\xed\x43\x9c\x03\xe1\x58\x8c\x3b\xc4\x6c\xe6\xee\x2e\x3d\xbe\x1e\xda\x15\xe1\xa9\xe4\xad\x07\xc0\x52\x9d\x4a\x04\xd8\x17\x94\x54\x58\x71\x8c\x21\x31\x91\x71\x48\x5d\xd2\xa3\x71\xef\x6c\x30\x38\xb9\x3c\x3a\xed\xf6\x87\x27\x87\x98\x02\xab\x3e\x86\xdb\xd1\x25\x19\xe8\x85\x6e\x4d\xa4\x34\x97\xe8\xf4\x0c\xdd\xcd\xed\xab\x0d\x7a\x5f\x02\x3b\x5f\xd4\x0e\xe5\x41\x6d\x1e\x11\x95\xa5\x5c\x58\x07\x74\x64\xbd\x6d\xd9\xba\x1b\x43\x8a\xc2\xbc\x5f\xaf\xb2\xd0\x27\xd9\x58\x3a\x1b\xcf\xa3\x85\x7d\xf5\x1a\xb9\x1f\xa8\x8f\x96\x68\x85\x55\x07\xbc\x0b\x59\x92\x56\x33\x40\xc7\x72\xfe\x97\x92\xbe\x7e\x25\x85\x4b\x8e\x4b\x09\x14\xa3\xcb\x22\xf4\x3a\xc7\x98\x59\x38\x91\x0a\xe7\xd0\xae\xd6\xb2\xeb\xd9\x24\xc9\xb5\xa3\x9a\x39\xce\xd3\xa8\xf3\xca\xa1\xad\xf5\x24\x4f\x24\x6e\x5e\x77\x2e\xa1\xad\xf9\xd5\xc8\x3c\x88\xaa\x31\x21\xd3\xa0\x74\xec\x4a\x2d\x91\x52\xf3\xc2\x1a\x8d\xf2\x21\xfd\x79\xdb\x59\x2f\x49\xd5\x1b\xc6\x79\xc6\xd5\x37\x55\xdb\xad\x35\x89\x42\x2b\x95\xa7\xc4\x8b\x5b\x44\xcc\x77\x14\xdd\x8a\x35\x1d\xfb\xf1\x02\xf0\xb4\xc6\xf4\xff\xcf\xbf\xfe\xf9\xef\x6a\x59\xdb\x2d\xe8\x37\xfe\xab\x52\xdb\xe2\x8b\x84\xfe\x8f\xe5\x64\xdf\xb3\x13\x9f\x9b\xe9\x6d\x5d\xf0\xec\x38\x8f\xd3\xbc\x65\x82\x94\x93\x53\xf4\xa5\x9d\xe7\x99\xbf\xd7\x7e\xb7\xbb\xbb\xdf\x79\xe3\xbf\x7e\xf3\xae\x6d\xc7\x78\xa4\x05\xb6\x40\x55\x18\x41\x64\xbd\x50\x16\x37\x4c\xef\xab\x7a\xed\x25\xb8\x18\x7c\x4d\x6f\x8f\xca\xc8\x6d\xbb\x10\x2d\x96\xda\xef\xc1\xf6\x82\xc5\x7b\xeb\x43\x78\x85\x11\xc0\x9c\xd8\xe5\xeb\x59\x7a\x85\xe8\x79\xa9\xf4\x72\x71\x9f\x57\x2f\x95\x72\x28\x8f\x9d\xb6\x6f\x53\x1c\x06\xfe\xc6\x21\xc3\xe0\xf0\xdf\x28\xb6\x7a\x9d\xbd\xc6\x33\x01\x3a\xcf\x05\x68\x3f\x17\x60\xf7\x99\x00\xed\x77\xcf\x05\x78\xfb\x5c\x80\x37\xcf\x05\xf8\xf6\x0f\x02\x58\x7e\xfd\x07\xcf\x96\xaf\xaf\xbd\xe7\x80\xf0\x1b\x1c\xbe\xbc\x52\x8f\xa4\x43\xdf\x4e\x68\x81\x95\x60\xf1\x2c\xc0\x99\x94\xb3\x98\x7f\x0d\x3c\xac\xd4\x9e\x48\x66\x1e\x53\x09\x67\x13\xe1\x5d\xbf\x59\x89\x4b\xc1\x6f\xbf\xae\xac\x7c\xc9\xb2\xf1\xb5\xe7\xaf\x7e\xf9\x22\xb7\x5e\x73\xb5\x74\xf5\xc4\x0f\xdc\xd7\x32\x77\xff\x0d\x00\x00\xff\xff\xac\x12\x75\xf9\x36\x1d\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 7478, mode: os.FileMode(420), modTime: time.Unix(1466905698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

