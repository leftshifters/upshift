// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x5a\x7d\x72\xdb\xb8\x15\xff\x5b\x3a\xc5\x5b\xd9\x13\xc7\x59\x53\xb4\xe4\x64\xf3\xe9\x74\x14\x49\x49\xd4\xb5\x2d\x8d\x25\xa7\xb3\x93\x64\x3c\x10\x09\x49\xa8\x49\x80\x05\x49\xcb\x6a\xea\xbd\x41\xcf\xd0\x7b\xf4\x54\x3d\x42\xdf\x03\x48\x89\x94\xe5\xc4\x59\x67\x3b\x6d\x12\x11\xc0\xfb\xfe\xf8\x3d\xa0\xc7\xec\x82\xbf\x55\x81\xcf\x75\xfc\x70\x17\xbe\x54\x2b\xe1\x85\x2f\x34\x38\x11\xd4\xd3\x28\x9e\x89\x49\xe2\x06\x6a\x1a\xbb\x9b\x16\xc6\xa9\x08\xfc\xd2\x4a\xa4\xc5\x25\x4b\x78\xf5\xba\x5a\x3d\x8b\xa6\x9a\xf9\x7c\xe8\x69\x11\x25\x96\xb4\x97\xea\x00\x9c\x49\x3c\x3c\x82\x59\x92\x44\xf1\x0b\xd7\xd5\x6c\x5e\x9f\x8a\x64\x96\x8e\xd3\x98\x6b\x4f\xc9\x84\xcb\xa4\xee\xa9\xd0\x0d\xf8\x24\x31\x6c\x50\x32\x37\xe7\x18\xb2\x18\x7f\xbb\x42\xc6\x09\x0b\x82\x7a\x3c\x83\xd7\x90\xad\xd5\x13\x1e\x46\xf0\xe0\x01\x78\xb3\x50\xf9\xf0\xf3\xd5\x8d\x85\xba\xbb\xfe\x45\x87\xa5\x4d\x24\xf6\x90\x27\x69\xf4\x46\xf3\xf9\x48\xa9\xc0\x8a\x3d\xea\xf7\x8f\x0e\xb7\x1b\xd5\xca\x18\x3f\x43\xc6\x1b\xe8\x03\xbf\x12\x09\xec\x2f\x8f\xbd\xe3\xa1\x3d\xf1\xae\x7b\x6c\x0e\xb4\x7b\x87\xdb\xcd\x6a\xe5\x54\xa9\x64\xc0\xe2\x78\xae\xb4\x7f\xb8\x7d\x50\xad\x56\xc4\x04\x3e\x42\x6d\xbb\x59\x83\xc3\x43\xa8\x25\x3a\xe5\x35\xf8\xfc\x12\x92\x19\x97\xd5\x4a\x65\x0b\xda\x3d\x10\x31\xd0\xf7\x3d\x98\x73\x90\x6a\x0e\x92\x73\x1f\xa2\x8c\x0a\x6e\xca\x48\x1c\xd4\xe0\x27\x24\x51\x3c\x5e\xe1\xde\x4c\x81\xc3\xed\xea\xbf\x20\x4e\x7d\xfc\x39\x84\x29\x0f\x4b\xd2\x57\x72\xf9\xf1\x1f\x41\xcc\x97\x1f\x68\x69\x22\xaa\xf9\xc7\x2d\x38\x43\xd7\x40\x3c\x53\x69\xe0\x43\xb2\x88\x38\x52\x21\x5e\x45\x69\x6e\xe5\x91\xb3\x40\x82\x68\xa6\x77\x22\x19\xa4\x41\x66\xd7\xd3\xee\x71\x7f\xd4\x35\x86\x7a\x73\xda\x3a\x69\xbf\x37\xc6\x3a\xea\xbf\x7b\xdb\x3b\xea\x92\x9d\x2a\x85\xe0\xac\x56\x30\x4c\x20\x4a\x0d\x5d\xd8\x6e\x42\xf3\xf5\x83\x06\x2a\x97\x70\x0e\xb8\xd5\xd2\x1e\xa6\x63\xf4\x7d\x1a\xf0\x9e\x14\x59\xcc\x2d\xc9\x35\x36\x90\x8b\xf3\xfd\x28\x33\xfe\x2c\x92\x6c\xac\x93\x3c\x8b\x7c\x8c\xec\xef\x22\x9a\x9a\x23\x37\xc9\x0e\x94\xdf\xb3\x36\xfa\x06\xb9\x08\x03\x39\xb7\x66\x89\x4a\x25\x23\x73\xca\x23\x75\x9b\x60\x67\x36\xb2\xdb\x4a\x4e\xc4\xd4\xd2\xd2\xb8\x3d\x97\xca\x71\x2e\xb9\x1e\xab\x98\x6f\xa0\x6c\xa3\x19\xd3\x37\xe0\x7f\xb3\x84\xcb\x5a\x9a\x15\x98\x6b\x16\x45\x5c\x9b\x03\x09\xd3\xc9\x50\x84\x69\xc0\x12\xa5\xed\x91\x4e\xf7\x43\xaf\xbd\x41\xa9\x2b\x4f\xa7\xd2\xa8\xa5\xd3\x10\xb3\x3d\x06\x67\x8e\xa1\xda\xa8\x41\xe3\xb5\xeb\xf3\x4b\x57\xa6\x99\xba\x44\xb9\xad\xc2\x48\xa0\x43\xfb\x43\x4b\x75\x70\xda\xff\x6b\xb7\x3d\x3a\x1f\xfd\x36\xb0\xb4\xf3\x0f\x83\xd6\xc8\x06\xd0\xb0\xfd\xbe\x7b\x6c\xe3\x27\x17\xe1\xb1\xb1\x4c\xb6\xe5\xc9\x9a\x3c\x31\x4f\xc0\x51\x10\x89\x88\x4f\x98\x08\xa8\x2e\x5c\x79\xca\xe7\xa6\xba\x81\x63\x24\x33\xa9\xea\xc4\xde\x8c\x87\x59\x5a\x39\x33\x81\xc5\x6d\xc6\x83\xc0\x56\xb8\xae\xbc\x14\x5a\x49\x52\x08\x37\xfa\x17\x20\xa2\x99\x92\x3c\xce\x6d\x02\x8e\xcf\xe3\x44\x48\x96\x08\x25\xa1\x16\xe1\xc7\x89\xd2\xe1\xe1\xda\xb6\x3d\xc9\x42\x8e\x02\xd7\x68\x3f\x16\x53\xee\x77\x58\xc2\x06\x2c\x99\xad\x95\xdd\xcc\x61\xb5\xed\x27\x94\xe2\x57\x5e\xa4\x79\x92\x2c\xc8\x62\x23\xe4\xf3\x27\x9a\xeb\xca\x4b\xb0\x32\xde\x6e\x97\x1f\xa1\x7b\x82\xdb\x0b\x0a\x92\x56\x2d\xed\xcd\xd0\x1c\x7f\x4c\xb1\x7c\xed\xa4\x75\xfc\x27\x45\xc3\x37\x9c\xe5\x30\x2b\x7e\x79\x6d\xfb\x71\xfd\xca\xcb\x56\x20\xff\xfb\x56\xbf\x76\xaf\x22\xa5\x6f\x7a\xd6\xea\xd4\x28\xea\xd4\xfc\x3e\x9d\xb8\x21\x9c\x19\x38\xff\xd9\x8f\xc8\x59\xf1\x20\x10\xe8\x8a\xbc\xaf\xbb\x76\xad\x1e\x99\xaf\xb7\x28\xd5\x28\x28\x95\x11\x2b\xef\x28\x16\x1c\x63\xca\xb2\x9e\x6f\x79\xe2\xcd\x5a\x92\x6a\x1b\x13\x7a\xa0\xd5\xa5\x88\x51\x14\x21\xa7\xf8\xef\x09\xd6\x82\x0c\xa8\x6c\x61\x0f\xc2\x26\x89\xb8\x21\x86\x58\x4c\x67\xf4\xc5\x57\x73\x19\x28\xe6\x03\x55\x4c\x21\x13\xb5\x14\x1d\x26\xc6\x1a\xb4\x89\x49\xdf\xb4\x4a\xa0\x3a\x44\x7d\x6c\x92\x4a\xcf\x84\xe6\x40\x45\x14\x8a\x7c\x13\xd3\x6a\xa5\xd5\x6e\xf7\xcf\x4e\x46\xe7\xdd\xe3\x56\xcf\x02\x02\x62\x4b\x45\x95\x11\xfc\x49\x61\xf9\x29\x17\xe3\x9c\xc4\xc8\x16\x56\x20\xc9\x5d\xc2\xa4\x4a\x78\x09\x8f\xea\xa1\x1a\x23\x83\x28\xe7\xb9\x42\x51\x95\xaf\xca\x43\xa6\x12\xd2\xdf\xb0\xb6\xac\xbf\xdd\xa3\xfe\xa0\x7b\x7a\x9e\x09\x6e\x3b\xed\xd9\x49\xe7\xa8\x7b\xde\xeb\x74\x4f\x46\xbd\xb7\xbd\xee\xa9\x09\x17\x23\xb5\x11\x14\xbd\x8a\xdd\xd5\xb6\x97\xdb\x99\xe7\x1e\x78\x87\x91\x45\x16\x3c\x3b\xeb\x75\x60\xa2\x55\x58\x10\x7e\x6b\x09\xf2\xa6\x18\x2d\x19\xca\x33\xd0\x2e\xbc\x8a\xb4\xfb\xac\xb9\xff\xac\xf9\xec\x39\xfb\xe5\xc0\x63\x8f\xf9\x01\x3b\x78\xc2\x1e\xd3\xa1\x23\xa5\x22\xa4\xa9\x55\x8a\x22\x91\xfd\x0c\xc3\x3d\x40\xbc\xb3\x50\x29\x02\x8c\x04\x18\x9c\x75\x7a\x9d\x3d\x60\xbe\x71\x64\x08\xe8\x67\x92\xc2\x44\xa5\x9a\x40\xb4\x74\x59\x29\x0d\x0c\x62\x72\x7c\xa8\xad\x3c\xe0\x96\x61\xd7\x08\x89\xac\x05\x0c\x20\x80\x89\x93\x98\x20\x91\x4a\x8d\xb5\x0d\xe9\xc3\x09\xb3\xe8\x08\x0b\x59\xce\xef\x04\xcb\x17\x41\xa3\x25\xf1\x1b\xae\x7d\x89\x91\x41\x30\x2b\x4d\x05\x02\xc1\x87\x6e\x1a\x6b\x37\x10\x63\x7e\xc5\x3d\xd7\x64\xda\x9b\xd4\xf7\x17\xe0\x78\xb0\x33\xd0\x18\xbe\xc6\xae\x3b\x60\xba\x62\x9c\xf8\x48\xfb\xd5\xab\x57\xb0\xfd\x30\xe6\x08\xa5\x45\xb2\x00\x2f\xc4\xee\xd9\x01\x47\x60\x22\x7d\x29\x88\x71\x5d\xc3\x24\x5b\x36\xd3\xdd\xdd\x2a\x71\xdd\x82\xde\x84\x6c\x47\xbe\x32\x5a\xed\xd9\x34\xf0\x54\xb4\x00\x91\x18\x13\x23\x7e\x99\xb1\x58\xee\xa0\x91\x03\xcd\x19\x0a\x33\xe6\x76\x8b\xe0\x84\xf3\x72\xd8\xf9\x85\x54\xb8\xde\x80\x3d\x33\x2b\x4f\xe0\x77\xf7\x48\x8c\x35\xd3\x0b\xf7\xd8\x18\xa1\xc3\x2f\x85\xc7\xdd\x62\x34\x7d\x82\xdc\x9c\x6e\x46\xf0\x46\x2e\x14\x29\xa3\x02\x43\x5c\x94\x49\x80\xe2\x4e\xa5\xd2\xdc\x7e\x8e\xc8\x54\x93\x75\x0b\x64\x8e\xcb\xb1\x6a\x26\xcc\x27\x59\x33\x87\x72\xc0\x6b\xc0\x36\xe9\x4f\xe7\x28\x8e\x6c\x24\x67\xb5\x82\xfe\xe3\x45\xa4\xcd\x0d\xf3\xfe\x10\xf5\xca\xf2\x1f\xe3\x57\x39\x85\x35\x35\x3e\x66\x67\x3f\x93\x74\x6b\x5a\x10\x4a\xaf\xac\x47\x26\x4d\x0d\xd5\x7c\xd1\xc7\x06\x5b\x5d\x4d\x0b\xa5\x9d\x66\xf8\xa0\xdd\xa5\xd9\x61\x7d\x24\xc8\xa5\xeb\xa4\x3e\x0e\x23\xbf\x61\x0a\x9a\x49\x04\x85\xa1\xf4\x8b\x15\xc6\x7c\x54\x50\x7a\x99\x7c\xc5\x4c\xc8\xe4\xdd\x34\x5d\xe4\xe4\xdf\xf3\xc5\x9e\x49\xf0\x22\x75\xfc\xad\xef\x4a\x3d\x27\x6e\x07\x0d\xec\x1f\x5a\x09\xbf\x1d\x70\x26\x97\xd0\x38\x6b\x8f\xeb\x80\xb4\xee\x5a\x40\x3b\x07\x8f\xb6\xdf\xc4\xeb\x19\xb1\x33\x29\xd6\x50\xfb\x37\x09\xa6\xf9\x91\xd6\x3a\x82\x2f\xd0\xcd\x66\x81\x0e\xf6\xe3\xe9\xdd\x49\x8b\xc2\x29\x04\xf3\xf8\xc3\xbb\x48\x34\xf3\x36\xcc\x1b\x19\x9f\x56\x1c\xf3\x70\x1c\xf0\xbb\xf3\x60\xd9\x89\xbb\xd1\x3f\x42\x4f\xde\x9d\x76\x40\xf5\xed\x36\x52\x66\x9e\x68\x61\x53\xbe\xc4\x2a\x97\xe1\x9d\x56\xfb\xd7\xd6\xbb\x6c\x9e\x68\xf5\x4e\xb0\xab\x8d\x7a\x1f\x7a\xa3\xdf\x6e\xe2\x1d\xe6\x8f\x71\x5c\x45\x68\x0e\x2c\x84\x98\x48\x81\x23\x91\x01\x61\x13\xdb\xdb\x72\x89\x19\x76\xfe\x59\xb7\x38\xb6\x94\x49\x55\x2b\x9a\xfb\x6d\x15\x60\x1c\x1e\xee\x7c\xda\x3f\x38\xf8\xb8\xff\xf2\xa0\x11\xee\xd0\x0c\x84\x75\x71\x7d\xa5\x49\x2b\xe3\x20\xe5\xeb\x0b\x8f\x69\x41\xaa\xf2\x67\xfc\x56\xad\x74\x8f\xcf\x8e\x5a\xa3\xfe\xe9\x2d\x38\x6e\xb9\x7c\xda\x1d\x9e\x1d\x8d\x86\xd8\x35\xa4\x9a\xa5\x11\xe6\x72\xeb\xa4\x73\xda\xef\x75\xce\xdf\xf7\x8f\xbb\x2e\x61\xf2\xd8\xe5\x99\x26\x08\x48\xd9\xa5\x6f\x87\xaa\xe6\x6b\x1c\x96\x1b\xf4\xc7\x03\x6a\x03\xd8\xe4\xfa\x9d\x3e\xbc\xc0\x5e\x87\xe0\x09\xff\xcb\x60\x2c\xa6\xb0\xf5\x1e\xcd\xbb\x07\x4a\x62\x6d\xe5\x5a\x2b\x8d\x0b\x9a\x23\xb6\x49\x52\x2d\xb9\x9f\x57\xd1\x89\xd0\xd8\x62\x93\xb9\x02\x6c\x41\x4a\xfa\xd8\x97\x7b\x38\xf0\x7a\x17\x06\x54\xf5\xb0\xbd\x51\xeb\xb8\xa0\xfb\x0a\x06\x73\xb6\x00\x95\x26\x88\x2e\x02\xce\x23\xd8\xac\xcd\xab\xed\xa6\x15\xab\x3d\xe3\x48\x06\xeb\x14\xf2\x41\xce\x73\x46\xa2\x0d\x5a\x27\xbd\x36\x7c\xa4\xfe\x4e\x23\x01\x01\xbe\x3d\x88\xd2\x24\x97\x67\x8e\x23\xd7\x14\x72\xb5\x81\x06\x88\xcf\x14\x2a\x78\xea\x3c\xc3\x3c\x0f\xcd\x6d\x08\xd6\xef\x75\xe6\xd7\x04\x3c\xd1\x8d\x68\x4b\x73\x00\x8d\xe6\x59\x51\x7a\x65\x21\x22\x26\x85\xb7\x67\x30\xc9\x9c\x1a\x24\xb3\x98\x87\x2e\xac\x4c\x07\x5d\x40\xc8\x31\x51\x7c\x9c\xac\xf7\x40\xaa\x04\x57\x96\x37\x3c\x5f\x0a\xb2\x20\x43\x67\x8a\xc5\xb5\x50\x6e\xf3\xea\x47\xc0\x63\xa9\xc5\xdc\x18\xd1\xc0\xd8\x34\xaa\xc3\x31\x5b\x8c\xb9\xe1\xb8\xfd\x65\x19\x8d\xd7\xf9\x6e\x6a\x12\xdb\x5f\xf2\xd0\xba\x86\x0b\x14\x47\x98\x06\xee\x29\xad\xb9\x97\xd8\xea\xb8\x2a\xb3\x9a\xef\xc4\x30\x9f\x65\x4a\x04\x6a\x0a\x31\x5b\xc4\x2f\x3e\xc9\xf2\xc6\x0d\xf6\xca\xb7\xd8\x4a\xbb\x0f\x5b\xf4\x07\xe1\x9f\x01\x19\xa8\x70\x5f\x34\xe4\x1c\x71\x49\x20\x2e\x78\x66\x47\x0c\x33\xa9\x72\x3b\x06\x3c\x41\x09\x3c\xe3\x6e\x3a\x6d\xc3\x0d\x0f\x76\x4f\x4f\x91\xdb\x77\xb8\xcd\x1c\xb0\x6e\x5b\x01\x93\x02\x95\x0d\x06\xbf\x8b\x7e\x99\x82\x0d\x52\xb0\x61\x44\xec\x92\x88\x1b\x7a\x22\x55\x75\x1a\xae\xc6\x6c\x8c\xdd\x6b\xfb\x4b\xa1\x28\x5c\x9b\xba\x83\x2d\xab\xe8\x1c\x8c\xe3\xcc\xad\xc6\xf8\xb9\x0f\x33\xb6\x5b\xd0\xea\xbc\x81\x29\xce\x4d\xb1\x1d\x6d\x94\x99\xc1\xe8\xd4\x9c\xa1\x44\x24\x09\x1d\xf3\x0d\xd4\x80\x44\xd0\x8c\x43\x7e\xc6\xf0\x33\xb1\x67\x2d\xfb\xf7\x14\x33\xc5\xe7\x11\xc7\x8c\xc4\xd3\x08\xec\x2c\xf1\x24\x4b\x78\x84\x75\x41\x60\x63\x16\xe6\x08\xca\x31\x5c\x31\x1e\xb8\x5c\xf9\x8a\x51\x9b\xc5\xb2\x1f\xda\xf5\xa2\xa8\x40\x03\x64\xbc\x54\x64\xcc\x3d\x86\x79\x40\xa0\x5b\x10\x6f\x9c\x7b\x00\xfb\x11\x79\xd3\x54\x61\x92\xdb\x41\xb9\x1d\x2b\x73\x06\x43\x4f\x30\x8f\x92\x3c\x02\x33\x6d\x88\xed\x25\xd2\x66\xc8\x77\xcf\xe6\xb6\xa2\x5a\x43\x66\xb8\xb4\x58\xac\x5c\x23\x56\x22\x21\x60\xc5\xc2\x24\x05\x96\x7c\x94\x48\x25\x64\x75\x03\x66\x31\x17\xf7\x80\x8a\x8f\x1f\x19\xe3\x35\xf3\xaa\x65\x47\x40\xbd\xb0\x36\x61\x53\x26\xe4\xde\xd2\x3e\x84\x39\x90\x1c\x0b\x70\x87\x98\x4e\x2d\xef\xdc\xe3\xe5\xd0\x2e\x08\x4f\x25\xaf\x1c\x00\x4b\x75\x0a\x11\x60\x6e\x73\xa9\xb0\xe2\x18\x43\x62\x22\xe2\x50\x71\x0e\x8f\x86\xed\xd3\x6e\xf7\xe4\xfc\xa8\xdf\xea\xf4\x4e\xde\x61\x0a\xac\xfa\x18\x6e\x47\x97\x44\x10\x2f\xe2\xfa\x58\xa9\xe4\x1c\x9d\x1e\xa1\xbb\xb9\xb9\x07\xa2\x0b\x16\xd8\xf9\xa4\x77\x28\x0f\x2a\xf3\x19\x41\x59\xca\x85\x32\x41\x0b\xd6\x1b\x06\xad\xdb\x31\x24\x2b\xcc\x8f\xab\x45\x14\x7a\x27\x1b\x2b\x6b\xe3\xf9\x6c\x61\xee\xa9\x67\xf6\x0f\xd4\x27\x56\x68\x85\x55\x07\xbc\xf6\x59\x28\x8b\x19\x10\x07\x6a\xfe\x97\x1c\xbe\xfe\x20\x85\x73\x8c\x4b\x09\x14\xa0\xcb\x66\xe8\x75\x8e\x31\xb3\xb0\x22\x65\xce\xa1\x5d\xf5\x65\xd7\x33\x49\x92\xc6\x16\x6a\xa6\x38\xac\xa3\xce\x2b\x87\xd6\xcb\x49\x1e\x2a\xdc\x5c\x76\x2e\x51\x2b\xf9\x35\x51\xa9\x37\x2b\xc6\x84\x92\x5e\xee\xd8\x95\x5a\x42\x52\xf3\xc2\x1a\x8d\xf2\x21\xfc\x79\xd6\x2c\x97\xa4\x22\x87\x61\x1a\x71\xfd\x53\xd1\x76\xa5\x26\x91\x69\xa5\x53\x49\xb8\xb8\x4e\xc0\x7c\x47\x13\x57\xac\xe9\xd8\x8f\x17\x80\xa7\x63\x4c\xff\xff\xfd\xe7\xdf\xff\x2d\x96\xb5\xfd\x0c\x7e\xe3\xff\x8a\xd0\x36\x7b\xac\xe9\xfc\x9a\x4f\xf6\x6d\x33\xf1\xd9\x99\xde\xd4\x05\xc7\x8c\xf3\x38\xcd\x1b\x24\x48\x39\x39\x41\x5f\x9a\x79\x9e\xb9\x07\x8d\xe7\xfb\xfb\x8f\x9b\x4f\xdd\x27\x4f\x9f\x37\xcc\x18\x8f\xb0\xc0\x14\xa8\x02\x22\x98\x19\x2f\xe4\xc5\x0d\xd3\xfb\xa2\x5a\x79\x08\x36\x06\x9f\xd0\xa5\x54\x1e\xb9\x0d\x1b\xa2\xd9\x52\xe3\x25\x98\x5e\xb0\x78\x69\x7c\x08\xbb\x18\x01\xcc\x8a\x9d\xdf\x65\xd3\x9d\xa3\xe3\x48\xe5\xa4\xe2\x26\xae\x5e\x2a\x65\xa9\xdc\x76\xda\x5c\xd5\x58\x1a\xf8\x37\x0e\x19\x09\x0e\xff\xb5\x6c\xab\xd3\x3c\xa8\xdd\x93\x40\xf3\xbe\x04\x1a\xf7\x25\xb0\x7f\x4f\x02\x8d\xe7\xf7\x25\xf0\xec\xbe\x04\x9e\xde\x97\xc0\x2f\x7f\x90\x80\xc1\xd7\x7f\xf0\x6c\x7e\xdf\xed\xdc\x87\x08\xbf\xc2\xe1\xcb\xc9\xf5\x08\x9b\xf4\x94\x13\x0b\xac\x04\x8b\x7b\x11\x9c\x2a\x35\x0d\xf8\x8f\xa0\x87\x95\xda\x11\xe1\xd4\x61\x3a\xe4\x6c\x2c\x9c\xcb\xa7\x2b\x71\x29\xf8\xcd\x93\x70\xe1\x45\x6a\xed\xb5\xf9\x77\x37\xbf\x1f\xae\x56\x6c\x2d\x5d\x7d\x71\x3d\xfb\x86\x85\x24\xb2\x9c\x6e\x73\xc4\x56\x13\xe1\xa1\x50\xd9\x5d\xe4\x9b\xd6\xb0\xbb\x9a\x39\x97\x17\x64\x22\xa4\xfb\x67\x9a\xfd\x58\x84\xfd\xa3\xee\xa1\xa8\xce\x45\xe1\xf6\xe6\x57\xbe\xf0\x66\xd8\xff\x63\x7a\xe6\x16\xb2\x7e\x91\xfd\x06\x67\x04\xe6\x7e\x6e\x2c\xa4\x4b\x97\xe5\xb1\x98\x96\x3f\xe6\x3c\x36\x72\xf3\x45\x8c\xe8\x61\x9c\x12\x80\xab\x47\x8d\xe6\x8f\x66\x0a\xce\x00\x6a\xb5\x6f\xb3\xfe\x33\xf4\xa5\x57\x39\x04\x91\x09\x6f\x45\x51\x5f\xf6\x92\x54\xe6\x4e\xf8\x9e\x2b\xe7\xf2\xfb\xc5\x41\x15\xdb\xa0\xf2\x53\x6c\x9c\x85\x6b\x68\x0a\xb6\x28\x3a\xa7\xb1\xce\xbc\xb3\xd8\x20\x22\xe4\xd9\x1b\xb4\x94\x14\xa3\x6f\xb1\xc6\x6d\xab\x59\x3a\x12\x01\x0d\x67\xe6\x3c\x52\xa6\xf9\xcd\x50\x26\x6e\x8e\x88\x58\xf6\xae\xe3\xc4\x17\x22\x3a\x27\xe4\x8a\x8d\xf5\x1c\x13\xf7\xdc\xbc\x93\x9c\xa3\x7c\x1e\x62\x66\x82\x14\xe6\xd2\x6c\xf5\x80\x6a\x7a\x8e\xef\x0f\xe7\x18\xab\x43\x6c\xd5\x5e\x2e\x54\xeb\xb4\xfd\xbe\xf7\xa1\xbb\x9a\xed\x49\x9e\xe5\x8f\xd5\x7d\xf4\xa6\xb7\x13\xd7\x92\x4b\x23\xf2\x6b\xe9\x9e\x7a\x09\x4c\x7c\x9f\x84\x29\xb2\xcd\x6f\xc2\x91\x8f\x41\xbc\xdb\x0d\xdb\xfb\x53\xf9\x4f\x11\x81\xf3\x8f\xc2\x33\x4d\xb3\x4e\x2a\x23\xfb\xe5\xa7\x24\x8c\x70\xab\x0e\xd7\x37\xe1\xc7\x2c\x4d\x75\x69\x73\x59\x42\xfb\x98\xa7\x08\xfa\xd3\x95\xa9\x9e\x6c\x7e\x12\xda\x7c\xc8\x7d\x54\xf7\x17\x81\x18\xdf\x81\x7e\xbe\x95\xf8\xdc\x10\xde\x68\x89\x52\xd6\x73\xfd\xea\xd9\xb6\xba\x5b\xaf\x5b\xe5\x4a\x92\x99\x53\xf6\xc6\xb0\xd7\x1f\xf6\xa4\xa7\x39\xbd\xe0\xbe\x21\x87\x9f\xa4\xe1\x98\xeb\xcd\x8f\x6d\xd5\x0a\xe2\x9e\x50\x60\x29\x4b\x65\x82\xc0\x95\xde\xfd\x35\xbf\x74\xec\xbb\x58\x56\x21\x3d\x5a\xdc\x35\xff\xb7\x17\x5d\x26\xfa\xf5\xbb\xff\x9a\xbd\xfb\x6f\xbf\x7d\x93\x4a\x3f\xe0\x1f\x10\xc8\x61\x2a\xd7\x28\xb7\x7b\x72\xa2\xec\xeb\x1b\xdd\x54\x48\x3e\x2f\x12\xa5\x7a\x90\x4d\xc1\x05\xe9\xec\x0c\x8c\x9f\x6e\x48\x51\x8c\xa9\x35\x52\x45\x02\xcb\xc1\x7e\x7d\xcf\xc3\x87\x1b\x88\xfe\xdc\xd8\xdd\xb5\xe8\xb2\xf2\x35\x15\x87\x38\x35\xbf\x58\xd3\x10\xb6\xcb\x1c\xe8\xa1\xb5\xa8\x72\xcd\x5c\xce\x60\xd4\x43\x6f\x34\xc4\xda\x73\x16\xf3\xf8\x44\xc9\xee\x15\x0f\xe9\xfd\xdd\xd3\x0b\x3b\x2f\xd3\xa8\x42\xaf\x33\xd9\x7b\x86\xbd\x0d\xc1\x31\xbd\x5a\x61\x32\x9e\x73\x3d\x52\xab\xcd\x77\xf2\xc4\x57\xd9\xdd\x90\x72\xd7\x7a\xe1\x23\x6c\xdf\x64\x47\x37\xee\x8f\x6a\x1d\x02\xc1\x27\x58\x8b\xba\xf4\x44\x51\x7b\x04\x9f\x57\x8e\xf8\x9a\x34\xa4\xfa\x8b\xaf\xeb\x3e\xa6\xb7\x79\xa3\xfd\x4d\xeb\x99\x40\xff\x7f\x00\x00\x00\xff\xff\x72\x53\xcc\xf7\xf0\x25\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 9712, mode: os.FileMode(420), modTime: time.Unix(1467136046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

