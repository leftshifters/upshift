// Code generated by go-bindata.
// sources:
// scripts.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x3a\xeb\x72\xda\x48\x97\xbf\xcd\x53\xf4\x60\x57\x1c\x67\x2c\x30\x38\x99\x5c\x3d\x5b\x18\x88\xa3\x1d\x0c\x14\xe0\x6c\x4d\x25\x29\xaa\x91\x1a\xe8\xb5\xa4\xd6\xb6\x5a\xc6\x6c\xc6\xfb\x06\xfb\x0c\xfb\x1e\xfb\x54\xdf\x23\x7c\xe7\x74\xab\x41\x02\xe2\x64\xc6\x9e\x1f\x5f\x6a\xc6\xb1\xd4\xa7\xcf\xfd\xae\x8c\x58\xa2\x86\x9e\xe4\xb1\x7a\x7a\x44\xbe\x96\xf6\x98\x37\x17\xe4\xa0\x56\xda\x4b\x02\xc6\x62\x02\xbf\x04\x09\x71\x02\x5a\xba\x2b\x95\xd6\xb0\x75\x03\x7c\xd9\x1e\x0e\x1b\x17\xed\x33\x84\xef\xf4\x2e\xde\xbb\x9d\xf6\xf0\xec\xa0\xbe\x85\xa5\x6e\xb1\x90\xfa\xaf\x4f\x6a\xe4\x0f\xa2\x18\x23\x00\x07\x38\x2f\x24\xf5\x03\xf6\x1f\x92\xc6\x31\x93\x06\xeb\x4c\xbf\x22\x0b\xf3\x6e\x0d\xb4\x18\xd1\xe4\xda\x80\xf4\x1b\x83\xc6\xe5\xd0\xd2\x1d\xf7\x1b\xa3\x0f\x9a\xee\x25\xbd\x66\xef\x45\xe0\x33\x99\x94\xf6\x2a\x55\x83\x69\x41\xca\x07\xb5\xf2\x36\xe9\x21\x53\x69\x7c\xc1\x42\x83\xf2\xa2\x7d\xa9\xf1\x35\x5d\x8d\x69\x20\x84\xea\xd3\x24\x59\x08\xe9\x9f\x1d\x9c\x96\x4a\x7b\x7c\x4a\x3e\x01\xa6\x7a\x99\x9c\x9d\x91\xb2\x92\x29\x2b\x93\x2f\x6f\x89\x9a\xb3\xa8\xb4\xb7\xb7\x4f\x9a\x2e\xe1\x09\xc1\xf7\xc7\x64\xc1\x48\x24\x16\x24\x62\xcc\x27\x71\x86\x05\x80\x32\x14\xa7\x65\xf2\x13\xa0\xc8\x5f\x37\x1a\x73\x98\x39\xfd\x83\x24\xa9\x0f\x8f\xd7\xc4\x19\x92\x19\x0b\x09\x8f\x12\x45\x83\x40\xab\x14\x60\x6f\xb9\x22\x27\xf0\x1b\x0b\x12\xb6\x7a\x81\x47\x53\x5e\xb2\x2f\xf7\xc9\x55\xc2\x24\x49\xe6\x22\x0d\x7c\xa2\x96\x31\x03\x2c\x48\x2e\xcf\x90\x25\xb3\x45\xc3\x92\x00\x84\xa0\xa9\xab\x28\x3b\xfc\xd7\xd0\x56\x6a\xd9\x25\x0e\x75\x6f\xff\x56\xa5\xed\x22\x55\xd4\x5d\x5f\xf8\xae\x01\x31\x9a\xcb\xe2\x44\x6b\xaf\xe0\xae\xb1\xf0\x57\x36\xc8\xfb\x6a\x2d\xc3\x32\x60\xb1\xb8\x8a\x7d\xaa\xd8\x36\x22\xbc\x2b\xe1\x9c\xa4\x1a\x80\x38\xce\x0d\x93\x13\x91\xb0\x6d\x4c\x17\x5c\x0d\xd3\x49\x28\xfc\x34\x60\x6e\xc4\xd5\x36\xb2\x19\xb0\x9f\x58\x10\x60\x09\x1e\xef\xc5\xf2\x2d\xa6\x8a\x78\x32\xce\x76\x61\xea\xa7\x56\x39\x83\xf6\x65\x6f\x64\x6e\x9f\x0f\x1a\xdd\xa6\x89\xea\x15\xd2\x53\x83\x34\x4e\xb5\x9b\x42\x18\x17\xd0\x9d\x22\xba\x73\xc9\x16\x05\x7d\x8f\x7a\xbd\x8e\x46\x38\x81\x93\x82\x93\x67\x76\xca\x2e\x5d\xc5\x98\x2d\xd8\xae\x4b\xa9\x39\xda\x75\xc9\x9a\x7f\xe7\xb5\x68\x37\xb5\x8c\x52\x3e\xeb\x9e\xb7\x47\x0d\x7d\xd1\xed\x0e\x47\x8d\x4e\x67\x7c\x35\xe8\x9c\x95\xe7\x4a\xc5\xc9\x9b\x6a\x55\xd2\x45\x05\xe4\x9e\xa7\x93\x14\xbc\xd3\x13\x91\x62\x91\xaa\x78\x22\xac\x06\x6c\xaa\x92\x39\x9f\x2a\xf0\xa0\x6a\x1a\xeb\x5f\xab\x21\x4d\xe0\xb9\x9a\x11\xaf\x24\xf3\xf2\x2a\x1c\xbf\x22\xa1\xbb\xdd\x31\xf9\x18\xa4\x67\xa2\x48\x16\x43\xcb\x4b\x25\x44\xc7\x34\x19\x76\x90\x81\x1c\x15\xe0\x83\xfc\x4a\xd6\xf0\xe4\xc9\x13\xe2\xcd\xc1\x5d\xc8\xcf\xb7\x1b\xaf\x2b\xd5\xe2\xb3\x0c\x0b\xaf\x50\xab\xab\x3f\x43\x45\xa5\x1a\xf2\x30\x0d\xa8\x12\x59\x49\x69\xb5\x3f\xba\x4d\xe3\x57\xb7\x9e\x4c\x23\x8d\x5e\xa6\x21\x08\x03\x75\x29\x2b\x10\xb5\x5f\xab\x3e\xbb\xa9\x46\x69\x16\x80\x88\xb5\x29\xc2\x98\x43\xa0\xf4\x86\x59\xe1\x19\xf4\xfe\xbd\xdd\x1c\x8d\x47\xbf\xf7\x0d\x3a\xfb\x62\x55\x82\x86\xcd\x0f\xed\x4b\xe3\xab\x96\xea\xf3\x7c\x95\x7a\x01\x45\x91\x29\xe2\x08\x12\xf3\x98\x4d\x29\x0f\x50\xa0\x5b\x4f\xf8\x6c\x92\x72\xc8\x3a\x8e\x66\x46\xa7\x4e\x27\xf1\xe6\x2c\xcc\xd2\x9c\x33\xe7\xe0\x34\x73\x16\x04\xc6\x73\xda\xd1\x0d\x97\x22\x42\x19\x00\xd0\xbf\x26\x3c\x9e\x8b\x88\x25\x56\x72\xe2\xf8\x50\xaf\x79\x44\x15\x17\x11\x29\xc7\xf0\x72\x2a\x64\x78\xb6\x01\x76\x1c\xd1\x90\x01\x8f\x65\x84\x97\xfc\x86\xf9\x2d\xaa\x68\x9f\xaa\x39\xa9\x58\xb3\x1a\xc6\x4c\x98\x95\x0f\x5e\x60\xca\xbd\xf5\x62\xc9\x94\x5a\xda\xbe\xe0\x71\x35\x74\xeb\x29\x21\x82\x6f\xab\xe2\x31\xc4\x55\x00\x9e\x93\x09\x05\x69\x48\x6f\x0e\x1a\xf8\x6b\xb2\xd8\xb3\x6e\xe3\xf2\xf1\x6c\xfe\x1d\x93\x38\xd4\x70\x5c\x3c\x3b\x78\x5e\xb9\xf5\xb2\x13\x62\xff\xfe\xa6\xf5\xda\xb7\xb1\x90\xdb\xf6\x33\x62\x6c\x36\x58\xdf\x11\x83\x69\x5c\x99\x1a\xed\x63\x2f\x46\x93\x24\xfd\x80\x83\xc2\x2b\x31\x08\x04\x85\xa0\x6a\xce\x2a\xb1\x7e\xfb\x0d\x39\x6a\x39\x39\x32\x64\x45\x88\x7c\xfe\xd7\xda\x2b\x8a\xf6\x9e\x29\x6f\xde\x88\xb0\x74\x52\x2e\xfb\x52\xdc\xf0\x04\x58\xe1\xd1\x0c\x7e\x9f\x42\x5c\x27\x46\xe6\x7d\xc8\x81\xd0\x8d\x40\x8a\x4b\x48\xc2\x67\x73\x7c\xe3\x8b\x45\x14\x08\xea\x13\x4c\xe0\x3c\x52\x62\xc5\x3a\x99\xea\x92\x8d\x40\x34\xf2\x75\xfa\x24\x98\x53\xb0\x4d\x98\xa6\x91\xa7\x1d\xb0\x2f\x62\x74\x38\xb6\x8b\x68\x69\xaf\xd1\x6c\xf6\xae\xba\xa3\x71\xfb\xb2\xe1\x9a\x8a\x81\x64\xb1\x84\x03\x9f\xc4\x49\xc9\xea\x95\x65\x63\xac\x7b\x0c\x73\x10\xde\x90\x67\x95\x50\x4c\x00\x57\x6c\xd1\xaf\xb8\x03\x0b\xde\x47\x1a\xb5\xc2\x23\x7f\xc7\xd9\x2a\x53\xb6\x3b\xbd\x7e\x7b\x30\xce\x78\x34\xc5\xf8\xaa\xdb\xea\xb4\xc7\x6e\xab\xdd\x1d\xb9\xef\xdd\xf6\xc0\x38\x03\x32\xa8\x79\x02\x03\x66\x4d\xf5\x7d\xc4\xad\xb2\x2f\xc0\x89\x50\x59\x57\x57\x6e\x8b\x4c\xa5\x08\x73\xcc\xef\x13\x5b\x7a\x66\xe0\x18\x59\xed\xd1\x05\x27\xbc\x8d\x65\xf5\x55\xfd\xe4\x55\xfd\xd5\x6b\xfa\xcb\xa9\x47\x9f\xb3\x53\x7a\xfa\x82\x3e\xc7\x4b\x1d\x21\x62\xc0\x29\x45\x0a\x2c\xa1\xaa\x34\xc1\x63\x02\x75\x6f\x29\x52\x68\xd5\x14\xa1\xe4\xaa\xe5\xb6\x8e\x09\xf5\xb5\xcd\x42\x02\x26\x45\x2e\xb4\x03\x8a\x29\x89\xad\x8a\xb2\x6a\xe9\xf8\xa4\x5c\xa9\xae\xfc\xb5\xd8\xbe\x8e\xe0\xe2\x86\x3f\x10\xa8\xf0\x89\x4a\xb0\xa1\x14\xa9\xd6\xb0\x46\x77\x36\xa5\xa6\xb7\x84\x6c\x64\x69\x74\x21\x07\x61\x63\xb9\x42\xbe\x65\xce\xb7\x60\x78\x6c\x52\xd3\x94\x43\x43\xfd\xb4\x9a\x26\xb2\x1a\xf0\x09\xbb\x65\x5e\x55\x07\xd2\x79\xea\xfb\x4b\xe2\x78\xe4\xb0\x2f\xc1\x3b\xb5\x2e\x0f\x89\x2e\x60\x89\xf2\x01\xf7\xbb\x77\xef\xc8\xc1\xd3\x84\x41\xf9\xe5\x6a\x49\xbc\x10\x0a\x5d\x8b\x38\x1c\x8b\x70\x8e\x8d\x3b\x1c\x8c\x56\x75\xef\xe8\xa8\x84\x54\xf7\x89\x3b\x45\x7d\xa1\x7d\xb4\x54\xc7\xc6\xcb\x3d\x11\x2f\x09\x57\x5a\xad\xd0\xcd\xcc\x69\x12\x1d\x82\x62\x03\xc9\x28\x30\x33\x61\x06\x84\x33\xec\x92\x57\x2d\x07\x8a\x70\xb7\xa3\x87\xcf\xb4\x3c\x25\xff\x53\xed\xf0\x89\xa4\x72\x59\xbd\xd4\x4a\x68\xb1\x1b\xee\xb1\x6a\xde\x83\x3e\x13\xab\xce\x6a\x86\x70\xcb\xff\xf3\x98\x41\x80\x21\x1c\x46\x2a\x00\x76\x67\x91\x90\xcc\xbc\x8e\x51\x55\xd3\x4d\x0d\x64\x86\xb3\x9d\x7e\xc6\xcc\xe7\xa8\xac\x2f\xd9\x71\x41\x0f\x2d\x28\x3f\xde\x43\xdf\x31\xde\x9b\xa5\x02\xfc\xe3\xc5\x28\xcd\x96\x7a\x1f\x45\xbc\x22\xff\x97\xf0\x36\x9a\x91\x0d\x31\x3e\x65\x77\xbf\x20\x77\x1b\x52\x60\x23\xb6\xb7\xe9\x99\xd8\x01\x96\xec\xa1\x0f\x55\xb2\xb4\x9e\xba\x0a\x90\xba\x61\x44\xe8\xc2\x0c\xb6\x39\x50\x59\xee\x5a\xa9\x0f\x43\xdd\xef\x10\x76\x7a\xa2\x03\x66\x30\xe4\x12\x01\x3e\x1f\xe7\x84\x5e\x05\x5c\x3e\x12\x32\x7e\x77\xcd\x66\x16\xfd\x07\xb6\x3c\xd6\x41\x9d\xc7\x0e\xcf\xf2\x47\xb1\x5b\xe4\x66\x3e\x83\xf2\x20\x05\xf7\x75\xd7\xd8\x80\xdc\x7d\x03\xd1\x62\x97\x0c\xcd\xdf\xec\x76\x03\xf2\x74\x17\x32\xe2\xc8\xfd\xe8\x8e\x7e\xd7\xc9\x8f\xfa\x13\x98\x13\xa1\x1b\x23\x34\x24\x09\xde\x26\x4e\x04\xa9\x10\xab\x96\x49\x85\x19\xe6\x0e\x85\x9a\x30\x6f\xe7\xfb\xd1\xd2\x9e\x64\x7e\x53\x04\xc0\xf4\xd9\xe1\xe7\x93\xd3\xd3\x4f\x27\x6f\x4f\x6b\xe1\x21\xee\x3e\x20\x88\x36\x4f\xea\x78\x32\x09\x52\xb6\x79\xf0\x1c\x0f\x22\x51\x7c\x0d\xef\x4a\x7b\xed\xcb\xab\x4e\x63\xd4\x1b\x7c\xa3\x8c\xaf\x8e\x07\xed\xe1\x55\x67\x34\x84\x14\x13\x89\x79\x1a\x83\xe1\x1b\xdd\xd6\xa0\xe7\xb6\xc6\x1f\x7a\x97\xed\x2a\x76\x61\x49\x95\x65\xbc\x43\x3f\x42\x6f\x7c\xbb\x4d\x81\xe9\xab\x86\x3f\x9e\x60\xce\x80\x8c\xd8\x6b\xf5\xc8\x1b\x48\x8c\x50\x48\xe1\x3f\x4a\x26\x7c\x46\xf6\x3f\x80\x0e\x8f\x89\x88\x20\x10\x99\x94\x42\xc2\x81\x64\x50\xe7\x54\x2a\x23\xe6\xdb\x90\x9b\x72\x09\x39\x58\x2d\x04\x81\x7c\x25\x22\x1f\x12\xb7\x0b\xa3\xa3\x77\xad\x0b\xac\x0b\xb9\x10\xf3\xcc\x35\x2e\x09\x28\x59\xd0\x25\x11\xa9\xca\xed\x96\x76\x48\xf3\xee\xa0\x6e\xd8\x6a\xce\x19\xa0\x01\xa7\x06\x3a\x40\x79\x41\x91\xb5\x7e\xa3\xeb\x36\xc9\x27\x2c\x00\xd8\x04\x62\xf1\x3f\x86\xa9\x52\x59\x7e\x16\xd0\x57\xcf\x88\x15\x9b\x60\xcb\xf8\x05\xfd\x01\x6e\x8d\xb3\xa2\xf8\x54\xaf\x20\x20\xd8\x37\x89\xdf\x61\x13\x02\x66\x04\x5d\xea\x0b\xa0\x34\xcf\xb0\xe2\x16\x99\x88\x69\xc4\xbd\x63\x5d\xb4\x16\x98\x4d\xa9\x29\x8a\x38\x67\xe9\x74\xbb\x24\x21\x4b\x12\x50\x52\x1a\x1f\x93\x48\x28\x38\x59\xcf\x71\x39\x5e\x80\xa0\x33\x83\x48\xcc\xc5\xa6\x0d\x15\xac\x52\x2b\x29\x16\x5a\x89\xba\xa5\x49\xe3\x0a\xb9\xa4\xcb\x09\xd3\x14\x0f\xbe\xae\xbc\xf1\xce\x42\x63\x46\x39\xf8\x6a\x5d\xeb\x8e\x5c\x03\x3b\x5c\x67\x7b\x4f\x48\xc9\x3c\x65\x42\x69\x1d\x93\x92\x1d\x26\x64\x31\xcf\x84\x08\xc4\x8c\x24\x74\x99\xbc\xf9\x1c\x15\x01\x77\xe8\xcb\x82\x98\xb0\x3c\x21\xfb\xf8\x03\x8b\x65\x1f\x15\x94\x5b\xcd\x0c\x19\x83\x22\x16\xf0\x6b\x96\xe9\x11\xdc\x2c\x12\x56\x8f\x01\x53\xc0\x81\xa7\xcd\x8d\xb7\x8d\xbb\xc1\xc5\xf6\x60\x00\xd4\xfe\x84\xd9\xf4\x05\x63\xb6\x75\x15\xcb\x61\xd9\xa1\xf0\x1f\x91\x2f\x13\xb0\x86\x02\xd6\x34\x8b\x6d\x64\x71\x47\x02\x6d\x40\x52\xc1\x46\x7b\x42\x27\x90\xea\x0e\xbe\xe6\x92\xc2\x9d\xce\x34\x90\xdf\xf2\xc6\x01\x3f\xce\xcc\xaa\x95\x6f\x6d\x98\x91\xdd\x27\x8d\xd6\x39\x99\x41\x0f\x9d\x98\x36\x57\xe8\x7e\x1c\x6f\x2d\x28\x70\x84\x9c\xe0\x35\x5f\xd7\x25\xa2\x38\xf6\xbb\x68\x67\x70\x3f\xed\x7b\x46\xb3\xff\x99\x42\xa4\xf8\x2c\x66\x10\x91\x70\x1b\xba\x00\x83\x5c\x65\x01\x0f\x3d\x40\x10\x18\x9f\x25\x0b\xe8\xda\xc0\x5d\xc1\x1f\x58\xb4\xb6\x15\xc5\x9c\x3c\x09\xa0\xf3\xd2\xe7\x79\x56\x09\x0e\x13\xc9\x4a\x90\x09\xf3\x28\xc4\x01\x76\x65\x1c\x69\x43\x0f\x4c\x26\xe9\x0c\xad\xa9\xf3\x2e\xf2\xed\x00\xdf\x8e\xe1\x39\xeb\x59\xba\x10\x47\xca\x7a\x60\x26\x0d\x92\xbd\x01\xdc\x14\xe8\x1e\x9b\xd8\x16\x98\x6b\x50\x0d\x37\xa6\x70\x17\x73\xc4\x9a\x25\xe8\x6e\x20\x31\x45\x1c\x92\x3c\x70\x24\x14\x6a\x5d\x77\x3e\x10\x8b\xc7\x04\x93\x8f\x1f\x6b\xe5\xd5\x6d\xd6\x32\xe3\x80\x5c\x1a\x9d\xd0\x19\xe5\xd1\xf1\x4a\x3f\x58\xa0\x00\x1d\x0d\x00\x82\xcf\x66\x86\xb6\xb5\x78\xd1\xb5\x73\xcc\x63\xca\x2b\x3a\xc0\x4a\x9c\x9c\x07\xe8\x15\x2a\x26\x56\xe8\x73\x91\x4d\xe2\x05\x22\xb1\xb5\x74\xd8\x1c\xb4\xdb\xdd\x71\xa7\xd7\x68\xb9\xdd\x0b\x08\x81\x75\xe5\x02\x70\x30\x49\x4c\x92\x65\x52\x99\x08\xa1\xc6\x60\xf4\x18\xcc\xcd\xf4\xb0\x8f\x23\x35\x39\xfc\x2c\x0f\x31\x0e\xf6\x16\x73\xec\x7b\x30\x16\x8a\x08\x4d\x67\x57\xd3\xad\x9d\xe9\x59\xb3\xc4\xfc\xbc\x94\x6f\x59\x7e\x48\xc7\xc2\xe8\x78\x31\x5f\xea\xe5\xf0\xdc\xfc\x00\x79\x12\x01\x5a\x58\x57\xc0\x3b\x9f\x86\x51\x3e\x02\x92\x40\x2c\xfe\xcd\xf6\x3a\x8f\x24\xb0\x6d\x88\x30\x80\x02\x30\xd9\x1c\xac\xce\xc0\x67\x96\x86\xa5\xcc\x38\x08\x55\x59\x55\x3d\x1d\x24\x69\x62\xfa\x92\x14\x06\x37\x90\x79\x6d\xd0\x4a\x31\xc8\x43\x01\xc0\x45\xe3\x22\xb6\x82\x5d\x95\x48\xbd\x79\xde\x27\x44\xe4\x59\xc3\xae\xc5\xe2\x11\x16\x2f\xc8\xd1\xc0\x1f\xcc\x02\xaf\xea\xc5\x94\x94\xa7\x30\x4c\x63\x26\x7f\xca\xeb\xae\x50\x24\x32\xa9\x60\x9c\xc5\x26\xaa\x82\x5d\xdc\xa1\x44\xaa\x90\xd3\xa1\x1e\x2f\x09\xdc\x4e\x20\xfc\xff\xf1\x7f\xff\xfb\xff\xf9\xb4\x76\x92\xf5\x6a\xf0\x7f\xae\xf5\xb1\x9b\xce\xd6\x6f\x76\xf4\x6b\xea\xf1\xc0\x0c\x7d\x3a\x2f\x38\x7a\xde\x83\x71\x0f\x12\x9b\x77\x8d\x31\x39\x05\x5b\xea\x81\x8f\x56\x4f\x6b\xaf\x4f\x4e\x9e\xd7\x5f\x56\x5f\xbc\x7c\x5d\xd3\x73\x1e\xb4\x05\x3a\x41\xe5\x3a\x82\xb9\xb6\x82\x4d\x6e\x10\xde\xd7\xa5\xbd\xa7\xc4\xf8\xe0\x0b\x5c\x50\x58\xcf\xad\x19\x17\xcd\x8e\x6a\x6f\x89\xae\x05\xcb\xb7\xda\x86\xe4\x08\x3c\x80\x1a\xb6\xed\xae\x1a\xb7\x4c\x8e\x13\x09\x27\xcd\x77\x8a\xd9\x76\x79\x25\x94\xc1\xf2\xad\xdb\x7a\x6c\x37\x38\xe0\x6f\xe8\x48\x15\x4c\x8a\xe5\x0c\xd4\xa9\x9f\x96\x1f\x88\xa0\xfe\x50\x04\xb5\x87\x22\x38\x79\x20\x82\xda\xeb\x87\x22\x78\xf5\x50\x04\x2f\x1f\x8a\xe0\x97\xbf\x88\x40\xf7\xd7\x7f\xf1\xae\xdd\x70\x3a\x0f\x41\xc2\x6e\x95\xa4\x8e\x95\x23\xac\xe3\x47\xa4\x84\x43\x26\x58\x3e\x08\xe1\x4c\x88\x59\xc0\x1e\x03\x1f\x64\x6a\x87\x87\x33\x87\xca\x90\xd1\x09\x77\x6e\x5e\xae\xd9\x45\xe7\x87\xb8\xcc\x02\xb2\xc9\xa0\x31\x9a\x72\x0f\x30\x66\x9b\xa6\xf3\xc6\xb0\x9d\xcd\x3c\xb8\x4e\xb3\xab\x10\x1e\xe2\x22\x11\x47\x35\x1a\x43\xf2\xaf\x78\x40\xc7\xb9\xce\xcd\xe9\xbf\xb1\xa5\x37\x87\xe2\x9d\x54\xa1\x8f\xe5\x51\xe5\x3a\x7b\x26\xce\x88\xe8\x4d\xcc\x84\x47\x55\xdc\x7a\x26\x7c\x56\x7c\x69\x69\xec\xa4\xe6\xf3\x04\x4a\xff\x24\xc5\xee\xab\x12\xd7\xea\x8f\x4d\x94\x38\x7d\x52\x2e\x7f\x9f\xf4\xdf\x21\x2f\x7e\x2a\x81\x0e\x50\xb1\x46\x1c\xf7\x22\x57\xa5\x91\x35\xc2\x9f\x59\x28\x16\x77\xcf\xa7\x25\xa8\x61\xc2\x4f\xa1\xea\xe5\x96\x8c\xe8\x29\x71\x3c\xc6\x99\x4c\xef\xc8\xcd\x17\x35\x6c\x1b\xdd\x7e\x03\x46\xff\xd1\xf7\x48\x03\xd8\x7a\x10\x8e\x79\x80\x93\x95\xbe\x0f\x98\x71\xf8\xd2\x98\x91\x9a\xc3\x63\x9a\xed\xe4\x9d\xe4\x9a\xc7\x63\x6c\x3b\xa1\x2a\x8e\x21\xea\xc6\x7a\xe1\x3d\x06\xfe\x3c\x68\x78\xb1\x1f\xd0\xeb\x91\xd5\x77\x57\x5d\x2f\x7c\x7f\xb8\xe0\x53\x35\x84\x32\xeb\x59\x9e\x1a\x83\xe6\x07\xf7\x63\x7b\x3d\x97\x23\x3b\xab\x87\xf5\xe2\x71\xd7\x0e\xbc\x6a\xd0\xa5\x31\x9a\xb5\xb0\x90\x5c\x35\x15\xbe\x8f\xbc\xe4\xc9\xda\x35\x27\xd0\xd1\xdd\xea\x41\xcd\xd4\xed\x34\xfa\x6f\x1e\x13\xe7\xbf\x72\xeb\xf6\x7a\x05\x25\x06\xf2\xab\x57\x2a\x8c\x01\x14\xbf\xb6\x15\x81\xe0\x65\x78\xed\xe3\xaa\x5a\x16\x80\x8b\x1c\x9a\x4f\x2f\x02\xdb\x76\xdc\x8d\xc9\xe9\xee\xd5\xfe\xee\x4b\xd5\x67\x15\x7f\x19\xf0\xc9\x0f\xe0\xb7\xa0\x48\x67\x8b\x79\x2d\x25\x70\x59\xb1\xf2\x55\x32\xb0\x4a\xb5\x52\x31\xc2\x15\x38\xd3\xb7\xcc\x6a\xc8\xed\x0d\xdd\xc8\x93\x0c\x3f\xb1\x9d\xa3\xbd\xbb\x69\x38\xb1\xff\x4a\x65\xf3\x3b\x49\x69\x0f\x7a\x96\x90\xab\xa6\x48\x23\x05\x4d\x27\x7e\xa8\x96\xec\xc6\x31\xdf\x37\xb2\xec\xe6\xe1\xe1\x91\xfe\x26\x2a\x8b\x48\xef\x5f\xf2\x96\xcd\x92\xb7\xf9\xfe\x3c\x8d\xfc\x80\x7d\x84\x26\x0c\x22\xb9\x8c\xa1\xed\x46\x53\x61\xbe\xa2\xe0\x96\x21\x62\x8b\x3c\xd2\xf2\xfa\xd3\x6f\x8e\x3b\x33\xbf\xc2\xab\x2d\x2e\xf2\x3e\xb5\x81\x2a\x8f\x60\x35\x94\x6f\xc2\x3c\x7d\xba\x03\xe9\xcf\xb5\xa3\x23\xd3\x19\xee\xdd\x27\xe2\x10\x26\xde\x37\x1b\x12\x92\x83\x22\x05\xfc\x46\x96\x17\xb9\xac\x17\x2b\xe0\xf5\xc4\x1d\x0d\x21\xf5\x5c\x25\x2c\xe9\x8a\xa8\x7d\xcb\x42\xfc\x40\xea\xc9\xa5\x99\x75\x71\xcc\xc0\x35\x7c\xb6\xb8\x36\x9b\x0c\x18\xb1\x4b\x7b\x34\x4a\x16\x4c\x8e\xc4\x1a\xf8\x87\x2c\x71\x2f\xb9\x2d\x2e\x8f\x8c\x15\x3e\x91\x83\x6d\x72\xb8\x5a\x7d\x56\x6e\x61\x03\xdb\x85\x54\xd4\xc6\x5d\x74\xf9\x19\xf9\xb2\x36\xc4\x7d\xdc\xa0\xe8\x6f\xee\x97\x7d\x82\x5f\x52\xb5\xf4\xdb\xda\x33\x8e\xfe\xcf\x00\x00\x00\xff\xff\xec\xb8\x6a\xab\x04\x26\x00\x00")

func scriptsBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBash,
		"scripts.bash",
	)
}

func scriptsBash() (*asset, error) {
	bytes, err := scriptsBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.bash", size: 9732, mode: os.FileMode(420), modTime: time.Unix(1468093787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.bash": scriptsBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.bash": &bintree{scriptsBash, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

