// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x7f\x52\xdb\x48\xf6\xff\xdb\x3e\xc5\x1b\x43\x85\xe4\xfb\x45\x16\x36\x64\x92\x4c\x42\xb6\x1c\xdb\x21\xde\x01\xec\xc2\x30\x5b\x53\xc9\x14\xd5\x96\xda\x56\x2f\x92\x5a\xa5\x6e\x61\x5c\x2c\x73\x83\x3d\xc3\xde\x63\x4f\xb5\x47\xd8\xf7\xba\x25\x5b\x32\x66\x43\x86\xcc\xd4\x04\x90\xba\xfb\xfd\xfe\xf1\x79\xad\x13\x76\xc5\x3f\xca\xd0\xe7\xa9\x7a\xfe\x02\x6e\xeb\xb5\xe8\xca\x17\x29\x38\x09\x34\xb3\x44\x05\x62\xaa\xdd\x50\xce\x94\xbb\x69\x61\x92\x89\xd0\xaf\xac\x24\xa9\xb8\x66\x9a\xd7\xef\xea\xf5\x8b\x64\x96\x32\x9f\x8f\xbd\x54\x24\xda\x92\xf6\xb2\x34\x04\x67\xaa\xc6\xc7\x10\x68\x9d\xa8\x9f\x5c\x37\x65\xf3\xe6\x4c\xe8\x20\x9b\x64\x8a\xa7\x9e\x8c\x35\x8f\x75\xd3\x93\x91\x1b\xf2\xa9\x36\x6c\x50\x32\xb7\xe0\x18\x31\x85\xcf\xae\x88\x95\x66\x61\xd8\x54\x01\xbc\x87\x7c\xad\xa9\x79\x94\xc0\xb3\x67\xe0\x05\x91\xf4\xe1\xff\x6f\xee\x2d\x34\xdd\xf5\x37\x69\x54\xd9\x44\x62\x8f\xb9\xce\x92\x23\x1e\x59\x89\x8f\xfa\x27\x87\xdb\xad\x7a\xad\x3b\x38\xdc\x6e\xd7\x6b\x67\x52\xea\x11\x53\x6a\x2e\x53\xff\x70\x7b\xbf\x5e\xaf\x89\x29\x7c\x86\xc6\x76\xbb\x01\x87\x87\xd0\xd0\x69\xc6\x1b\xf0\xdb\x5b\xd0\x01\x8f\xeb\xb5\xda\x16\x74\x07\x20\x14\xd0\xfb\x5d\x98\x73\x88\xe5\x1c\x62\xce\x7d\x48\x72\x2a\xb8\x29\x27\xb1\xdf\x80\x1f\x90\x44\xf9\x78\x8d\x7b\x81\x04\x87\xdb\xd5\x7f\x80\xca\x7c\x7c\x1c\xc3\x8c\x47\x90\x9b\x00\x48\x3a\xdc\x78\x23\x34\xec\xe1\x5f\x3c\x54\x7c\xf9\x82\x96\xa6\xa2\x5e\xbc\xdc\x82\x0b\xb4\x31\xa8\x40\x66\xa1\x0f\x7a\x91\x70\xa4\x42\xbc\xca\xd2\x3c\xc8\xa3\x60\x81\x04\xd1\x4c\x47\x42\x8f\xb2\x30\xb4\x56\x3a\xeb\x9f\x0c\xcf\xfb\xc6\x50\x1f\xce\x3a\xa7\xdd\x4f\xc6\x58\xc7\xc3\xa3\x8f\x83\xe3\x3e\xd9\xa9\x56\x8a\xb2\x7a\x0d\xfd\x0d\x49\x66\xe8\xc2\x76\x1b\xda\xef\x9f\xb5\x50\x39\xcd\x39\xe0\x56\x4b\x7b\x9c\x4d\xd0\x89\x59\xc8\x07\xb1\xc8\x83\x67\x49\xae\xb5\x81\x9c\x2a\xf6\xa3\xcc\xf8\x58\x26\xd9\x5a\x27\x79\x91\xf8\x18\xa2\xdf\x44\x34\x33\x47\xee\x93\x1d\x49\x7f\x60\x6d\xf4\x15\x72\x09\x46\x64\x61\xcd\x0a\x95\x5a\x4e\xe6\x8c\x27\xf2\x21\xc1\x2e\x6c\x88\x76\x65\x3c\x15\x33\x4b\x2b\xc5\xed\x85\x54\x8e\x73\xcd\xd3\x89\x54\x7c\x03\x65\x1b\xcd\x98\x87\x21\xff\x9b\x25\x5c\xd5\xd2\xac\xc0\x3c\x65\x49\xc2\x53\x73\x40\xb3\x54\x8f\x45\x94\x85\x4c\xcb\xd4\x1e\xe9\xf5\x7f\x19\x74\x37\x28\x75\xe3\xa5\x59\x6c\xd4\x4a\xb3\x08\xd3\x56\x81\x33\xc7\x50\x6d\x35\xa0\xf5\xde\xf5\xf9\xb5\x1b\x67\xb9\xba\x44\xb9\x2b\xa3\x44\xa0\x43\x87\x63\x4b\x75\x74\x36\xfc\x6b\xbf\x7b\x7e\x79\xfe\xeb\xc8\xd2\x2e\x5e\x8c\x3a\xe7\x36\x80\xc6\xdd\x4f\xfd\x13\x1b\x3f\x85\x08\x07\xc6\x32\xf9\x96\x97\x6b\xf2\x28\xae\xc1\x91\x90\x88\x84\x4f\x99\x08\x29\xc1\x6f\x3c\xe9\x73\x53\xa6\xc0\x31\x92\x99\x54\x75\x94\x17\xf0\x28\x4f\x2b\x27\x10\x58\xa5\x02\x1e\x86\xb6\x54\xf5\xe3\x6b\x91\xca\x98\x14\xc2\x8d\xfe\x15\x88\x24\x90\x31\x57\x85\x4d\xc0\xf1\xb9\xd2\x22\x66\x5a\xc8\x18\x1a\x09\xbe\x9c\xca\x34\x3a\x5c\xdb\xb6\x1b\xb3\x88\xa3\xc0\x0d\xda\x8f\x55\x91\xfb\x3d\xa6\xd9\x88\xe9\x60\xad\x7e\xe6\x0e\x6b\x6c\xbf\xa4\x14\xbf\xf1\x92\x94\x6b\xbd\x20\x8b\x75\x52\x2f\xc0\x83\x7f\xcc\x62\xc5\xda\x69\xe7\xe4\x4f\xb2\xdb\x57\xd4\x72\x98\x15\xbf\xba\xb6\x7d\xd0\xbc\xf1\xf2\x15\x28\x7e\x3f\x68\x81\xfe\x4d\x22\x53\x7d\xcf\x00\x56\xa7\x56\x59\xa7\xf6\xb7\xe9\xc4\x0d\xe1\xdc\xc0\xc5\xe3\x30\x21\x97\xaa\x51\x28\x94\x5e\xb6\x32\xd7\xae\x35\x13\xf3\xf6\x01\xa5\x5a\x25\xa5\x72\x62\xd5\x1d\xe5\xd4\x34\xa6\xac\xea\xf9\x91\x6b\x2f\xe8\xc4\x54\x05\x98\x48\x47\xa9\xbc\x16\x0a\x45\x11\xf1\x0c\xff\x9e\x62\xd6\xe4\xbd\x79\x0b\xab\x35\xb6\x13\x6c\x95\x0a\x94\x98\x05\xf4\xc6\x97\xf3\x38\x94\xcc\x07\xaa\x2d\x22\xd6\x72\x29\x3a\x4c\x8d\x35\x68\x13\x8b\x7d\xd3\x54\x80\x32\x96\x2a\xfe\x34\x8b\x3d\x13\xc0\x23\x99\x50\xc0\xf2\x4d\x4c\xeb\xb5\x4e\xb7\x3b\xbc\x38\x3d\xbf\xec\x9f\x74\x06\xc7\xc6\xe4\xc4\x96\xca\x0f\xa3\x8e\x9f\xc1\xf2\x55\x21\xc6\x25\x89\x91\x2f\xac\x70\x81\xbb\x44\x06\xb5\xe8\x1a\xfe\xaf\x19\xc9\x09\x32\x48\x0a\x9e\x2b\xe0\x50\xfb\x9f\xf2\x90\xa9\x44\xec\x6f\x58\x5b\x56\xaa\xfe\xf1\x70\xd4\x3f\xbb\xcc\x05\xb7\x3d\xe9\xe2\xb4\x77\xdc\xbf\x1c\xf4\xfa\xa7\xe7\x83\x8f\x83\xfe\x99\x09\x17\x23\xb5\x11\x14\xbd\x4a\x7d\xc8\x71\x98\x1f\x48\xcf\x16\xe4\x87\x85\x28\x3c\x71\x84\x11\x46\x96\xbc\xb8\x18\xf4\x60\x9a\xca\xa8\xa4\xc4\xd6\x12\xdf\xcc\x30\x6a\x72\x80\x63\x50\x4d\x74\x93\xa4\xee\xeb\xf6\xde\xeb\xf6\xeb\x37\xec\xc7\x7d\x8f\x1d\xf0\x7d\xb6\xff\x92\x1d\xd0\xa1\x63\x29\x13\xa4\x99\xca\x0c\x45\x23\x3b\x1a\x86\xbb\x80\x08\x61\x21\x33\x6c\xc9\x1a\x18\x5c\xf4\x06\xbd\x5d\x60\xbe\x71\x68\x04\xe8\x6f\x92\xc2\x44\xa7\x9c\x42\xb2\x74\x5d\x25\x1d\x0c\xc6\x70\x7c\x68\xac\x3c\xe1\x56\x81\xca\x39\x12\x59\x0b\x1c\xc0\x96\xaf\xb4\x22\x10\x21\x33\x63\x75\x43\xfa\x70\xca\x2c\x9e\xc0\xb2\x57\xf0\x3b\xc5\x62\x47\x60\x62\x49\xfc\x9e\x8b\xdf\x62\x84\x10\x30\xc9\x32\x81\xd0\xe9\xb9\x9b\xa9\xd4\x0d\xc5\x84\xdf\x70\xcf\x35\x19\xf7\x21\xf3\xfd\x05\x38\x1e\xec\x8c\x52\x0c\x63\x63\xd7\x1d\x30\x7d\x44\x69\x1f\x69\xbf\x7b\xf7\x0e\xb6\x9f\x2b\x8e\x28\x52\xe8\x05\x78\x11\xf6\x9b\x1e\x38\x02\x13\xea\xb6\x24\xc6\x5d\x03\x93\x6d\xd9\x7e\x5e\xbc\xa8\x13\xd7\x2d\x18\x4c\xc9\x76\xe4\x2b\xa3\xd5\xae\x4d\x07\x4f\x26\x0b\x10\xda\x98\x18\x3b\x7e\xc0\x54\xbc\x83\x46\x0e\x53\xce\x50\x98\x09\xb7\x5b\x04\x27\x64\x54\x00\xb5\x5b\x52\xe1\x6e\x03\x5a\xcb\xad\x3c\x85\xdf\xdd\x63\x31\x49\x59\xba\x70\x4f\x8c\x11\x7a\xfc\x5a\x78\xdc\x2d\x47\xd3\x17\x28\xcc\xe9\xe6\x04\xef\xe5\x44\x99\x32\x2a\x30\xc6\xc5\x58\x87\x28\xee\x2c\x96\x29\xb7\xaf\x13\x32\xd5\x74\xdd\x02\xb9\xe3\x0a\x74\x97\x0b\xf3\x25\x6e\x98\x43\x05\x44\x34\xf0\x94\xf4\xa7\x73\x14\x47\x36\x92\xf3\x9a\x41\xff\x79\x09\x69\x73\xcf\xbc\xdf\x45\xbd\xaa\xfc\x27\xf8\x36\x9e\xc1\x9a\x1a\x9f\xf3\xb3\xbf\x91\x74\x6b\x5a\x10\xae\xad\xad\x47\x26\xe1\xec\x7a\xb1\xe8\x63\x3b\xae\xaf\xf0\x75\x65\xa7\x81\xeb\xb4\xbb\x82\xb6\xd7\x41\x74\x21\x5d\x2f\xf3\x11\xbe\xff\x8a\x29\x68\xb0\x3b\x0a\x43\xe9\xa7\x24\xc6\x7c\x52\x52\x7a\x99\x7c\xe5\x4c\xc8\xe5\xdd\x84\xc7\x0b\xf2\x9f\xf8\x62\xd7\x24\x78\x99\x3a\x3e\xa7\x8f\xa5\x5e\x10\xb7\xd0\x1c\xfb\x48\x2a\x85\xdf\x0d\x39\x8b\x97\x60\x32\x6f\x93\xeb\x10\xae\xe9\x5a\x08\x38\x07\x8f\xb6\xdf\x47\xb8\x39\xb1\x8b\x58\xac\xe1\xdc\xaf\x12\xcc\x8a\x23\x9d\x75\xcc\x5b\xa2\x9b\xa3\xe7\x1e\xf6\xe5\xd9\xe3\x49\x8b\xd2\x29\x2c\xdb\xf8\xe0\x5d\xe9\x94\x79\x1b\x10\x7a\xce\xa7\xa3\x14\x8f\x26\x21\x7f\x3c\x0f\x96\x9f\x78\x1c\xfd\x63\xf4\xe4\xe3\x69\x87\x54\xdf\x1e\x22\x65\x10\x78\x07\x9b\xf3\x35\x56\xb9\x1c\xf7\x74\xba\x3f\x77\x8e\x72\x04\xde\x19\x9c\x62\x77\x3b\x1f\xfc\x32\x38\xff\xf5\x3e\xee\x61\xfe\x04\x07\x3c\x04\xb3\xc0\x22\x50\x44\x0a\x9c\x18\x19\x10\x46\xc1\xcd\x25\x89\x19\x22\x80\xa0\x5f\x06\xfa\x55\x52\xf5\x5a\xca\xfd\xae\x0c\x31\x0e\x0f\x77\xbe\xec\xed\xef\x7f\xde\x7b\xbb\xdf\x8a\x76\x68\x6a\xc0\xba\xb8\xbe\xd2\xa6\x95\x49\x98\xf1\xf5\x85\x03\x5a\x88\x65\xf5\x35\xbe\xab\xd7\xfa\x27\x17\xc7\x9d\xf3\xe1\xd9\x03\x78\x6e\xb9\x7c\xd6\x1f\x5f\x1c\x9f\x8f\xb1\x6b\xc4\x32\xc8\x12\xcc\xe5\xce\x69\xef\x6c\x38\xe8\x5d\x7e\x1a\x9e\xf4\x5d\x2d\x65\xa8\x5c\x9e\x6b\x82\xc0\x94\x5d\xfb\x76\x0c\x69\xbf\xc7\xb6\xde\xa2\x1f\xcf\xa8\x0d\x60\x93\x1b\xf6\x86\xf0\x13\xf6\x3a\x04\x51\xf8\x3f\x83\x89\x98\xc1\xd6\x27\x34\xef\x2e\xc8\x18\x6b\x2b\x4f\x53\x99\xe2\x42\xca\x11\xe3\xe8\x2c\x8d\xb9\x5f\x54\xd1\xa9\x48\xb1\xc5\xea\xb9\x04\x6c\x41\x32\xf6\xb1\x2f\x0f\x70\x44\xf4\xae\x0c\xb8\x1a\x60\x7b\xa3\xd6\x71\x45\x13\x3e\x83\x39\x5b\x80\xcc\x34\xa2\x8c\x90\xf3\x04\x36\x6b\xf3\x6e\xbb\x6d\xc5\xea\x06\x1c\xc9\x60\x9d\x42\x3e\xc8\x79\xce\x48\xb4\x51\xe7\x74\xd0\x85\xcf\xd4\xdf\x39\x31\x46\x99\x77\x71\x6c\xd6\x85\x3c\x73\x1c\x52\x66\x50\xa8\x0d\x34\x6e\xfc\x46\xa1\x82\xa7\x2e\x73\xec\xf3\xdc\xdc\x1f\x60\xfd\x5e\x67\x7e\x47\x00\x14\xdd\x88\xb6\x34\x07\xd0\x68\x9e\x15\x65\x50\x15\x22\x61\xb1\xf0\x76\x0d\x26\x99\x53\x83\x64\x16\xf3\xd0\x5d\x8d\xe9\xa0\x0b\x88\x38\x26\x8a\x8f\xb3\xe8\x2e\xc4\x52\xe3\xca\xf2\x4e\xe4\xb6\x24\x0b\x32\x74\x66\x58\x5c\x4b\xe5\xb6\xa8\x7e\x04\x3c\x96\x5a\xcc\x8d\x11\x0d\x9c\xcd\x92\x26\x9c\xb0\xc5\x84\x1b\x8e\xdb\xb7\xcb\x68\xbc\x2b\x76\x53\x93\xd8\xbe\x2d\x42\xeb\x0e\xae\x50\x1c\x61\x1a\xb8\x27\xd3\x94\x7b\xda\x56\xc7\x55\x99\x4d\xf9\x8e\x82\x79\x90\x2b\x11\xca\x19\x28\xb6\x50\x3f\x7d\x89\xab\x1b\x37\xd8\xab\xd8\x62\x2b\xed\x1e\x6c\xd1\x0f\xc2\x3f\x23\x32\x50\xe9\x86\x65\xcc\x39\xe2\x92\x50\x5c\xf1\xdc\x8e\x18\x66\xb1\x2c\xec\x18\x72\x8d\x12\x78\xc6\xdd\x74\xda\x86\x1b\x1e\xec\x9f\x9d\x21\xb7\x6f\x70\x9b\x39\x60\xdd\xb6\x02\x26\x25\x2a\x1b\x0c\xfe\x18\xfd\x72\x05\x5b\xa4\x60\xcb\x88\xd8\x27\x11\x37\xf4\x44\xaa\xea\x34\x64\x4d\xd8\x04\xbb\xd7\xf6\x6d\xa9\x28\xdc\x99\xba\x83\x2d\xab\xec\x1c\x8c\xe3\xdc\xad\xc6\xf8\x85\x0f\x73\xb6\x5b\xd0\xe9\x7d\x80\x19\xce\x4f\xca\x8e\x38\xd2\xcc\x62\x74\x6a\xce\x50\x22\x92\x84\x8e\xf9\x06\x6a\x80\x16\x34\xeb\x90\x9f\x31\xfc\x4c\xec\x59\xcb\xfe\x3d\xc3\x4c\xf1\x79\xc2\x31\x23\xf1\x34\x02\x3b\x4b\x5c\xe7\x09\x8f\xb0\x2e\x0c\x6d\xcc\xc2\x1c\x41\x39\x86\x2b\xc6\x03\x8f\x57\xbe\x62\xd4\x66\xb1\xec\x47\x76\xbd\x2c\x2a\xd0\x20\xa9\x96\x8a\x4c\xb8\xc7\x30\x0f\x08\x74\x0b\xe2\x8d\xf3\x0f\x60\x3f\x22\x6f\x9a\x2a\x4c\x72\x3b\x28\xb7\x63\x65\xce\x61\xe8\x29\xe6\x91\x2e\x22\x30\xd7\x86\xd8\x5e\x23\x6d\x86\x7c\x77\x6d\x6e\x4b\xaa\x35\x64\x86\x6b\x8b\xc5\xaa\x35\x62\x25\x12\x02\x56\x2c\x4c\xb1\xc0\x92\x8f\x12\x49\x4d\x56\x37\x60\x16\x73\x71\x17\xa8\xf8\xf8\x89\x31\x5e\xbb\xa8\x5a\x76\x14\x4c\x17\xd6\x26\x6c\xc6\x44\xbc\xbb\xb4\x0f\x61\x0e\x24\xc7\x42\xdc\x21\x66\x33\xcb\xbb\xf0\x78\x35\xb4\x4b\xc2\x53\xc9\xab\x06\xc0\x52\x9d\x52\x04\x98\xfb\x4f\x2a\xac\x38\xc6\x90\x98\x88\x38\xa4\x2a\xe0\xd1\xb8\x7b\xd6\xef\x9f\x5e\x1e\x0f\x3b\xbd\xc1\xe9\x11\xa6\xc0\xaa\x8f\xe1\x76\x74\x49\x02\x6a\xa1\x9a\x13\x29\xf5\x25\x3a\x3d\x41\x77\x73\x73\x73\x42\xd7\x31\xb0\xf3\x25\xdd\xa1\x3c\xa8\xcd\x03\x82\xb2\x94\x0b\x55\x82\x16\xac\xb7\x0c\x5a\xb7\x63\x48\x5e\x98\x0f\xea\x65\x14\xfa\x28\x1b\x4b\x6b\xe3\x79\xb0\x30\x37\xbb\x81\xfd\x81\xfa\x28\x89\x56\x58\x75\xc0\x3b\x9f\x45\x71\x39\x03\x54\x28\xe7\x7f\x29\xe0\xeb\x77\x52\xb8\xc0\xb8\x94\x40\x21\xba\x2c\x40\xaf\x73\x8c\x99\x85\x15\x29\x77\x0e\xed\x6a\x2e\xbb\x9e\x49\x92\x4c\x59\xa8\x99\xe1\xd0\x8e\x3a\xaf\x1c\xda\xac\x26\x79\x24\x71\x73\xd5\xb9\x44\xad\xe2\x57\x2d\x33\x2f\x28\xc7\x84\x8c\xbd\xc2\xb1\x2b\xb5\x44\x4c\xcd\x0b\x6b\x34\xca\x87\xf0\xe7\x75\xbb\x5a\x92\xca\x1c\xc6\x59\xc2\xd3\x1f\xca\xb6\xab\x34\x89\x5c\xab\x34\x8b\x09\x17\x37\x09\x98\xef\xa4\xc4\x15\x6b\x3a\xf6\xe3\x05\xe0\x69\x85\xe9\xff\x9f\x7f\xfd\xf3\xdf\xe5\xb2\xb6\x97\xc3\x6f\xfc\x57\x86\xb6\xf9\x77\x8a\xde\xcf\xc5\x64\xdf\x35\x13\x9f\x9d\xe9\x4d\x5d\x70\xcc\x38\x8f\xd3\xbc\x41\x82\x94\x93\x53\xf4\xa5\x99\xe7\x99\xbb\xdf\x7a\xb3\xb7\x77\xd0\x7e\xe5\xbe\x7c\xf5\xa6\x65\xc6\x78\x84\x05\xa6\x40\x95\x10\x41\x60\xbc\x50\x14\x37\x4c\xef\xab\x7a\xed\x39\xd8\x18\x7c\x49\x97\x53\x45\xe4\xb6\x6c\x88\xe6\x4b\xad\xb7\x60\x7a\xc1\xe2\xad\xf1\x21\xbc\xc0\x08\x60\x56\xec\xe2\xf6\x97\x6e\x28\x1d\x27\x96\x4e\x26\xee\xe3\xea\xa5\x52\x96\xca\x43\xa7\xcd\x95\x8d\xa5\x81\xbf\x71\xc8\xd0\x38\xfc\x37\xf2\xad\x4e\x7b\xbf\xf1\x44\x02\xed\xa7\x12\x68\x3d\x95\xc0\xde\x13\x09\xb4\xde\x3c\x95\xc0\xeb\xa7\x12\x78\xf5\x54\x02\x3f\xfe\x41\x02\x06\x5f\xff\xc1\xb3\xc5\xed\xb8\xf3\x14\x22\xfc\x06\x87\x2f\xa7\xd0\x23\x6a\xd3\xc7\x0f\x25\xb0\x12\x2c\x9e\x44\x70\x26\xe5\x2c\xe4\xdf\x83\x1e\x56\x6a\x47\x44\x33\x87\xa5\x11\x67\x13\xe1\x5c\xbf\x5a\x89\x4b\xc1\x6f\xbe\x86\x96\xbe\xe1\xac\x7d\x68\xfd\xdd\x2d\xee\x89\xeb\x35\x5b\x4b\x57\x6f\x5c\xcf\x7e\xf5\x41\x12\x79\x4e\x77\x39\x62\xab\xa9\xf0\x50\xa8\xfc\x2e\xf2\x43\x67\xdc\x5f\xcd\x9c\xcb\x0b\x32\x11\xd1\x3d\x34\xcd\x7e\x2c\xc1\xfe\xd1\xf4\x50\x54\xe7\xaa\x74\x7b\xf3\x33\x5f\x78\x01\xf6\x7f\x45\x5f\x78\x45\xdc\xbc\xca\x9f\xc1\x39\x07\x73\x3f\x37\x11\xb1\x4b\x97\xe6\x4a\xcc\xaa\x2f\x0b\x1e\x1b\xb9\xf9\x42\x21\x7a\x98\x64\x04\xe0\x9a\x49\xab\xfd\xbd\x99\x82\x33\x82\x46\xe3\xeb\xac\xff\x0c\x7d\xe9\x3b\x16\x82\x48\xcd\x3b\x49\x32\x8c\x07\x3a\x8b\x0b\x27\x7c\xcb\xd5\x73\xf5\x3b\xc6\x7e\x1d\xdb\xa0\xf4\x33\x6c\x9c\x6b\xd7\xd1\x49\x72\x49\x63\x9d\xf9\xde\x62\x83\x88\x90\xe7\x60\xd4\x91\xb1\x38\xff\x1a\x6b\xdc\xb6\x9a\xa5\x13\x11\xd2\x70\x66\xce\x17\x5c\x84\xfd\x12\x91\x88\xe5\x07\xc4\xfa\xdd\x7f\x03\x00\x00\xff\xff\x71\xc0\xdd\x9c\x0e\x20\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 8206, mode: os.FileMode(420), modTime: time.Unix(1466954142, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

