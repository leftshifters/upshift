// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\xfb\x72\xdb\x36\xd6\xff\x5b\x7a\x8a\x53\xd9\x13\x27\xdf\x67\x8a\x96\x9c\x34\x49\x13\x67\x47\x91\x54\x47\x5b\x5f\x34\x96\xdd\x9d\x4e\xd2\xf1\x40\x24\x24\x62\x4d\x12\x1c\x00\xb4\xac\xf1\xba\x6f\xb0\xcf\xb0\xef\xb1\x4f\xb5\x8f\xb0\xe7\x00\xa4\x44\xc9\xf2\xc6\xad\xd3\x4e\x63\x5b\xb8\xfc\x70\xee\xe7\x07\xe8\x98\x5d\xf1\x1f\x65\x1c\x72\xa5\x9f\xbf\x80\xdb\x7a\x2d\xb9\x0a\x85\x02\x2f\x83\x66\x9e\xe9\x48\x4c\x8c\x1f\xcb\xa9\xf6\x37\x4d\x8c\x73\x11\x87\x7e\xfd\xae\x5e\xbf\xc8\xa6\x8a\x85\x7c\x14\x28\x91\x19\x87\x13\xe4\x2a\x06\x6f\xa2\x47\x47\x10\x19\x93\xe9\x1f\x7c\x5f\xb1\x59\x73\x2a\x4c\x94\x8f\x73\xcd\x55\x20\x53\xc3\x53\xd3\x0c\x64\xe2\xc7\x7c\x62\x2c\x26\x8a\xe1\x97\xf0\x09\xd3\xf8\xd9\x17\xa9\x36\x2c\x8e\x9b\x3a\x82\x0f\x50\xcc\x35\x0d\x4f\x32\x78\xf6\x0c\x82\x28\x91\x21\xfc\xff\xcd\xbd\x89\xa6\xbf\x3e\xa2\x92\x95\x45\x24\xf6\x88\x9b\x3c\x3b\xe4\x89\x93\xf8\xb0\x7f\x7c\xb0\xdd\xaa\xd7\xba\x83\x83\xed\x76\xbd\x76\x26\xa5\x19\x32\xad\x67\x52\x85\x07\xdb\xfb\xf5\x7a\x4d\x4c\xe0\x33\x34\xb6\xdb\x0d\x38\x38\x80\x86\x51\x39\x6f\xc0\xaf\xef\xc0\x44\x3c\xad\xd7\x6a\x5b\xd0\x1d\x80\xd0\x40\xe3\xbb\x30\xe3\x90\xca\x19\xa4\x9c\x87\x90\x15\x28\xb8\xa8\x80\xd8\x6f\xc0\x77\x08\x51\xdd\x5e\xe3\x41\x24\xc1\xe3\x6e\xf6\x1f\xa0\xf3\x10\x3f\x8e\x60\xca\x13\x28\x4c\x00\x24\x1d\x2e\xbc\x11\x06\xf6\xf0\x2f\x1e\x6b\xbe\x18\xa0\xa9\x89\xa8\x97\x83\x5b\x70\x81\x36\x06\x1d\xc9\x3c\x0e\xc1\xcc\x33\x8e\x28\x74\x56\x55\x9a\x07\xcf\x28\x8f\x40\x40\x34\xd3\xa1\x30\xc3\x3c\x8e\x9d\x95\xce\xfa\xc7\xa7\xe7\x7d\x6b\xa8\x8f\x67\x9d\x93\xee\x27\x6b\xac\xa3\xd3\xc3\x1f\x07\x47\x7d\xb2\x53\xad\x12\x52\xf5\x1a\xfa\x1b\xb2\xdc\xe2\xc2\x76\x1b\xda\x1f\x9e\xb5\x50\x39\xc3\x39\xe0\x52\x87\x3d\xca\xc7\xe8\xc4\x3c\xe6\x83\x54\x14\xc1\xb3\x80\x6b\x6d\x80\xd3\xe5\x7a\x94\x19\x3f\x56\x21\x5b\xeb\x90\x17\x59\xc8\x0c\xff\x5d\xa0\xb9\xdd\x72\x1f\x76\x28\xc3\x81\xb3\xd1\x57\xe0\x32\x8c\xc8\xd2\x9a\x2b\x28\xb5\x02\xe6\x8c\x67\xf2\x21\xc1\x2e\x5c\x88\x76\x65\x3a\x11\x53\x87\xa5\x70\x79\x29\x95\xe7\x5d\x73\x35\x96\x9a\x6f\x40\x76\xd1\x8c\x79\x18\xf3\xbf\x39\xe0\x55\x2d\xed\x0c\xcc\x14\xcb\x32\xae\xec\x06\xc3\x94\x19\x89\x24\x8f\x99\x91\xca\x6d\xe9\xf5\x7f\x1e\x74\x37\x28\x75\x13\xa8\x3c\xb5\x6a\xa9\x3c\xc1\xb4\xd5\xe0\xcd\x30\x54\x5b\x0d\x68\x7d\xf0\x43\x7e\xed\xa7\x79\xa1\x2e\x21\x77\x65\x92\x09\x74\xe8\xe9\xc8\xa1\x0e\xcf\x4e\xff\xda\xef\x9e\x5f\x9e\xff\x32\x74\xd8\xe5\xc0\xb0\x73\xee\x02\x68\xd4\xfd\xd4\x3f\x76\xf1\x53\x8a\xf0\xd2\x5a\xa6\x58\xf2\x6a\x4d\x1e\xcd\x0d\x78\x12\x32\x91\xf1\x09\x13\x31\x25\xf8\x4d\x20\x43\x6e\x6b\x12\x78\x56\x32\x9b\xaa\x9e\x0e\x22\x9e\x14\x69\xe5\x45\x02\xab\x54\xc4\xe3\xd8\x95\xaa\x7e\x7a\x2d\x94\x4c\x49\x21\x5c\x18\x5e\x81\xc8\x22\x99\x72\x5d\xda\x04\xbc\x90\x6b\x23\x52\x66\x84\x4c\xa1\x91\xe1\xe0\x44\xaa\xe4\x60\x6d\xd9\x6e\xca\x12\x8e\x02\x37\x68\xbd\x12\xd7\x3c\xec\x31\xc3\x86\xcc\x44\x6b\xc5\xb2\x70\x58\x63\xfb\x15\xa5\xf8\x4d\x90\x29\x6e\xcc\x9c\x2c\xd6\x51\x41\x84\x1b\xff\x98\xc5\xca\xb9\x93\xce\xf1\x9f\x64\xb7\xaf\xa8\xe5\x31\x27\xfe\xea\xdc\xf6\xcb\xe6\x4d\x50\xcc\x40\xf9\xfb\x41\x0b\xf4\x6f\x32\xa9\xcc\x3d\x03\x38\x9d\x5a\x55\x9d\xda\xbf\x4f\x27\x6e\x81\x0b\x03\x97\x1f\x4f\x33\x72\xa9\x1e\xc6\x42\x1b\x68\x66\xa8\x1d\xa6\x97\xef\xe6\x9a\x99\x1d\x7d\x40\xa9\x56\x45\xa9\x02\x6c\x75\x45\x35\x35\xad\x29\x57\xf5\xfc\x91\x9b\x20\xea\xa4\x54\x05\x98\x50\x43\x25\xaf\x85\x46\x51\x44\x3a\xc5\xbf\x27\x98\x35\x45\x23\xde\xc2\x6a\x8d\xed\x04\x5b\xa5\x06\x2d\xa6\x11\x8d\x84\x72\x96\xc6\x92\x85\x40\xb5\x45\xa4\x46\x2e\x44\x87\x89\xb5\x06\x2d\x62\x69\x68\x9b\x0a\x50\xc6\x52\xc5\x9f\xe4\x69\x60\x03\x78\x28\x33\x0a\x58\xbe\xe9\xd0\x7a\xad\xd3\xed\x9e\x5e\x9c\x9c\x5f\xf6\x8f\x3b\x83\x23\x6b\x72\x3a\x96\xca\x0f\xa3\xc6\x9f\xc3\x62\xa8\x14\xe3\x92\xc4\x28\x26\x96\xf4\xc0\x2f\x65\xc2\xc1\x6b\xf8\xbf\x66\x22\xc7\x78\x40\x56\x9e\x09\xcb\xe9\xff\x29\x8f\xad\x95\x0f\xcf\x97\x46\x3a\x44\xe7\x93\x92\x17\x17\x83\x1e\x4c\x94\x4c\x2a\xf8\x5b\x0b\xea\x31\x45\x87\x16\xdc\xc3\x12\x8e\xe4\x26\x53\xfe\x9b\xf6\xde\x9b\xf6\x9b\xb7\xec\xfb\xfd\x80\xbd\xe4\xfb\x6c\xff\x15\x7b\x49\x9b\x8e\xa4\xcc\x10\x53\xc9\x1c\x75\x25\x15\xed\x81\xbb\x80\xcd\x7b\x2e\x73\xec\x96\x06\x18\x5c\xf4\x06\xbd\x5d\x60\xa1\xb5\x75\x02\xe8\x0a\x92\xc2\x06\x8e\x9c\x40\xb6\xb0\xea\x4a\xa4\xda\xf6\xef\x85\xd0\x58\x1a\xc9\x5f\xe5\x10\xe7\x08\xb2\xe6\x53\xc0\x6e\xac\x8d\xa6\xfe\x2e\xf3\x34\x2c\x0d\x70\x30\x61\xae\xd5\x63\x45\x2a\xcf\x3b\xc1\x3a\x44\x7d\x7e\x01\x7e\xcf\xfa\xef\xd0\x79\xc4\x19\xf2\x5c\x20\xab\x79\xee\xe7\x5a\xf9\xb1\x18\xf3\x1b\x1e\xf8\x36\x19\x3e\xe6\x61\x38\x07\x2f\x80\x9d\xa1\xc2\x08\xb3\x76\xdd\x01\x5b\xe2\xb5\x09\x11\xfb\xfd\xfb\xf7\xb0\xfd\x5c\x73\x24\x78\xc2\xcc\x21\x48\xb0\x15\xf4\xc0\x13\x18\xeb\xb7\x15\x31\xee\x1a\x98\x07\x8b\xce\xf0\xe2\x45\x9d\x4e\xdd\x82\xc1\x84\x6c\x47\xbe\xb2\x5a\xed\xba\x48\x0d\x64\x36\x07\x61\xac\x89\xb1\x19\x47\x4c\xa7\x3b\x68\xe4\x58\x71\x86\xc2\x8c\xb9\x5b\x22\x38\x91\x96\x92\x43\xdd\x92\x0a\x77\x1b\x88\x54\x61\xe5\x09\xfc\xe6\x1f\x89\xb1\x62\x6a\xee\x1f\x5b\x23\xf4\xf8\xb5\x08\xb8\x5f\x8d\xa6\x2f\x50\x9a\xd3\x2f\x00\xef\x85\x6b\x15\x19\x15\x18\xe1\x64\x6a\x62\x14\x77\x9a\x4a\xc5\xdd\x70\x46\xa6\x9a\xac\x5b\xa0\x70\x5c\x49\xbc\x0a\x61\xbe\xa4\x0d\xbb\xa9\x64\x6f\x96\x39\x92\xfe\xb4\x8f\xe2\xc8\x45\x72\x91\xce\xf4\x5f\x90\x91\x36\xf7\xcc\xfb\x4d\xd4\x5b\x95\xff\x18\x47\xd3\x29\xac\xa9\xf1\xb9\xd8\xfb\x2b\x49\xb7\xa6\x05\x51\xce\xda\x7a\x64\x12\x05\xae\x97\x93\x21\x76\xca\xfa\x92\xfa\xae\xac\xb4\x4c\x9a\x56\xaf\x10\xe1\x75\x7e\x5b\x4a\xd7\xcb\x43\x64\xd6\xbf\x60\x0a\x5a\x5a\x8d\xc2\x50\xfa\x69\x89\x31\x9f\x55\x94\x5e\x24\x5f\x35\x13\x0a\x79\x37\x51\xe5\x12\xfe\x13\x9f\xef\xda\x04\xaf\xa2\xe3\x67\xf5\x58\xf4\x12\xdc\xb1\x66\x2c\xf1\x4a\x8a\xb0\x1b\x73\x96\x2e\x78\x5e\xd1\xc1\xd6\xd9\x55\xd3\x77\xec\x6c\x06\x01\x2d\xbf\x4f\x3e\x0b\xb0\x8b\x54\xac\x51\xd0\xaf\x02\xe6\xe5\x96\xce\x3a\x1d\xad\xe0\x16\xc4\xb6\x87\x2d\x73\xfa\x78\x68\x51\xd9\x85\xcc\x14\x3f\x04\x57\x46\xb1\x60\x03\x79\x2e\xce\xe9\x68\xcd\x93\x71\xcc\x1f\x7f\x06\x2b\x76\x3c\x0e\xff\x08\x3d\xf9\x78\xec\x98\xea\xdb\x43\x50\x96\x1c\x77\xb0\x6f\x5e\x63\x95\x2b\x28\x49\xa7\xfb\x53\xe7\xb0\x20\xc7\x9d\xc1\xc9\x65\xa7\x7b\x3e\xf8\x79\x70\xfe\xcb\x7d\x4a\xc2\xc2\x31\xde\xbd\x90\x67\x02\x4b\x40\x13\x14\x78\x29\x1e\x40\xf4\x01\x17\x57\x24\x66\xd8\x9c\xa3\x7e\x95\x83\xaf\x42\xd5\x6b\x8a\x87\x5d\x19\x63\x1c\x1e\xec\x7c\xd9\xdb\xdf\xff\xbc\xf7\x6e\xbf\x95\xec\x10\xa1\xc7\xba\xb8\x3e\xd3\xa6\x99\x71\x9c\xf3\xf5\x89\x97\x34\x91\xca\xd5\x61\x1c\xab\xd7\xfa\xc7\x17\x47\x9d\xf3\xd3\xb3\x07\xa8\xd6\x62\xfa\xac\x3f\xba\x38\x3a\x1f\x61\xd7\x48\x65\x94\x67\x98\xcb\x9d\x93\xde\xd9\xe9\xa0\x77\xf9\xe9\xf4\xb8\xef\x1b\x29\x63\xed\xf3\x42\x13\xe4\x8c\xec\x3a\x74\x37\x84\xf6\x07\xbc\xf9\xb5\xe8\xc7\x33\x6a\x03\xd8\xe4\x4e\x7b\xa7\xf0\x03\xf6\x3a\xe4\x37\xf8\x3f\x83\xb1\x98\xc2\xd6\x27\x34\xef\x2e\xc8\x14\x6b\x2b\x57\x4a\x2a\x9c\x50\x1c\xe9\x87\xc9\x55\xca\xc3\xb2\x8a\x4e\x84\xc2\x16\x6b\x66\x12\xb0\x05\xc9\x34\xc4\xbe\x3c\xc0\xdb\x5b\x70\x65\x79\xcf\x00\xdb\x1b\xb5\x8e\x2b\xba\x7c\x33\x98\xb1\x39\xc8\xdc\x20\x6d\x89\x39\xcf\x60\xb3\x36\xef\xb7\xdb\x4e\xac\x6e\xc4\x11\x06\xeb\x14\x9e\x83\x27\xcf\x18\x89\x36\xec\x9c\x0c\xba\xf0\x99\xfa\x3b\xa7\x83\x51\xe6\x5d\xbc\xd1\x9a\x52\x9e\x19\xde\x1f\xa6\x50\xaa\x0d\x74\x13\xf8\x95\x42\x05\x77\x5d\x5a\x3e\x85\x27\xd8\xab\x3d\xd6\xef\xf5\xc3\xef\x88\x1b\xa2\x1b\xd1\x96\x76\x03\x1a\x2d\x70\xa2\x0c\x56\x85\xc8\x58\x2a\x82\x5d\xcb\x49\x66\xd4\x20\x99\xe3\x3c\xf4\x8c\x62\x3b\xe8\x1c\x12\x8e\x89\x12\xe2\x35\x71\x17\x52\x69\x70\x66\xf1\x5c\x71\x5b\x91\x05\x0f\xf4\xa6\x58\x5c\x2b\xe5\xb6\xac\x7e\x44\x3c\x16\x5a\xcc\xac\x11\x2d\xd3\xcc\xb3\x26\x1c\xb3\xf9\x98\xdb\x13\xb7\x6f\x17\xd1\x78\x57\xae\xa6\x26\xb1\x7d\x5b\x86\xd6\x1d\x5c\xa1\x38\xc2\x36\xf0\x40\x2a\xc5\x03\xe3\xaa\xe3\xb2\xcc\x2a\xbe\xa3\x61\x16\x15\x4a\xc4\x72\x0a\x9a\xcd\xf5\x0f\x5f\xd2\xd5\x85\x1b\xec\x55\x2e\x71\x95\x76\x0f\xb6\xe8\x07\xf1\x9f\x21\x19\xa8\xf2\xf8\x31\xe2\x1c\x79\x49\x2c\xae\x78\x61\x47\x0c\xb3\x54\x96\x76\x8c\xb9\x41\x09\x02\xeb\x6e\xda\xed\xc2\x0d\x37\xf6\xcf\xce\xf0\xb4\xdf\xe1\x36\xbb\xc1\xb9\x6d\x49\x4c\x2a\x28\x1b\x0c\xfe\x18\xfd\x0a\x05\x5b\xa4\x60\xcb\x8a\xd8\x27\x11\x37\xf4\x44\xaa\xea\x74\xff\x19\xb3\x31\x76\xaf\xed\xdb\x4a\x51\xb8\xb3\x75\x07\x5b\x56\xd5\x39\x18\xc7\x85\x5b\xad\xf1\x4b\x1f\x16\xc7\x6e\x41\xa7\xf7\x11\xa6\x78\xb5\xd1\xee\xf6\x21\xed\x35\x89\x76\xcd\x18\x4a\x44\x92\xd0\xb6\xd0\x52\x0d\x30\x82\xae\x21\xe4\x67\x0c\x3f\x1b\x7b\xce\xb2\x7f\xcf\x31\x53\x42\x9e\x71\xcc\x48\xdc\x8d\xc4\xce\x81\x9b\x22\xe1\x91\xd6\xc5\xb1\x8b\x59\x98\x21\x29\xc7\x70\xc5\x78\xe0\xe9\xd2\x57\x8c\xda\x2c\x96\xfd\xc4\xcd\x57\x45\x05\xba\xe3\xe9\x85\x22\x63\x1e\x30\xcc\x03\x22\xdd\x82\xce\xc6\xab\x09\x60\x3f\x22\x6f\xda\x2a\x4c\x72\x7b\x28\xb7\xe7\x64\x2e\x68\xe8\x09\xe6\x91\x29\x23\xb0\xd0\x86\x8e\xbd\x46\x6c\x86\xe7\xee\xba\xdc\x96\x54\x6b\xc8\x0c\xd7\x8e\x8b\xad\xd6\x88\xa5\x48\x48\x58\xb1\x30\xa5\x02\x4b\x3e\x4a\x24\x0d\x59\xdd\x92\x59\xcc\xc5\x5d\xa0\xe2\x13\x66\xd6\x78\xed\xb2\x6a\xb9\x5b\x9a\x9a\x3b\x9b\xb0\x29\x13\xe9\xee\xc2\x3e\xc4\x39\x10\x8e\xc5\xb8\x42\x4c\xa7\xee\xec\xd2\xe3\xab\xa1\x5d\x11\x9e\x4a\xde\x6a\x00\x2c\xd4\xa9\x44\x80\x7d\x9a\xa4\xc2\x8a\xd7\x18\x12\x13\x19\x87\xd4\x25\x3d\x1a\x75\xcf\xfa\xfd\x93\xcb\xa3\xd3\x4e\x6f\x70\x72\x88\x29\xb0\xec\x63\xb8\x1c\x5d\x92\x81\x9e\xeb\xe6\x58\x4a\x73\x89\x4e\xcf\xd0\xdd\xdc\x3e\x6a\xd0\x4b\x09\xec\x7c\x51\x3b\x94\x07\xb5\x59\x44\x54\x96\x72\x61\x15\xd0\x91\xf5\x96\x65\xeb\xee\x1a\x52\x14\xe6\x97\xf5\x2a\x0b\x7d\x94\x8d\xa5\xb3\xf1\x2c\x9a\xdb\x47\xd7\xc8\xfd\x40\x7d\xb4\x44\x2b\x2c\x3b\xe0\x5d\xc8\x92\xb4\x9a\x01\x3a\x96\xb3\xbf\x94\xf4\xf5\x1b\x29\x5c\x72\x5c\x4a\xa0\x18\x5d\x16\xa1\xd7\x39\xc6\xcc\xdc\x89\x54\x38\x87\x56\x35\x17\x5d\xcf\x26\x49\xae\x1d\xd5\xcc\xf1\x3e\x8d\x3a\x2f\x1d\xda\x5c\x4d\xf2\x44\xe2\xe2\x55\xe7\x12\xda\x8a\x5f\x8d\xcc\x83\xa8\x1a\x13\x32\x0d\x4a\xc7\x2e\xd5\x12\x29\x35\x2f\xac\xd1\x28\x1f\xd2\x9f\x37\xed\xd5\x92\x54\x3d\x61\x94\x67\x5c\x7d\x57\xb5\xdd\x4a\x93\x28\xb4\x52\x79\x4a\xbc\xb8\x49\xc4\x7c\x47\xd1\xa9\x58\xd3\xb1\x1f\xcf\x01\x77\x6b\x4c\xff\xff\xfc\xeb\x9f\xff\xae\x96\xb5\xbd\x82\x7e\xe3\xbf\x2a\xb5\x2d\xbe\x42\xe8\xfd\x54\xde\xec\xbb\xf6\xc6\xe7\xee\xf4\xb6\x2e\x78\xf6\x3a\x8f\xb7\x79\xcb\x04\x29\x27\x27\xe8\x4b\x7b\x9f\x67\xfe\x7e\xeb\xed\xde\xde\xcb\xf6\x6b\xff\xd5\xeb\xb7\x2d\x7b\x8d\x47\x5a\x60\x0b\x54\x85\x11\x44\xd6\x0b\x65\x71\xc3\xf4\xbe\xaa\xd7\x9e\x83\x8b\xc1\x57\xf4\x6e\x54\x46\x6e\xcb\x85\x68\x31\xd5\x7a\x07\xb6\x17\xcc\xdf\x59\x1f\xc2\x0b\x8c\x00\xe6\xc4\x2e\x1f\x66\xe9\xf1\xd0\xf3\x52\xe9\xe5\xe2\x3e\xaf\x5e\x28\xe5\x50\x1e\xda\x6d\x5f\x53\x1c\x06\xfe\xc6\x4b\x86\xc1\xcb\x7f\xa3\x58\xea\xb5\xf7\x1b\x4f\x04\x68\x3f\x15\xa0\xf5\x54\x80\xbd\x27\x02\xb4\xde\x3e\x15\xe0\xcd\x53\x01\x5e\x3f\x15\xe0\xfb\x3f\x08\x60\xf9\xf5\x1f\xdc\x5b\x3e\x5c\x7b\x4f\x01\xe1\x37\x78\xf9\xf2\x4a\x3d\x92\x36\x7d\x2f\xa1\x05\x56\x82\xf9\x93\x00\xa7\x52\x4e\x63\xfe\x2d\xf0\xb0\x52\x7b\x22\x99\x7a\x4c\x25\x9c\x8d\x85\x77\xfd\x7a\x29\x2e\x05\xbf\xfd\xa2\xb2\xf2\xf5\xca\xda\x17\x9e\xbf\xf9\xe5\x13\x6e\xbd\xe6\x6a\xe9\x72\xc4\x0f\xdc\x17\x32\x08\x51\xe4\x74\x97\x23\xb7\x9a\x88\x00\x85\x2a\xde\x22\x3f\x76\x46\xfd\xe5\x9d\x73\xf1\x40\x26\x12\x7a\x22\xa6\xbb\x1f\xcb\xb0\x7f\x34\x03\x14\xd5\xbb\xaa\xbc\xde\xfc\xc4\xe7\x41\x84\xfd\x5f\xd3\x37\xad\x22\x6d\x5e\x15\x9f\xc1\x3b\x07\xfb\x3e\x37\x16\xa9\x4f\xef\xd9\x5a\x4c\x57\x07\xcb\x33\x36\x9e\x16\x0a\x8d\xec\x61\x9c\x13\x81\x6b\x66\xad\xf6\xb7\x3e\x14\xbc\x21\x34\x1a\x5f\x3f\xfa\xcf\xd0\xf7\xee\xbf\x01\x00\x00\xff\xff\x22\x8c\x7a\x59\xb7\x1e\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 7863, mode: os.FileMode(420), modTime: time.Unix(1466940233, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

