// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xdf\x6f\xd3\x30\x10\xc7\x9f\xed\xbf\xe2\xe8\xa2\x0a\x04\x4d\x48\x79\x03\x75\x12\x54\x63\x44\x2a\x6c\x6a\xa8\x84\x84\x78\xc8\x92\x4b\x63\xe1\xc4\x96\x7d\x56\x3b\x8d\xfd\xef\x5c\x7f\xa4\xca\x06\xd2\xa4\xbd\xdd\xcf\xcf\xd7\x77\xe7\x95\x5d\xbb\xa2\xc2\xbc\x74\xca\xd2\xcb\x57\x70\x27\x45\x19\x9c\x86\x49\xed\xf3\x05\x34\x44\xd6\xbf\x4f\x12\x57\x6c\xe2\xb5\xa2\x26\xdc\x04\x8f\xae\x34\x1d\x61\x47\x71\x69\xda\x44\x63\x4d\xbe\x51\x35\xa1\xf3\x49\xb0\x7b\x33\x69\x0b\xcf\x7e\xef\xc2\x39\x1c\xad\x98\xb0\xb5\x30\x1e\x43\xd9\xb4\xa6\x82\xd7\xdb\x7f\x12\x71\xf2\x20\xa2\x3a\x4f\x85\xd6\xbb\x8c\x6b\x1f\x14\xcb\x7b\x29\x73\xa4\x60\x7f\x94\xd6\x21\xd1\xed\xe1\xed\xf3\x6c\x16\xa5\x52\x2c\x8d\xa1\xeb\xc2\xfb\x8d\x71\xd5\x2c\x9a\x4a\x29\x54\x0d\x3f\x61\x14\xdd\xcd\xb3\xfb\x11\xcc\x66\x30\x22\x17\x70\x04\xbf\x3e\x00\x35\xd8\x49\x21\xce\x60\x9e\x81\xf2\xb0\x8b\xbf\x81\x0d\x42\x67\x36\xd0\x21\x56\x60\x8f\x20\x2e\xea\x29\x43\x3e\xf3\x5e\x30\x6f\xc8\x12\x58\x36\x06\x26\xf8\x9f\xd2\x3f\xe0\x43\xc5\xb9\x1c\xd6\xd8\x9e\xe6\xdb\x1e\x87\xd8\xf7\x6e\x15\xc1\x5b\xb6\x50\x7b\x3c\x05\x78\x28\x51\x2b\xd9\x07\xcf\x60\xc5\x87\x00\xdf\x98\xa0\x2b\xa0\x5b\x8b\xcc\xda\xc9\x0f\x5f\xfb\x84\x52\x2f\xc4\x58\x5e\xe6\xa5\xa2\xeb\xa0\xf5\x61\x8d\xcb\x8b\xaf\x57\xdf\x2f\xf6\xab\xfc\xb4\xfc\xf8\x6d\xfe\x65\xb7\x44\xb1\xb8\xba\xfc\x9c\x2d\x38\xfc\x4e\x8a\xf6\x77\xa5\x1c\x4c\x2c\xc4\xfd\xd1\xb5\x59\xfb\x44\x0a\xfe\x26\x60\x19\x04\x51\x0a\xd1\x14\xa6\xe7\xe3\x94\x87\x26\x44\xe0\xb6\x83\x4e\x1e\x6e\xf8\xfc\x41\x63\xd6\xa9\xe3\x9f\x3b\xa1\xd3\x27\xd0\xbe\xef\xe5\x89\xd8\x1d\xe2\xd3\xc7\xf8\x95\xad\x0a\xc2\x67\x0b\x84\x7d\xfb\x63\x89\xbf\x01\x00\x00\xff\xff\x1d\x4c\x8e\xe0\x31\x03\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 817, mode: os.FileMode(420), modTime: time.Unix(1465407902, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

