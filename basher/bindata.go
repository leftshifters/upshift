// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x7f\x52\xe3\x46\xf6\xff\xdb\x3e\xc5\x8b\x71\x0d\xc9\xf7\x6b\x59\xd8\x4c\x92\x49\x32\xcc\x96\x63\x3b\x8c\x37\x80\x5d\x18\xb2\x95\xca\xa4\x26\x6d\xa9\x6d\xf5\x22\xa9\x55\xdd\x2d\x8c\x8b\x25\x37\xd8\x33\xec\x3d\xf6\x54\x7b\x84\x7d\xaf\x5b\x32\x92\x81\x0a\x09\xd9\xaa\x19\xb0\xd5\xdd\x9f\xf7\xfb\xbd\x4f\x8b\x53\x76\xc5\xbf\x93\x71\xc8\x95\xfe\xf4\x33\xb8\x6d\x36\x92\xab\x50\x28\xf0\x32\xe8\xe6\x99\x8e\xc4\xd2\xf8\xb1\x5c\x69\xff\xb1\x85\x45\x2e\xe2\xd0\x6f\xde\x35\x9b\x97\xd9\x4a\xb1\x90\xcf\x03\x25\x32\xe3\x70\x82\x5c\xc5\xe0\x2d\xf5\xfc\x04\x22\x63\x32\xfd\xb5\xef\x2b\xb6\xee\xae\x84\x89\xf2\x45\xae\xb9\x0a\x64\x6a\x78\x6a\xba\x81\x4c\xfc\x98\x2f\x8d\xc5\x44\x35\xfc\x12\x3e\x61\x1a\xbf\xfb\x22\xd5\x86\xc5\x71\x57\x47\xf0\x0e\x8a\xb5\xae\xe1\x49\x06\xaf\x5e\x41\x10\x25\x32\x84\xff\xbf\x79\xb0\xd0\xf5\x77\x9f\xa8\xa4\xb6\x89\xd4\x9e\x73\x93\x67\xc7\x3c\x71\x1a\x1f\x8f\x4f\x8f\xda\xbd\x66\x63\x38\x39\x6a\xf7\x9b\x8d\x73\x29\xcd\x8c\x69\xbd\x96\x2a\x3c\x6a\x1f\x36\x9b\x0d\xb1\x84\x9f\xa0\xd5\xee\xb7\xe0\xe8\x08\x5a\x46\xe5\xbc\x05\x3f\x7f\x03\x26\xe2\x69\xb3\xd1\xd8\x83\xe1\x04\x84\x06\x7a\xde\x81\x35\x87\x54\xae\x21\xe5\x3c\x84\xac\x40\xc1\x4d\x05\xc4\x61\x0b\x3e\x41\x88\xea\xf1\x06\x0f\x22\x09\x1e\x77\xab\xff\x00\x9d\x87\xf8\x75\x0e\x2b\x9e\x40\xe1\x02\x20\xed\x70\xe3\x8d\x30\x70\x80\x9f\x78\xac\xf9\xf6\x01\x2d\x2d\x45\xb3\x7c\xb8\x07\x97\xe8\x63\xd0\x91\xcc\xe3\x10\xcc\x26\xe3\x88\x42\xb2\xaa\xda\x3c\x29\xa3\x14\x81\x80\xe8\xa6\x63\x61\x66\x79\x1c\x3b\x2f\x9d\x8f\x4f\xa7\x17\x63\xeb\xa8\x6f\xcf\x07\x67\xc3\xf7\xd6\x59\x27\xd3\xe3\xef\x26\x27\x63\xf2\x53\xa3\x92\x52\xcd\x06\xc6\x1b\xb2\xdc\xe2\x42\xbb\x0f\xfd\x77\xaf\x7a\x68\x9c\xe1\x1c\x70\xab\xc3\x9e\xe7\x0b\x0c\x62\x1e\xf3\x49\x2a\x8a\xe4\xd9\xc2\xf5\x1e\x81\xd3\xe5\x7e\xd4\x19\xbf\x56\x21\x7b\xbb\x90\x97\x59\xc8\x0c\xff\x5d\xa0\xb9\x3d\xf2\x10\x76\x26\xc3\x89\xf3\xd1\x6f\xc0\x65\x98\x91\xa5\x37\x6b\x28\x8d\x02\xe6\x9c\x67\xf2\x29\xc5\x2e\x5d\x8a\x0e\x65\xba\x14\x2b\x87\xa5\x70\x7b\xa9\x95\xe7\x5d\x73\xb5\x90\x9a\x3f\x82\xec\xb2\x19\xeb\x30\xe6\x7f\x73\xc0\x75\x2b\xed\x0a\xac\x15\xcb\x32\xae\xec\x01\xc3\x94\x99\x8b\x24\x8f\x99\x91\xca\x1d\x19\x8d\x7f\x98\x0c\x1f\x31\xea\x26\x50\x79\x6a\xcd\x52\x79\x82\x65\xab\xc1\x5b\x63\xaa\xf6\x5a\xd0\x7b\xe7\x87\xfc\xda\x4f\xf3\xc2\x5c\x42\x1e\xca\x24\x13\x18\xd0\xe9\xdc\xa1\xce\xce\xa7\x7f\x1d\x0f\x2f\x3e\x5e\xfc\x38\x73\xd8\xe5\x83\xd9\xe0\xc2\x25\xd0\x7c\xf8\x7e\x7c\xea\xf2\xa7\x54\xe1\xb5\xf5\x4c\xb1\xe5\xf3\x1d\x7d\x34\x37\xe0\x49\xc8\x44\xc6\x97\x4c\xc4\x54\xe0\x37\x81\x0c\xb9\xed\x49\xe0\x59\xcd\x6c\xa9\x7a\x3a\x88\x78\x52\x94\x95\x17\x09\xec\x52\x11\x8f\x63\xd7\xaa\xc6\xe9\xb5\x50\x32\x25\x83\x70\x63\x78\x05\x22\x8b\x64\xca\x75\xe9\x13\xf0\x42\xae\x8d\x48\x99\x11\x32\x85\x56\x86\x0f\x97\x52\x25\x47\x3b\xdb\x3a\x29\x4b\x38\x2a\xdc\xa2\xfd\x4a\x5c\xf3\x70\xc4\x0c\x9b\x31\x13\xed\x34\xcb\x22\x60\xad\xf6\xe7\x54\xe2\x37\x41\xa6\xb8\x31\x1b\xf2\xd8\x40\x05\x11\x1e\xfc\x63\x1e\x2b\xd7\xce\x06\xa7\xff\x23\xbf\xfd\x86\x59\x1e\x73\xea\xd7\xd7\xda\xaf\xbb\x37\x41\xb1\x02\xe5\xef\x27\x3d\x30\xbe\xc9\xa4\x32\x0f\x1c\xe0\x6c\xea\x55\x6d\xea\xff\x3e\x9b\xb8\x05\x2e\x1c\x5c\x7e\x9d\x66\x14\x52\x3d\x8b\x85\x36\xd0\xcd\xd0\x3a\x2c\x2f\xdf\xad\x75\x33\xfb\xf4\x09\xa3\x7a\x15\xa3\x0a\xb0\x07\x3b\x44\xc6\xaa\x05\x6a\x1d\x5a\xb7\x76\x26\x33\xca\x1d\x3e\x53\xf2\x5a\x68\x54\x45\xa4\x2b\xfc\xbc\xc4\xaa\x29\x06\xf1\x1e\x1c\xa3\x5d\xd4\xb1\x2f\x2f\x27\x23\x58\x2a\x99\x6c\x15\xa5\xd5\x72\xaa\xae\x50\xd7\x62\xac\xda\x59\x9a\xdc\x64\xca\x7f\xd3\x3f\x78\xd3\x7f\xf3\x15\xfb\xe2\x30\x60\xaf\xf9\x21\x3b\xfc\x9c\xbd\xa6\x43\x27\x52\x66\x88\xa9\x64\xbe\x8a\x80\x1a\x94\x15\xd8\x01\x9c\x4b\x1b\x99\xe3\x20\x30\xc0\xe0\x72\x34\x19\x75\x80\x85\x21\x49\x4f\xc0\x48\xab\x85\xf5\x89\x5c\x42\x56\x68\xb9\x13\x04\x3b\xd9\xbc\x10\x5a\x5d\x7f\xeb\xce\xfa\x78\xbc\x40\x90\x72\x09\x96\xf6\x1c\xe0\xa0\xd1\x46\xd3\xe8\x92\x79\x1a\x96\x0e\x38\x5a\x32\x37\xc5\xb0\xd8\x4a\x79\x67\x58\x62\x34\xc2\xb6\xe0\xff\xd7\x4d\xe4\x02\x17\xb2\xd2\x83\xdf\x40\x28\x69\x1c\xe6\xb9\xc0\x81\xfd\xa9\x9f\x6b\xe5\xc7\x62\xc1\x6f\x78\xe0\xdb\x38\x7f\x9b\x87\xe1\x06\xbc\x00\xf6\x67\x4a\x60\xc5\x93\x5f\xf7\xc1\x76\x2f\x6d\x42\xc4\x7e\xfb\xf6\x2d\xb4\x3f\xd5\x1c\xb9\x8b\x30\x1b\x08\x12\xec\x72\x23\xf0\x04\x06\xf0\xb6\xa2\xc6\x5d\x0b\x83\xbb\x6d\x7a\x9f\x7d\xd6\x24\xa9\x7b\x30\x59\x92\xef\x28\x56\xd6\xaa\x8e\xb5\x1c\x02\x99\x6d\x40\x18\xeb\x62\x9c\x33\x11\xd3\xe9\x3e\x3a\x39\x56\x9c\xa1\x32\x0b\xee\xb6\x08\x4e\xf3\xb8\xa4\x07\xb7\x64\xc2\xdd\x23\x1c\x81\x48\x06\xe1\x91\x26\x14\x17\x97\x19\xd6\x95\x76\xf9\x97\x20\x43\xce\x05\x75\x6d\xe1\x57\xff\x44\x2c\x14\x53\x1b\xff\xd4\x7a\x6c\xc4\xaf\x45\xc0\xfd\x6a\xea\x7d\x80\xd2\xf7\x7e\x21\x7d\xd7\xbb\xbf\x58\x01\x19\x39\x6e\x09\xad\x0b\xc5\x52\x4d\xa9\x8f\x67\x9d\x36\x4f\x1c\xab\xe7\x2d\xe9\x5c\xe8\xf2\x21\x6d\x59\xc4\x7a\xe0\x89\x3c\xd1\x63\x62\x32\x8d\x10\x7b\x6c\xf3\x9e\x34\xd5\x76\x5a\x0e\x46\xbb\x6b\x14\x6a\x97\x19\x95\xea\x8e\xf2\x10\x39\xd9\x8f\x98\xe1\x96\x90\xa1\x16\x94\xdd\x5a\x62\x4a\x65\x15\x2f\x6c\x73\xbb\x9a\x68\x85\xa2\x8f\x91\xac\x12\xfe\x3d\xdf\x74\x6c\xfd\x54\xd1\xf1\xbb\x7a\x2e\x7a\x09\xee\xf8\xd6\x20\x0d\x95\x14\xe1\x30\xe6\x2c\xdd\x32\x84\xa2\xf7\xed\xce\xe5\xae\xef\xe6\xfa\x1a\x02\xda\xfe\x90\xb6\x14\x60\x97\xa9\xd8\x21\x2f\xbf\x09\x98\x97\x47\x06\xbb\x44\xa6\x82\x5b\x50\xa2\x11\x36\xdb\xd5\xf3\xa1\x45\xe5\x14\x72\x1a\xfc\x12\x5c\x19\xc5\x82\x47\x68\x57\x21\x67\xa0\x35\x4f\x16\x31\x7f\xbe\x0c\x56\x9c\x78\x1e\xfe\x09\x46\xf2\xf9\xd8\x31\xb5\x8f\xa7\xa0\x2c\xad\x1a\x04\x46\x5c\x63\x13\x29\x86\xd9\x60\xf8\xfd\xe0\xb8\xa0\x55\x83\xc9\xd9\xc7\xc1\xf0\x62\xf2\xc3\xe4\xe2\xc7\x87\xc3\x8c\x85\x0b\x64\xed\xc8\x50\x80\x25\xa0\x09\x0a\xbc\x14\x05\xd0\x58\xc1\xcd\x15\x8d\x59\x9e\x06\xd1\xb8\xca\xde\xea\x50\xcd\x86\xe2\xe1\x50\xc6\x98\x87\x47\xfb\x1f\x0e\x0e\x0f\x7f\x3a\xf8\xe6\xb0\x97\xec\x13\x15\xc4\xb6\xb3\xbb\xd2\xa7\x95\x45\x9c\xf3\xdd\x85\xd7\xb4\x90\xca\xfa\x63\x7c\xd6\x6c\x8c\x4f\x2f\x4f\x06\x17\xd3\xf3\x27\x86\xf4\x76\xf9\x7c\x3c\xbf\x3c\xb9\x98\x63\x53\x4e\x65\x94\x67\x58\xcb\x83\xb3\xd1\xf9\x74\x32\xfa\xf8\x7e\x7a\x3a\xf6\x8d\x94\xb1\xf6\x79\x61\x09\xb2\x0d\x76\x1d\x3a\x6e\xd9\x7f\x87\x77\x86\x1e\xfd\x78\x45\x5d\x16\x67\xc8\x74\x34\x85\xaf\x71\x94\xe0\x45\x0b\xff\x31\x58\x88\x15\xec\xbd\x47\xf7\x76\x40\xa6\xf1\x06\xb8\x52\x52\xe1\x82\xe2\xc8\x9b\x4d\xae\x52\x1e\x96\x17\x9f\xa5\x50\x38\xc1\xcc\x5a\x02\x76\x78\x99\x86\x38\xf6\x26\xc8\xfb\x83\x2b\x60\x69\x88\x1f\xb1\xdd\x60\x67\xbe\xa2\x6b\x1b\x83\x35\xdb\x80\xcc\x0d\x92\x8b\x98\xf3\x0c\x1e\xb7\xe6\x6d\xbb\xef\xd4\x1a\x46\x1c\x61\xb0\x4f\xa1\x1c\x94\xbc\x66\xa4\xda\x6c\x70\x36\x19\xc2\x4f\x34\x3e\x39\x09\x46\x9d\x3b\x78\x17\x32\xa5\x3e\x6b\x64\x9e\x2b\x28\xcd\x06\xe2\x90\x3f\x53\xaa\xe0\xa9\x8f\xc3\xe9\xe5\xd9\x05\x4a\xb0\x97\x42\x1c\x08\xbb\xc2\xef\x88\x4f\x60\x18\xd1\x97\xf6\x00\x3a\x2d\x70\xaa\x4c\xea\x4a\x64\x2c\x15\x41\xc7\x8e\xfc\x35\xcd\x1f\xe6\x28\x05\x5d\xc0\xed\x80\xda\x40\xc2\xb1\x50\x42\xbc\x60\x74\xf0\xc6\x6a\x70\x65\x7b\xd1\xbd\xad\xe8\x82\x02\xbd\x15\x36\xd7\x4a\xbb\xdd\xce\x02\xc4\xdb\x5a\xb1\xb6\x4e\x8c\x25\x23\xc4\x2e\x9c\xb2\xcd\x82\x5b\x89\xed\xdb\x6d\x36\xde\x95\xbb\x69\x3c\xb5\x6f\xcb\xd4\xba\x83\x2b\x54\x47\xd8\xf9\x18\x48\xa5\x78\x60\x5c\x77\xbc\x6f\xb3\x8a\xef\x6b\x58\x47\x85\x11\xb1\x5c\x81\x66\x1b\xfd\xf5\x87\xb4\xbe\xf1\x11\x7f\x95\x5b\x5c\xa7\x3d\x80\x3d\xfa\x41\xf4\x62\x46\x0e\xaa\x5c\x9b\xe7\x9c\xe3\xd8\x8f\xc5\x15\x2f\xfc\x88\x69\x96\xca\xd2\x8f\x31\x37\xa8\x41\x60\xc3\x4d\xa7\x5d\xba\xe1\xc1\xf1\xf9\x39\x4a\xfb\x1d\x61\xb3\x07\x5c\xd8\xee\xe7\x7e\x05\xe5\x11\x87\x3f\xc7\xbe\xc2\xc0\x1e\x19\xd8\xb3\x2a\x8e\x49\xc5\x47\x66\x22\x75\x75\x62\xce\x0b\xb6\xc0\xe9\xd5\xbe\xad\x34\x85\x3b\xdb\x77\x70\x64\x55\x83\x83\x79\x5c\x84\xd5\x3a\xbf\x8c\x61\x21\x76\x0f\x06\xa3\x6f\x61\x85\xa4\x58\xdb\x4c\x07\x69\x09\x36\x9d\x5a\x33\xd4\x88\x34\xa1\x63\xa1\xe5\x1e\x60\x04\x4a\x17\x14\x67\x4c\x3f\x9b\x7b\xce\xb3\x7f\xcf\xb1\x52\x42\x9e\x71\xac\x48\x3c\x8d\xbc\xc9\x81\x9b\xa2\xe0\x91\x35\xc5\xb1\xcb\x59\x58\x23\xe7\xc5\x74\xc5\x7c\xe0\xe9\x7d\xac\x18\x8d\x59\x6c\xfb\x89\x5b\xaf\xaa\x0a\x74\x3b\xd0\x5b\x43\x16\x3c\x60\x58\x07\xc4\x69\x05\xc9\x96\xeb\x14\x70\x1e\x51\x34\x6d\x17\x26\xbd\x3d\xd4\xdb\x73\x3a\x17\x2c\xef\x0c\xeb\xc8\x94\x19\x58\x58\x43\x62\xaf\x11\x9b\xa1\xdc\x8e\xab\x6d\x49\xbd\x86\xdc\x70\xed\xa8\x59\xbd\x47\xdc\xab\x84\x7c\x10\x1b\x53\x2a\xb0\xe5\xa3\x46\xd2\x90\xd7\x2d\x57\xc4\x5a\xec\x00\x35\x9f\x30\xb3\xce\xeb\x97\x5d\xcb\x76\x2b\xa3\x36\xce\x27\x6c\xc5\x44\xda\xd9\xfa\x87\x38\x07\xc2\xb1\x18\x77\x88\xd5\xca\xc9\x2e\x23\x5e\x4f\xed\x8a\xf2\xd4\xf2\xea\x09\xb0\x35\xa7\x92\x01\xf6\xa5\x16\x35\x56\xbc\x25\x58\xde\x17\xc4\x52\x97\xf4\x68\x3e\x3c\x1f\x8f\xcf\x3e\x9e\x4c\x07\xa3\xc9\xd9\x31\x96\xc0\xfd\x1c\xc3\xed\x18\x92\x0c\xf4\x46\x77\x17\x52\x9a\x8f\x18\xf4\x0c\xc3\xcd\xed\x75\x98\xee\xd8\xb0\xff\x41\xed\x53\x1d\x34\xd6\x11\x71\x49\xaa\x85\x3a\xa0\xe3\xc2\x3d\x4b\x86\x1d\xcb\x2f\x1a\xf3\xeb\x1a\x2d\x7d\x96\x8f\xa5\xf3\xf1\x3a\xda\xd8\xd7\x75\x91\xfb\x81\xf6\x68\x89\x5e\xb8\x9f\x80\x77\x21\x4b\xd2\x6a\x05\xe8\x58\xae\xff\x52\xf2\xd6\x3f\xc9\xe0\x92\xe3\x52\x01\xc5\x18\xb2\x08\xa3\xce\x31\x67\x36\x4e\xa5\x22\x38\xb4\xab\xbb\x9d\x7a\xb6\x48\x72\xed\xa8\x66\x9e\xc6\x12\x6d\xbe\x0f\x68\xb7\x5e\xe4\x89\xc4\xcd\xf5\xe0\x12\x5a\x2d\xae\x46\xe6\x41\x54\xcd\x09\x99\x06\x65\x60\xef\xcd\x12\x29\x0d\x2f\xec\xd1\xa8\x1f\xd2\x9f\x37\xfd\x7a\x4b\xaa\x4a\x98\xe7\x19\x57\x9f\x54\x7d\x57\x1b\x12\x85\x55\x2a\x4f\x89\x17\x77\x89\x98\xef\x2b\x92\x8a\x3d\x1d\xe7\xf1\x06\xf0\xb4\xc6\xf2\xff\xcf\xbf\xfe\xf9\xef\x6a\x5b\x3b\x28\xe8\x37\xfe\xaf\x52\xdb\xe2\xe5\xf3\xe8\x7b\x47\xb6\x6c\xf3\xdd\xa0\xab\x99\x5b\x2f\xdf\x9d\xd1\xfb\x1d\xcf\xa3\x4b\xaf\xe7\xa5\xd2\xcb\x05\xfe\x46\x3e\x6e\xf0\x1a\xda\x2a\xb6\x7a\xfd\xc3\xd6\x0b\x01\xfa\x2f\x05\xe8\xbd\x14\xe0\xe0\x85\x00\xbd\xaf\x5e\x0a\xf0\xe6\xa5\x00\x5f\xbe\x14\xe0\x8b\x3f\x08\x60\xa9\xe8\x1f\x3c\x5b\xbe\x1d\xf4\x5e\x02\xc2\x6f\xf0\x9e\xe2\x95\x76\x24\x7d\x7a\xf9\xab\x05\x16\xcd\xe6\x45\x80\x2b\x29\x57\x31\xff\x33\xf0\xb0\xa9\x79\x22\x59\x79\x4c\x25\x9c\x2d\x84\x77\xfd\xe5\xbd\xba\x94\xfc\xf6\xaf\x41\x95\x77\xd8\x3b\x7f\x55\xfa\xd5\x2f\xdf\x93\x35\x1b\xae\xed\xdc\x3f\xf1\x03\x7b\xa2\x6b\x64\x12\x37\xef\xfe\x1b\x00\x00\xff\xff\x6f\x7f\x0f\x46\x9a\x1a\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 6810, mode: os.FileMode(420), modTime: time.Unix(1465997468, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

