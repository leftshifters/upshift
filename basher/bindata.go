// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\xfd\x72\xdb\x36\xb6\xff\x5b\x7a\x8a\x53\xd9\x13\x27\xf7\x9a\xa2\x25\x27\x4d\xd2\xc4\xb9\xa3\x48\x4a\xa2\x5b\x7f\x68\x24\xbb\x77\x3a\x49\xc7\x03\x91\x90\x88\x6b\x92\xe0\x82\xa0\x65\x6d\xd6\x7d\x83\x7d\x86\x7d\x8f\x7d\xaa\x7d\x84\x3d\x07\x20\x29\x52\x96\x37\x49\x9d\x76\x52\xdb\x24\x80\xf3\xfd\xf1\x3b\xe0\x09\xbb\xe2\xef\x64\xe8\x73\x95\x3e\x7e\x02\x9f\x9b\x8d\xe8\xca\x17\x0a\x9c\x04\xda\x59\x92\x06\x62\xae\xdd\x50\x2e\x52\x77\xdb\xc2\x2c\x13\xa1\x5f\x5b\x49\x94\xb8\x66\x9a\x37\x6f\x9b\xcd\x8b\x64\xa1\x98\xcf\xa7\x9e\x12\x89\xb6\xa4\xbd\x4c\x85\xe0\xcc\xd3\xe9\x31\x04\x5a\x27\xe9\x4f\xae\xab\xd8\xb2\xbd\x10\x3a\xc8\x66\x59\xca\x95\x27\x63\xcd\x63\xdd\xf6\x64\xe4\x86\x7c\xae\x0d\x1b\x94\xcc\x2d\x38\x46\x2c\xc5\x67\x57\xc4\xa9\x66\x61\xd8\x4e\x03\x78\x03\xf9\x5a\x5b\xf3\x28\x81\x47\x8f\xc0\x0b\x22\xe9\xc3\x7f\xdf\xdc\x59\x68\xbb\x9b\x6f\x54\x54\xdb\x44\x62\x4f\xb9\xce\x92\xf7\x3c\xb2\x12\xbf\x1f\x9e\x1c\xed\x76\x9a\x8d\xfe\xe8\x68\xb7\xdb\x6c\x4c\xa4\xd4\x63\x96\xa6\x4b\xa9\xfc\xa3\xdd\xc3\x66\xb3\x21\xe6\xf0\x11\x5a\xbb\xdd\x16\x1c\x1d\x41\x4b\xab\x8c\xb7\xe0\xb7\x57\xa0\x03\x1e\x37\x1b\x8d\x1d\xe8\x8f\x40\xa4\x40\xef\xf7\x61\xc9\x21\x96\x4b\x88\x39\xf7\x21\xc9\xa9\xe0\xa6\x9c\xc4\x61\x0b\x7e\x40\x12\xd5\xe3\x0d\xee\x05\x12\x1c\x6e\x57\xff\x06\x69\xe6\xe3\xe3\x14\x16\x3c\x82\xdc\x04\x40\xd2\xe1\xc6\x1b\xa1\xe1\x00\xff\xe2\x61\xca\xcb\x17\xb4\x34\x17\xcd\xe2\xe5\x0e\x5c\xa0\x8d\x21\x0d\x64\x16\xfa\xa0\x57\x09\x47\x2a\xc4\xab\x2a\xcd\xbd\x3c\x0a\x16\x48\x10\xcd\xf4\x5e\xe8\x71\x16\x86\xd6\x4a\x93\xe1\xc9\xd9\xf9\xd0\x18\xea\xed\xa4\x77\xda\xff\x60\x8c\x75\x7c\xf6\xfe\xdd\xe8\x78\x48\x76\x6a\x54\xa2\xac\xd9\x40\x7f\x43\x92\x19\xba\xb0\xdb\x85\xee\x9b\x47\x1d\x54\x4e\x73\x0e\xb8\xd5\xd2\x9e\x66\x33\x74\x62\x16\xf2\x51\x2c\xf2\xe0\x29\xc9\x75\xb6\x90\x4b\x8b\xfd\x28\x33\x3e\x56\x49\x76\x36\x49\x5e\x24\x3e\x86\xe8\x37\x11\xcd\xcc\x91\xbb\x64\xc7\xd2\x1f\x59\x1b\x7d\x81\x5c\x82\x11\x59\x58\xb3\x46\xa5\x91\x93\x99\xf0\x44\xde\x27\xd8\x85\x0d\xd1\xbe\x8c\xe7\x62\x61\x69\x29\xdc\x5e\x48\xe5\x38\xd7\x5c\xcd\x64\xca\xb7\x50\xb6\xd1\x8c\x79\x18\xf2\xff\xb3\x84\xeb\x5a\x9a\x15\x58\x2a\x96\x24\x5c\x99\x03\x9a\x29\x3d\x15\x51\x16\x32\x2d\x95\x3d\x32\x18\xfe\x32\xea\x6f\x51\xea\xc6\x53\x59\x6c\xd4\x52\x59\x84\x69\x9b\x82\xb3\xc4\x50\xed\xb4\xa0\xf3\xc6\xf5\xf9\xb5\x1b\x67\xb9\xba\x44\xb9\x2f\xa3\x44\xa0\x43\xcf\xa6\x96\xea\x78\x72\xf6\xbf\xc3\xfe\xf9\xe5\xf9\xaf\x63\x4b\xbb\x78\x31\xee\x9d\xdb\x00\x9a\xf6\x3f\x0c\x4f\x6c\xfc\x14\x22\x3c\x35\x96\xc9\xb7\x3c\xdb\x90\x27\xe5\x1a\x1c\x09\x89\x48\xf8\x9c\x89\x90\x12\xfc\xc6\x93\x3e\x37\x65\x0a\x1c\x23\x99\x49\x55\x27\xf5\x02\x1e\xe5\x69\xe5\x04\x02\xab\x54\xc0\xc3\xd0\x96\xaa\x61\x7c\x2d\x94\x8c\x49\x21\xdc\xe8\x5f\x81\x48\x02\x19\xf3\xb4\xb0\x09\x38\x3e\x4f\xb5\x88\x99\x16\x32\x86\x56\x82\x2f\xe7\x52\x45\x47\x1b\xdb\xf6\x63\x16\x71\x14\xb8\x45\xfb\xb1\x2a\x72\x7f\xc0\x34\x1b\x33\x1d\x6c\xd4\xcf\xdc\x61\xad\xdd\x67\x94\xe2\x37\x5e\xa2\xb8\xd6\x2b\xb2\x58\x4f\x79\x01\x1e\xfc\x63\x16\x2b\xd6\x4e\x7b\x27\x7f\x92\xdd\xbe\xa0\x96\xc3\xac\xf8\xf5\xb5\xdd\xa7\xed\x1b\x2f\x5f\x81\xe2\xf7\xbd\x16\x18\xde\x24\x52\xe9\x3b\x06\xb0\x3a\x75\xaa\x3a\x75\xbf\x4d\x27\x6e\x08\xe7\x06\x2e\x1e\xcf\x12\x72\x69\x3a\x0e\x45\xaa\xcb\x56\xe6\xda\xb5\x76\x62\xde\xde\xa3\x54\xa7\xa2\x54\x4e\xac\xbe\xa3\x9a\x9a\xc6\x94\x75\x3d\xdf\x71\xed\x05\xbd\x98\xaa\x00\x13\x6a\xac\xe4\xb5\x48\x51\x14\x11\x2f\xf0\xef\x39\x66\x4d\xde\x9b\x77\xb0\x5a\x63\x3b\xc1\x56\x99\x42\x2a\x16\x01\xbd\xf1\xe5\x32\x0e\x25\xf3\x81\x6a\x8b\x88\xb5\x2c\x45\x87\xb9\xb1\x06\x6d\x62\xb1\x6f\x9a\x0a\x50\xc6\x52\xc5\x9f\x67\xb1\x67\x02\x78\x2c\x13\x0a\x58\xbe\x8d\x69\xb3\xd1\xeb\xf7\xcf\x2e\x4e\xcf\x2f\x87\x27\xbd\xd1\xb1\x31\x39\xb1\xa5\xf2\xc3\xa8\xe3\x67\x50\xbe\x2a\xc4\xb8\x24\x31\xf2\x85\x35\x2e\x70\x4b\x64\xd0\x88\xae\xe1\xbf\xda\x91\x9c\x21\x83\xa4\xe0\xb9\x06\x0e\x8d\xff\x28\x0f\x99\x4a\xc4\xfe\x96\xb5\xb2\x52\x0d\x8f\xcf\xc6\xc3\xc9\x65\x2e\xb8\xed\x49\x17\xa7\x83\xe3\xe1\xe5\x68\x30\x3c\x3d\x1f\xbd\x1b\x0d\x27\x26\x5c\x8c\xd4\x46\x50\xf4\x2a\xf5\x21\xc7\x61\x7e\x20\x3d\x5b\x90\xef\x17\xa2\xf0\xc4\x7b\x8c\x30\xb2\xe4\xc5\xc5\x68\x00\x73\x25\xa3\x8a\x12\x3b\x25\xbe\x59\x60\xd4\xe4\x00\xc7\xa0\x9a\xe8\x26\x51\xee\x8b\xee\xc1\x8b\xee\x8b\x97\xec\xc7\x43\x8f\x3d\xe5\x87\xec\xf0\x19\x7b\x4a\x87\x8e\xa5\x4c\x90\xa6\x92\x19\x8a\x46\x76\x34\x0c\xf7\x01\x11\xc2\x4a\x66\xd8\x92\x35\x30\xb8\x18\x8c\x06\xfb\xc0\x7c\xe3\xd0\x08\xd0\xdf\x24\x85\x89\x4e\x39\x87\xa4\x74\x5d\x2d\x1d\x0c\xc6\x70\x7c\x68\xad\x3d\xe1\xd6\x81\xca\x39\x12\xd9\x08\x1c\xc0\x96\x9f\xea\x94\x40\x84\xcc\x8c\xd5\x0d\xe9\xa3\x39\xb3\x78\x02\xcb\x5e\xc1\xef\x14\x8b\x1d\x81\x89\x92\xf8\x1d\x17\xbf\xc2\x08\x21\x60\x92\x65\x02\xa1\xd3\x63\x37\x4b\x95\x1b\x8a\x19\xbf\xe1\x9e\x6b\x32\xee\x6d\xe6\xfb\x2b\x70\x3c\xd8\x1b\x2b\x0c\x63\x63\xd7\x3d\x30\x7d\x24\xd5\x3e\xd2\x7e\xfd\xfa\x35\xec\x3e\x4e\x39\xa2\x48\xa1\x57\xe0\x45\xd8\x6f\x06\xe0\x08\x4c\xa8\xcf\x15\x31\x6e\x5b\x98\x6c\x65\xfb\x79\xf2\xa4\x49\x5c\x77\x60\x34\x27\xdb\x91\xaf\x8c\x56\xfb\x36\x1d\x3c\x99\xac\x40\x68\x63\x62\xec\xf8\x01\x4b\xe3\x3d\x34\x72\xa8\x38\x43\x61\x66\xdc\x6e\x11\x9c\x90\x51\x01\xd4\x3e\x93\x0a\xb7\x5b\xd0\x5a\x6e\xe5\x39\xfc\xee\x1e\x8b\x99\x62\x6a\xe5\x9e\x18\x23\x0c\xf8\xb5\xf0\xb8\x5b\x8d\xa6\x4f\x50\x98\xd3\xcd\x09\xde\xc9\x89\x2a\x65\x54\x60\x8a\x8b\xb1\x0e\x51\xdc\x45\x2c\x15\xb7\xaf\x13\x32\xd5\x7c\xd3\x02\xb9\xe3\x0a\x74\x97\x0b\xf3\x29\x6e\x99\x43\x05\x44\x34\xf0\x94\xf4\xa7\x73\x14\x47\x36\x92\xf3\x9a\x41\xff\x79\x09\x69\x73\xc7\xbc\xdf\x45\xbd\xba\xfc\x27\xf8\x36\x5e\xc0\x86\x1a\x1f\xf3\xb3\xbf\x91\x74\x1b\x5a\x10\xae\x6d\x6c\x46\x26\xe1\xec\x66\xb1\xe8\x63\x3b\x6e\xae\xf1\x75\x6d\xa7\x81\xeb\xb4\xbb\x86\xb6\x37\x41\x74\x21\xdd\x20\xf3\x11\xbe\xff\x8a\x29\x68\xb0\x3b\x0a\x43\xe9\x97\x4a\x8c\xf9\xa4\xa2\x74\x99\x7c\xd5\x4c\xc8\xe5\xdd\x86\xc7\x0b\xf2\x1f\xf8\x6a\xdf\x24\x78\x95\x3a\x3e\xab\xaf\xa5\x5e\x10\xb7\xd0\x1c\xfb\x88\x92\xc2\xef\x87\x9c\xc5\x25\x98\xcc\xdb\xe4\x26\x84\x6b\xbb\x16\x02\x2e\xc1\xa3\xed\x77\x11\x6e\x4e\xec\x22\x16\x1b\x38\xf7\x8b\x04\xb3\xe2\x48\x6f\x13\xf3\x56\xe8\xe6\xe8\x79\x80\x7d\x79\xf1\xf5\xa4\x45\xe5\x14\x96\x6d\x7c\xf0\xae\xb4\x62\xde\x16\x84\x9e\xf3\xe9\xa5\x29\x8f\x66\x21\xff\x7a\x1e\x2c\x3f\xf1\x75\xf4\x8f\xd1\x93\x5f\x4f\x3b\xa4\xfa\x76\x1f\x29\x83\xc0\x7b\xd8\x9c\xaf\xb1\xca\xe5\xb8\xa7\xd7\xff\xb9\xf7\x3e\x47\xe0\xbd\xd1\x29\x76\xb7\xf3\xd1\x2f\xa3\xf3\x5f\xef\xe2\x1e\xe6\xcf\x70\xc0\x43\x30\x0b\x2c\x82\x94\x48\x81\x13\x23\x03\xc2\x28\xb8\xb9\x22\x31\x43\x04\x10\x0c\xab\x40\xbf\x4e\xaa\xd9\x50\xdc\xef\xcb\x10\xe3\xf0\x68\xef\xd3\xc1\xe1\xe1\xc7\x83\x57\x87\x9d\x68\x8f\xa6\x06\xac\x8b\x9b\x2b\x5d\x5a\x99\x85\x19\xdf\x5c\x78\x4a\x0b\xb1\xac\xbf\xc6\x77\xcd\xc6\xf0\xe4\xe2\xb8\x77\x7e\x36\xb9\x07\xcf\x95\xcb\x93\xe1\xf4\xe2\xf8\x7c\x8a\x5d\x23\x96\x41\x96\x60\x2e\xf7\x4e\x07\x93\xb3\xd1\xe0\xf2\xc3\xd9\xc9\xd0\xd5\x52\x86\xa9\xcb\x73\x4d\x10\x98\xb2\x6b\xdf\x8e\x21\xdd\x37\xd8\xd6\x3b\xf4\xe3\x11\xb5\x01\x6c\x72\x67\x83\x33\xf8\x09\x7b\x1d\x82\x28\xfc\xc7\x60\x26\x16\xb0\xf3\x01\xcd\xbb\x0f\x32\xc6\xda\xca\x95\x92\x0a\x17\x14\x47\x8c\xa3\x33\x15\x73\xbf\xa8\xa2\x73\xa1\xb0\xc5\xea\xa5\x04\x6c\x41\x32\xf6\xb1\x2f\x8f\x70\x44\xf4\xae\x0c\xb8\x1a\x61\x7b\xa3\xd6\x71\x45\x13\x3e\x83\x25\x5b\x81\xcc\x34\xa2\x8c\x90\xf3\x04\xb6\x6b\xf3\x7a\xb7\x6b\xc5\xea\x07\x1c\xc9\x60\x9d\x42\x3e\xc8\x79\xc9\x48\xb4\x71\xef\x74\xd4\x87\x8f\xd4\xdf\x39\x31\x46\x99\xf7\x71\x6c\xd6\x85\x3c\x4b\x1c\x52\x16\x50\xa8\x0d\x34\x6e\xfc\x46\xa1\x82\xa7\x2e\x73\xec\xf3\xd8\xdc\x1f\x60\xfd\xde\x64\x7e\x4b\x00\x14\xdd\x88\xb6\x34\x07\xd0\x68\x9e\x15\x65\x54\x17\x22\x61\xb1\xf0\xf6\x0d\x26\x59\x52\x83\x64\x16\xf3\xd0\x5d\x8d\xe9\xa0\x2b\x88\x38\x26\x8a\x8f\xb3\xe8\x3e\xc4\x52\xe3\x4a\x79\x27\xf2\xb9\x22\x0b\x32\x74\x16\x58\x5c\x2b\xe5\xb6\xa8\x7e\x04\x3c\x4a\x2d\x96\xc6\x88\x06\xce\x66\x49\x1b\x4e\xd8\x6a\xc6\x0d\xc7\xdd\xcf\x65\x34\xde\x16\xbb\xa9\x49\xec\x7e\x2e\x42\xeb\x16\xae\x50\x1c\x61\x1a\xb8\x27\x95\xe2\x9e\xb6\xd5\x71\x5d\x66\x15\xdf\x4b\x61\x19\xe4\x4a\x84\x72\x01\x29\x5b\xa5\x3f\x7d\x8a\xeb\x1b\xb7\xd8\xab\xd8\x62\x2b\xed\x01\xec\xd0\x0f\xc2\x3f\x63\x32\x50\xe5\x86\x65\xca\x39\xe2\x92\x50\x5c\xf1\xdc\x8e\x18\x66\xb1\x2c\xec\x18\x72\x8d\x12\x78\xc6\xdd\x74\xda\x86\x1b\x1e\x1c\x4e\x26\xc8\xed\x1b\xdc\x66\x0e\x58\xb7\xad\x81\x49\x85\xca\x16\x83\x7f\x8d\x7e\xb9\x82\x1d\x52\xb0\x63\x44\x1c\x92\x88\x5b\x7a\x22\x55\x75\x1a\xb2\x66\x6c\x86\xdd\x6b\xf7\x73\xa5\x28\xdc\x9a\xba\x83\x2d\xab\xea\x1c\x8c\xe3\xdc\xad\xc6\xf8\x85\x0f\x73\xb6\x3b\xd0\x1b\xbc\x85\x05\xce\x4f\xa9\x1d\x71\xa4\x99\xc5\xe8\xd4\x92\xa1\x44\x24\x09\x1d\xf3\x0d\xd4\x00\x2d\x68\xd6\x21\x3f\x63\xf8\x99\xd8\xb3\x96\xfd\xff\x0c\x33\xc5\xe7\x09\xc7\x8c\xc4\xd3\x08\xec\x2c\x71\x9d\x27\x3c\xc2\xba\x30\xb4\x31\x0b\x4b\x04\xe5\x18\xae\x18\x0f\x3c\x5e\xfb\x8a\x51\x9b\xc5\xb2\x1f\xd9\xf5\xaa\xa8\x40\x83\x64\x5a\x2a\x32\xe3\x1e\xc3\x3c\x20\xd0\x2d\x88\x37\xce\x3f\x80\xfd\x88\xbc\x69\xaa\x30\xc9\xed\xa0\xdc\x8e\x95\x39\x87\xa1\xa7\x98\x47\xba\x88\xc0\x5c\x1b\x62\x7b\x8d\xb4\x19\xf2\xdd\xb7\xb9\x2d\xa9\xd6\x90\x19\xae\x2d\x16\xab\xd7\x88\xb5\x48\x08\x58\xb1\x30\xc5\x02\x4b\x3e\x4a\x24\x35\x59\xdd\x80\x59\xcc\xc5\x7d\xa0\xe2\xe3\x27\xc6\x78\xdd\xa2\x6a\xd9\x51\x50\xad\xac\x4d\xd8\x82\x89\x78\xbf\xb4\x0f\x61\x0e\x24\xc7\x42\xdc\x21\x16\x0b\xcb\xbb\xf0\x78\x3d\xb4\x2b\xc2\x53\xc9\xab\x07\x40\xa9\x4e\x25\x02\xcc\xfd\x27\x15\x56\x1c\x63\x48\x4c\x44\x1c\x32\x2d\xe0\xd1\xb4\x3f\x19\x0e\x4f\x2f\x8f\xcf\x7a\x83\xd1\xe9\x7b\x4c\x81\x75\x1f\xc3\xed\xe8\x92\x04\xd2\x55\xda\x9e\x49\xa9\x2f\xd1\xe9\x09\xba\x9b\x9b\x9b\x13\xba\x8e\x81\xbd\x4f\x6a\x8f\xf2\xa0\xb1\x0c\x08\xca\x52\x2e\xd4\x09\x5a\xb0\xde\x31\x68\xdd\x8e\x21\x79\x61\x7e\xda\xac\xa2\xd0\xaf\xb2\xb1\xb4\x36\x5e\x06\x2b\x73\xb3\x1b\xd8\x1f\xa8\x4f\x2a\xd1\x0a\xeb\x0e\x78\xeb\xb3\x28\xae\x66\x40\x1a\xca\xe5\xff\x14\xf0\xf5\x3b\x29\x5c\x60\x5c\x4a\xa0\x10\x5d\x16\xa0\xd7\x39\xc6\xcc\xca\x8a\x94\x3b\x87\x76\xb5\xcb\xae\x67\x92\x24\x4b\x2d\xd4\xcc\x70\x68\x47\x9d\xd7\x0e\x6d\xd7\x93\x3c\x92\xb8\xb9\xee\x5c\xa2\x56\xf3\xab\x96\x99\x17\x54\x63\x42\xc6\x5e\xe1\xd8\xb5\x5a\x22\xa6\xe6\x85\x35\x1a\xe5\x43\xf8\xf3\xa2\x5b\x2f\x49\x55\x0e\xd3\x2c\xe1\xea\x87\xaa\xed\x6a\x4d\x22\xd7\x4a\x65\x31\xe1\xe2\x36\x01\xf3\x3d\x45\x5c\xb1\xa6\x63\x3f\x5e\x01\x9e\x4e\x31\xfd\xff\xf5\x8f\xbf\xff\xb3\x5a\xd6\x0e\x72\xf8\x8d\xff\x57\xa1\x6d\xfe\x9d\x62\xf0\x73\x31\xd9\xf7\xcd\xc4\x67\x67\x7a\x53\x17\x1c\x33\xce\xe3\x34\x6f\x90\x20\xe5\xe4\x1c\x7d\x69\xe6\x79\xe6\x1e\x76\x5e\x1e\x1c\x3c\xed\x3e\x77\x9f\x3d\x7f\xd9\x31\x63\x3c\xc2\x02\x53\xa0\x2a\x88\x20\x30\x5e\x28\x8a\x1b\xa6\xf7\x55\xb3\xf1\x18\x6c\x0c\x3e\xa3\xcb\xa9\x22\x72\x3b\x36\x44\xf3\xa5\xce\x2b\x30\xbd\x60\xf5\xca\xf8\x10\x9e\x60\x04\x30\x2b\x76\x71\xfb\x4b\x37\x94\x8e\x13\x4b\x27\x13\x77\x71\x75\xa9\x94\xa5\x72\xdf\x69\x73\x65\x63\x69\xe0\x6f\x1c\x32\x34\x0e\xff\xad\x7c\xab\xd3\x3d\x6c\x3d\x90\x40\xf7\xa1\x04\x3a\x0f\x25\x70\xf0\x40\x02\x9d\x97\x0f\x25\xf0\xe2\xa1\x04\x9e\x3f\x94\xc0\x8f\x7f\x90\x80\xc1\xd7\x7f\xf0\x6c\x71\x3b\xee\x3c\x84\x08\xbf\xc1\xe1\xcb\x29\xf4\x88\xba\xf4\xf1\x23\x15\x58\x09\x56\x0f\x22\xb8\x90\x72\x11\xf2\xef\x41\x0f\x2b\xb5\x23\xa2\x85\xc3\x54\xc4\xd9\x4c\x38\xd7\xcf\xd7\xe2\x52\xf0\x9b\xaf\xa1\x95\x6f\x38\x1b\x1f\x5a\x7f\x77\x8b\x7b\xe2\x66\xc3\xd6\xd2\xf5\x1b\xd7\xb3\x5f\x7d\x90\x44\x9e\xd3\x7d\x8e\xd8\x6a\x2e\x3c\x14\x2a\xbf\x8b\x7c\xdb\x9b\x0e\xd7\x33\x67\x79\x41\x26\x22\xba\x87\xa6\xd9\x8f\x25\xd8\x3f\xda\x1e\x8a\xea\x5c\x55\x6e\x6f\x7e\xe6\x2b\x2f\xc0\xfe\x9f\xd2\x17\x5e\x11\xb7\xaf\xf2\x67\x70\xce\xc1\xdc\xcf\xcd\x44\xec\xd2\xa5\x79\x2a\x16\xf5\x97\x05\x8f\xad\xdc\x7c\x91\x22\x7a\x98\x65\x04\xe0\xda\x49\xa7\xfb\xbd\x99\x82\x33\x86\x56\xeb\xcb\xac\xff\x0c\x7d\xe9\x3b\x16\x82\x48\xcd\x7b\x49\x72\x16\x8f\x74\x16\x17\x4e\xf8\x96\xab\xe7\xfa\x77\x8c\xc3\x26\xb6\x41\xe9\x67\xd8\x38\x37\xae\xa3\x93\xe4\x92\xc6\x3a\xf3\xbd\xc5\x06\x11\x21\xcf\xd1\xb8\x27\x63\x71\xfe\x25\xd6\xb8\x6d\x3d\x4b\x27\x22\xa4\xe1\xcc\x9c\x2f\xb8\x08\xfb\x25\x22\x11\xe5\x07\x44\xd3\x40\x7c\x7f\xba\xc4\xc0\x9b\x62\xdf\xf5\x0a\x0e\xbd\x49\xff\xc3\xe8\x97\xe1\x7a\x50\x27\xe2\xe5\x43\xd9\xc4\x3b\xa6\xdb\x96\x8f\x5d\xf3\xb8\xbe\x7a\xde\xf6\xb9\xc4\xb5\xcc\xb2\x84\x5c\x58\xbb\x92\x2e\x31\x88\xef\x13\x94\xa9\x0a\x55\x5c\x7a\xa3\x14\xd4\xdd\xb3\xf8\xaf\x22\x01\xe7\x2f\x95\x0f\x32\xdd\xb6\x48\x18\x71\x2d\x5f\xe9\x28\xc1\xad\x2a\xda\xdc\xd4\xb4\xd7\x9c\x6a\xbe\xfd\x73\x4e\x4d\xbe\x1a\xb5\xda\x0a\x51\xb9\xc3\x2c\x97\xca\x51\xd0\x6e\xbb\xf4\x6f\x43\xbc\x76\x7e\x8a\x16\xad\x6c\x35\x31\x0c\x11\xba\xd2\xfb\x77\x00\x00\x00\xff\xff\x0d\xb5\xb5\x52\xa3\x21\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 8611, mode: os.FileMode(420), modTime: time.Unix(1467051190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

