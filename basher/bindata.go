// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\xff\x6e\xdb\xba\xf5\xff\xdb\x7e\x8a\x73\x1d\xa3\x69\xbf\x5f\xdb\x8a\x9d\x74\xe8\xda\xa6\x83\x6b\xfb\xa6\xde\xf2\xc3\x88\x9d\x3b\x14\xed\x45\x2f\x2d\xd1\x16\x17\x49\x14\x48\x2a\x8e\x91\x65\x6f\xb0\x67\xd8\x7b\xec\xa9\xf6\x08\x3b\x87\x94\x6c\xc9\x49\xd0\x74\xd8\x80\x36\x91\x44\xf2\xfc\x3e\xe7\xf3\x61\xce\xd8\x35\xff\x59\x46\x01\x57\xfa\xe5\x2b\xb8\xab\xd7\xe2\xeb\x40\x28\x68\xa7\xd0\xc9\x52\x1d\x8a\x85\xf1\x22\xb9\xd4\xde\x63\x0b\xf3\x4c\x44\x81\x57\xbf\xaf\xd7\xaf\xd2\xa5\x62\x01\x9f\xfa\x4a\xa4\xc6\xc9\xf1\x33\x15\x41\x7b\xa1\xa7\xa7\x10\x1a\x93\xea\xb7\x9e\xa7\xd8\xaa\xb3\x14\x26\xcc\xe6\x99\xe6\xca\x97\x89\xe1\x89\xe9\xf8\x32\xf6\x22\xbe\x30\x56\x26\x9a\xe1\x15\xe2\x63\xa6\xf1\xbd\x78\x85\x0f\x90\x3f\x75\x0c\x8f\x53\x78\xf1\x02\xfc\x30\x96\x01\xfc\xff\xed\x83\x85\x8e\x57\xf9\x22\x12\x6d\x58\x14\xd1\x8a\x8a\x2b\x9b\xc9\xf6\x29\x37\x59\x7a\xc2\x63\x67\xf6\xc9\xe8\xec\xb8\xd9\xad\xd7\x06\xe3\xe3\x66\xaf\x5e\xbb\x94\xd2\x4c\x98\xd6\x2b\xa9\x82\xe3\xe6\x61\xbd\x5e\x13\x0b\xf8\x02\x8d\x66\xaf\x01\xc7\xc7\xd0\x30\x2a\xe3\x0d\xf8\xf5\x1d\x98\x90\x27\xf5\x5a\x6d\x0f\x06\x63\x10\x1a\xe8\x7b\x0b\x56\x1c\x12\xb9\x82\x84\xf3\x00\xd2\x5c\x0a\x6e\xca\x45\x1c\x36\xe0\x27\x14\x51\x3e\x5e\xe3\x7e\x28\xa1\xcd\xdd\xea\x5f\x41\x67\x01\xbe\x4e\x61\xc9\xe3\x8d\x17\x64\x1d\x6e\xbc\x15\x06\x0e\xf0\x89\x47\x9a\x6f\x3e\xd0\xd2\x42\xd4\x8b\x8f\x7b\x70\x85\x81\x06\x1d\xca\x2c\x0a\xc0\xac\x53\x8e\x52\x48\x57\xd9\x9a\x27\x75\x14\x2a\x50\x20\x86\xe9\x44\x98\x49\x16\x45\x2e\x4a\x97\xa3\xb3\x8b\xd9\xc8\x06\xea\xe3\x65\xff\x7c\xf0\xc9\x06\xeb\xf4\xe2\xe4\xe7\xf1\xe9\x88\xe2\x54\x2b\xd5\x55\xbd\x86\x49\x87\x34\xb3\x72\xa1\xd9\x83\xde\x87\x17\x5d\x74\xce\x70\x0e\xb8\xd5\xc9\x9e\x66\x73\x4c\x66\x16\xf1\x71\x22\xf2\x0a\xda\x88\xeb\x3e\x22\x4e\x17\xfb\xd1\x66\x7c\x2d\x8b\xec\xee\x8a\xbc\x4a\x03\x66\xf8\x0f\x09\xcd\xec\x91\x87\x62\x27\x32\x18\xbb\x18\x7d\x47\x5c\x8a\x95\x59\x44\xb3\x22\xa5\xb6\xad\x39\x6c\x99\x88\xff\xd9\x09\xaa\xda\x62\x57\x60\xa5\x58\x9a\x72\x65\x0f\x18\xa6\xcc\x54\xc4\x59\xc4\x8c\x54\xee\xc8\x70\xf4\xcb\x78\xf0\x88\xea\x5b\x5f\x65\x89\x55\xae\xb2\x18\x3b\x4c\x43\x7b\x85\x05\xd5\x6d\x40\xf7\x83\x17\xf0\x1b\x2f\xc9\x72\xa3\x48\xf2\x40\xc6\xa9\xc0\xb0\x5f\x4c\x9d\xd4\xc9\xe5\xc5\x1f\x47\x83\xd9\xb7\xd9\xe7\x89\x93\x5d\x7c\x98\xf4\x67\x2e\xcd\xd3\xc1\xa7\xd1\x99\xcb\x72\x61\xc2\x91\x8d\x44\xbe\xe5\xf5\x8e\x3d\x9a\x1b\x68\x4b\x48\x45\xca\x17\x4c\xd8\x36\xbc\xf5\x65\xc0\xed\xf8\x80\xb6\xb5\xcc\x36\x54\x5b\xfb\x21\x8f\xf3\xe2\x6f\x87\x02\x07\x4a\xc8\xa3\xc8\x4d\x95\x51\x72\x23\x94\x4c\xc8\x21\xdc\x18\x5c\x83\x48\x43\x99\x70\x5d\xc4\x04\xda\x01\xd7\x46\x24\xcc\x08\x99\x40\x23\xc5\x8f\x0b\xa9\xe2\xe3\x9d\x6d\xad\x84\xc5\x1c\x0d\x6e\xd0\x7e\x25\x6e\x78\x30\x64\x86\x4d\x98\x09\x77\xe6\x5a\x9e\xb0\x46\xf3\x35\x35\xe2\xad\x9f\x2a\x6e\xcc\x9a\x22\xd6\x57\x7e\x88\x07\xff\xb3\x88\x15\x6b\xe7\xfd\xb3\xff\x51\xdc\xbe\xe3\x56\x9b\x39\xf3\xab\x6b\xcd\xa3\xce\xad\x9f\xaf\x40\xf1\xfb\xc9\x08\x8c\x6e\x53\xa9\xcc\x83\x00\x38\x9f\xba\x65\x9f\x7a\x3f\xe6\x13\xb7\x82\xf3\x00\x17\xaf\x17\x29\xa5\x54\x4f\x22\xa1\x0d\x74\x52\xf4\x0e\x5b\xd3\x73\x6b\x9d\xd4\x7e\x7d\xc2\xa9\x6e\xc9\xa9\x5c\xd8\x83\x1d\x22\x65\xe5\x06\xb5\x01\xad\x7a\x3b\x91\x29\xd5\x0e\x9f\x28\x79\x23\x34\x9a\x22\x92\x25\x3e\x2f\xb0\x6b\x72\xcc\xdc\x83\x13\xf4\x8b\xe6\xea\xd5\xd5\x78\x08\x0b\x25\xe3\x8d\xa1\xb4\x5a\x00\xe0\x12\x6d\xcd\x11\xd0\xc2\x5e\x7c\x9b\x2a\xef\x4d\xef\xe0\x4d\xef\xcd\xef\xd9\xef\x0e\x7d\x76\xc4\x0f\xd9\xe1\x6b\x76\x44\x87\x4e\xa5\x4c\x51\xa6\x92\xd9\x32\x04\x1a\x23\x56\x61\x0b\x10\x3d\xd6\x32\xc3\x71\x6d\x80\xc1\xd5\x70\x3c\x6c\x01\x0b\x02\xd2\x1e\x83\x91\xd6\x0a\x1b\x13\xb9\x80\x34\xb7\x72\x27\x09\x16\x7f\xda\x01\x34\x3a\xde\x26\x9c\x55\x10\x9b\xa1\x90\x62\x09\x16\xf6\x1c\x20\x1c\x68\xa3\x09\x60\x64\x96\x04\x45\x00\x8e\x17\xcc\x61\x0d\x36\x5b\xa1\xef\x1c\x5b\x8c\x80\x66\x23\xfc\xff\x3a\xb1\x9c\xe3\x42\x5a\x44\xf0\x1d\x04\x92\x40\x2b\xcb\x04\xc2\xea\x4b\x2f\xd3\xca\x8b\xc4\x9c\xdf\x72\xdf\xb3\x79\xfe\x98\x05\xc1\x1a\xda\x3e\xec\x4f\x94\xc0\x8e\xa7\xb8\xee\x83\x9d\x5e\xda\x04\x28\xfb\xfd\xfb\xf7\xd0\x7c\xa9\x39\xd2\x0c\x61\xd6\xe0\xc7\x38\xe5\x86\xd0\x16\x98\xc0\xbb\x92\x19\xf7\x0d\x4c\xee\x66\xe8\xbd\x7a\x55\x27\xad\x7b\x30\x5e\x50\xec\x28\x57\xd6\xab\x96\xf5\x1c\x7c\x99\xae\x41\x18\x1b\x62\x44\x83\x90\xe9\x64\x1f\x83\x1c\x29\xce\xd0\x98\x39\x77\x5b\x04\x27\xd4\x2c\x40\xfc\x8e\x5c\xb8\x7f\x04\xc9\x89\x0a\x90\x3c\xb2\x84\xf2\xe2\x2a\xc3\x86\xd2\x2e\xff\xe6\xa7\x48\x8f\xa0\x6a\x2d\xfc\xcd\x3b\x15\x73\xc5\xd4\xda\x3b\xb3\x11\x1b\xf2\x1b\xe1\x73\xaf\x5c\x7a\x5f\xa1\x88\xbd\x97\x6b\xdf\x8d\xee\x6f\x56\x41\x4a\x81\x5b\x40\x63\xa6\x58\xa2\xa9\xf4\xf1\xac\xb3\xe6\x89\x63\xd5\xba\x25\x9b\x73\x5b\xbe\x26\x0d\x2b\xb1\x9a\x78\xa2\x38\xf4\x99\xf8\x46\x2d\xc0\x19\x5b\xdf\x52\x9b\xca\x4e\xcb\x94\x68\x77\x85\xe8\xec\xf2\x97\xc2\xdc\x61\x16\x20\x73\xfa\x8c\x15\x6e\x69\x13\x5a\x41\xd5\xad\x25\x96\x54\x5a\x8a\xc2\xa6\xb6\xcb\x85\x96\x1b\xfa\x18\x15\x2a\xc4\x7f\xe2\xeb\x96\xed\x9f\xb2\x74\x7c\x57\xcf\x95\x5e\x08\x77\xac\xa8\x9f\x04\x4a\x8a\x60\x10\x71\x96\x6c\x18\x41\x3e\xfb\x76\x71\xb9\xe3\x39\x5c\x5f\x81\x4f\xdb\x1f\x92\x8b\x5c\xd8\x55\x22\x76\x28\xc6\x77\x05\x66\xc5\x91\xfe\x2e\xdd\x28\xc9\xcd\x89\xcb\x10\x87\xed\xf2\xf9\xa2\x45\xe9\x14\xb4\xdb\xf8\xe2\x5f\x1b\xc5\xfc\x47\xc8\x51\xae\xa7\xaf\x35\x8f\xe7\x11\x7f\xbe\x0e\x96\x9f\x78\x9e\x7c\xcb\x85\xfa\xbe\x11\x37\xd8\xf9\x39\x02\xf5\x07\x7f\xea\x9f\xe4\x5c\xa8\x3f\x3e\xff\xd6\x1f\xcc\xc6\xbf\x8c\x67\x9f\x1f\x22\x10\x0b\xe6\x48\x88\x91\x56\x00\x8b\x41\x93\x28\x68\x27\xa8\x80\xb0\x00\x37\x6f\xd5\x9c\xb2\x2c\xf1\xc3\x51\x99\x72\x55\x45\xd5\x6b\x8a\x07\x03\x19\x61\xf1\x1c\xef\x7f\x3d\x38\x3c\xfc\x72\xf0\xee\xb0\x1b\xef\x13\x7f\xc3\x59\xb1\xbb\xd2\xa3\x95\x79\x94\xf1\xdd\x85\x23\x5a\x48\x64\xf5\x33\x7e\xab\xd7\x46\x67\x57\xa7\xfd\xd9\xc5\xe5\x13\xc8\xca\x37\xd4\x87\xdd\x04\xc4\xad\xcb\x11\xeb\xd5\x09\x44\x66\x17\xc3\x0b\x78\x8b\xf3\x1c\xef\x24\xf8\x8f\xc1\x5c\x2c\x61\xef\x13\x86\xab\x05\x32\x89\xd6\xc0\x95\x92\x0a\x17\x14\x07\x04\xbc\x4c\x25\x3c\x28\xee\x08\x0b\xa1\x10\x46\xcc\x4a\x02\x8e\x59\x99\x04\x88\x3d\x63\xa4\xc8\xfe\x35\xb0\x24\xc0\x47\xec\x79\x1c\x8f\xd7\x74\xc3\x61\xb0\x62\x6b\x90\x99\x41\x84\x8f\x38\x4f\xa1\x57\x32\xfe\x72\x34\xbd\x3a\x9d\x4d\x71\xce\xbf\x6f\xf6\x5e\x59\xb3\x06\x21\x47\x31\x38\x2c\x50\x0f\x6a\x5e\x31\x32\x6d\xd2\x3f\x1f\x0f\xe0\x0b\x61\x18\x27\xc5\x68\x73\x0b\xaf\x0d\xa6\xb0\x67\x85\xf4\x6f\x09\x1b\xa7\x89\xc8\xfd\x4a\xa9\xc7\x53\xdf\x06\x17\x57\xe7\x33\xd4\x60\xef\x4f\x38\x95\x77\x95\xdf\x13\xa8\x63\x5a\x52\x68\xd8\x03\xc8\x93\x7c\x67\xca\xb8\x6a\x44\xca\x12\xe1\xb7\x2c\xee\xae\x08\x04\x98\xc3\x75\xba\xb0\x5a\x94\x58\x43\xcc\xb1\x5a\x03\xbc\x21\xb4\xf0\x72\x67\x70\x65\x73\x27\xbc\x2b\xd9\x82\x0a\xdb\x4b\x9c\x70\xa5\x99\xb7\x19\xc8\x28\x6f\xe3\xc5\xca\x06\x31\x92\x8c\x24\x76\xe0\x8c\xad\xe7\xdc\x6a\x6c\xde\x6d\xaa\xeb\xbe\xd8\x4d\x18\xd1\xbc\x2b\x4a\xe5\x1e\xae\xd1\x1c\x61\x41\xca\x97\x4a\x71\xdf\xb8\x11\xb5\x9d\x75\x8a\xef\x6b\x58\x85\xb9\x13\x78\x91\x07\xcd\xd6\xfa\xed\xd7\xa4\xba\xf1\x91\x78\x15\x5b\xdc\xb8\x3b\x80\x3d\xfa\x41\x18\x3f\xa1\x00\x95\x6e\x98\x53\xce\x11\x7b\x23\x71\xcd\xf3\x38\x62\x99\x25\xb2\x88\x63\xc4\x0d\x5a\xe0\xdb\x74\xd3\x69\x57\x6e\x78\x70\x74\x79\x89\xda\x7e\x20\x6d\xf6\x80\x4b\xdb\x16\x7c\x4b\x52\x1e\x09\xf8\x73\xfc\xcb\x1d\xec\x92\x83\x5d\x6b\xe2\x88\x4c\x7c\x04\x98\x68\xb4\x12\x7d\x9d\xb3\x39\x42\x48\xf3\xae\xd4\xe4\xf7\x76\x8e\x20\x6e\x94\x93\x83\x75\x9c\xa7\xd5\x06\xbf\xc8\x61\xae\x76\x0f\xfa\xc3\x8f\xb0\x44\x66\xaa\x6d\xa5\x83\xb4\x2c\x97\x4e\xad\x18\x5a\x44\x96\xd0\xb1\xc0\x12\x00\x30\x02\xb5\x0b\xca\x33\x96\x9f\xad\x3d\x17\xd9\xbf\x64\xd8\x29\x01\x4f\x39\x76\x24\x9e\x46\xf2\xe2\x84\x9b\xbc\xe1\x91\xba\x44\x91\xab\x59\x58\x21\xf1\xc4\x72\xc5\x7a\xe0\xc9\x36\x57\x8c\xb0\x0e\x67\x6f\xec\xd6\xcb\xa6\x02\x51\x74\xbd\x71\x64\xce\x7d\x86\x7d\x40\xc4\x52\x90\x6e\xb9\x4a\x00\x41\x81\xb2\x69\xa7\x2a\xd9\xdd\x46\xbb\xdb\xce\xe6\x9c\x6a\x9d\x63\x1f\x99\xa2\x02\x73\x6f\x48\xed\x0d\xca\x66\xa8\xb7\xe5\x7a\x5b\xd2\xac\xa1\x30\xdc\x38\x7e\x54\x9d\x11\x5b\x93\x90\x94\xe1\x60\x4a\x04\x8e\x70\xb4\x48\x1a\x8a\xba\x25\x6c\xd8\x8b\x2d\xa0\xe1\x13\xa4\x36\x78\xbd\x62\x6a\xd9\x69\x65\xd4\xda\xc5\x84\x2d\x99\x48\x5a\x9b\xf8\x10\xf0\xa3\x38\x16\xe1\x0e\xb1\x5c\x3a\xdd\x45\xc6\xab\xa5\x5d\x32\x9e\x46\x5e\xb5\x00\x36\xee\x94\x2a\xc0\xfe\xfd\x87\x06\x2b\x52\x75\x4b\xbe\xfc\x48\xea\x82\xa3\x4c\x07\x97\xa3\xd1\xf9\xb7\xd3\x8b\xfe\x70\x7c\x7e\x82\x2d\xb0\xc5\x25\xdc\x8e\x29\x49\x41\xaf\x75\x67\x2e\xa5\xf9\x86\x49\x4f\x31\xdd\xdc\xde\x49\xe9\xa2\x0b\xfb\x5f\xd5\x3e\xf5\x41\x6d\x15\x12\xa1\xa3\x5e\xa8\x0a\x74\x84\xb4\x6b\x19\xa9\xa3\xda\xf9\x60\x3e\xaa\x70\xc3\x67\xc5\x58\xba\x18\xaf\xc2\xb5\xfd\xcb\x56\xe8\x7e\xa0\x3f\x5a\x62\x14\xb6\x88\x76\x1f\xb0\x38\x29\x77\x80\x8e\xe4\xea\x0f\x05\x79\xfc\x2f\x39\x5c\x10\x4d\x6a\xa0\x08\x53\x16\x62\xd6\x39\xd6\xcc\xda\x99\x94\x27\x87\x76\x75\x36\xa8\x67\x9b\x24\xd3\x8e\xef\x65\x49\x24\xd1\xe7\x6d\x42\x3b\xd5\x26\x8f\x25\x6e\xae\x26\x97\xa4\x55\xf2\x6a\x64\xe6\x87\xe5\x9a\x90\x89\x5f\x24\x76\xeb\x96\x48\x08\xbc\x70\x46\xa3\x7d\x78\x85\x79\xd3\xab\x8e\xa4\xb2\x86\x69\x96\x72\xf5\x53\x39\x76\x15\x90\xc8\xbd\x52\x59\x42\xe4\xb4\x43\xec\x78\x5f\x91\x56\x9c\xe9\x88\xc7\x6b\xc0\xd3\x1a\xdb\xff\x5f\xff\xf8\xfb\x3f\xcb\x63\xed\x20\xe7\xc0\xf8\xbf\x7e\xff\xef\x00\x00\x00\xff\xff\x7e\x56\x21\x08\xea\x15\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 5610, mode: os.FileMode(420), modTime: time.Unix(1465484737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

