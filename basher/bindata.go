// Code generated by go-bindata.
// sources:
// scripts.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x5a\xef\x72\xda\x48\x12\xff\x6c\x9e\xa2\x17\xbb\xe2\x38\x8b\x90\xc1\xc9\xe6\xaf\xf7\x0a\x83\x62\xeb\x16\x03\x05\x38\xa9\xad\x24\x45\x0d\xd2\x80\x74\x16\x1a\x9d\x34\x32\xe6\xb2\xbe\x37\xb8\x67\xb8\xf7\xb8\xa7\xba\x47\xb8\xee\x19\x09\x24\x9b\x38\xb9\x38\xf7\xe1\x52\x5b\xb6\x91\x7a\xfa\x7f\xff\xba\x7b\xd8\x31\x4f\xe4\xc8\x89\xfd\x48\x3e\x3e\x80\xcf\x95\x1d\xee\x78\x02\xf6\x1a\x95\x9d\x24\xe0\x3c\x02\xfc\x23\x48\xc0\x08\x58\xe5\xa6\x52\xd9\xd0\x36\x35\xf1\xb9\x35\x1a\xb5\x4e\xad\x63\xa2\xef\xf6\x4f\xdf\xda\x5d\x6b\x74\xbc\xd7\xbc\xc3\xa5\x99\x73\x81\xe6\xaf\x8f\x1a\xf0\x07\x48\xce\x01\xe9\x90\xe7\x69\xcc\xdc\x80\xbf\x8f\x59\x14\xf1\x58\x73\x9d\xab\x47\xb0\xd4\xcf\x36\x44\xcb\x31\x4b\x2e\x35\xc9\xa0\x35\x6c\x9d\x8f\x72\xb9\x93\x41\x6b\x7c\xa6\xe4\xd6\x4d\x7d\x78\x09\xd5\xbd\x46\xf5\xae\xb4\x11\x97\x69\x74\xca\x17\x9a\xcb\xa9\x75\xae\x58\xb4\x6d\x75\x78\x28\x84\x1c\xb0\x24\x59\x8a\xd8\x3d\xde\x3b\xaa\x54\x76\xfc\x19\x7c\x40\x4e\xcd\x2a\x1c\x1f\x43\x55\xc6\x29\xaf\xc2\xa7\xd7\x20\x3d\x1e\x56\x76\x76\x76\xa1\x6d\x83\x9f\x00\x3d\xaf\xc1\x92\x43\x28\x96\x10\x72\xee\x42\x94\x71\x41\xa2\x8c\xc5\x51\x15\x7e\x42\x16\xc5\xe3\xda\x49\x06\xd7\x6f\xff\x80\x24\x75\xf1\xe3\x25\x18\x23\x98\xf3\x05\xf8\x61\x22\x59\x10\x28\x2f\x22\xed\xb5\x2f\xe1\x10\xff\xe2\x41\xc2\xd7\x0f\xe8\xd5\xcc\xaf\xe4\x0f\x77\xe1\x22\xe1\x31\x24\x9e\x48\x03\x17\xe4\x2a\xe2\xc8\x85\xc4\x15\x15\xca\xc5\xdc\x91\x91\x8b\x40\x86\xe8\xa9\x8b\x30\x7b\xf9\xff\xe1\xad\x34\x57\x17\x0c\x66\x5f\xff\x4f\x9d\xb6\x4d\x54\xd9\x77\x03\xe1\xda\x9a\x44\x7b\x2e\x2b\x0d\xe5\xbd\x48\xb8\x6b\xb7\x17\xd3\xb3\x91\x1d\x1c\xf2\x48\x5c\x44\x2e\x93\x7c\xfb\xd9\x18\xdf\x43\xaa\x08\xc0\x30\xae\x78\x3c\x15\x09\xbf\xcb\xe9\xd4\x97\xa3\x74\xba\x10\x6e\x1a\x70\x3b\xf4\xe5\x5d\x66\x73\xd4\x38\xc9\x49\x50\x25\xfc\x78\x2f\x97\x2f\x29\x55\xe6\x93\x69\xb6\x8d\xd3\x20\xcd\xfd\x31\xb4\xce\xfb\x63\x7d\xfa\x64\xd8\xea\xb5\x75\xed\xae\x99\x1e\x69\xa6\x51\xaa\x32\x13\x2b\xb7\xc4\xee\x88\xd8\x9d\xc4\x7c\x59\x72\xf1\xb8\xdf\xef\x2a\x86\x53\x7c\x53\xca\xeb\x2c\x34\xd9\xa1\x8b\x88\x00\x82\x6f\x3b\x94\xea\x57\xdb\x0e\xe5\x11\xdf\x7a\x2c\xdc\x2e\x2d\x93\x54\xc4\xd6\x13\x6b\xdc\x52\x07\xed\xde\x68\xdc\xea\x76\x27\x17\xc3\xee\x71\xd5\x93\x32\x4a\x5e\x99\x66\xcc\x96\x75\xb4\xdb\x4b\xa7\x29\x26\xa4\x23\x42\xc9\x43\x59\x77\xc4\xc2\x0c\xf8\x4c\x26\x9e\x3f\x93\x3c\x4e\xcc\x34\x52\x7f\x9a\x0b\x96\xe0\x67\x33\x13\x5e\x4f\xbc\xea\xba\x02\x3f\x93\xa0\x9b\xed\x65\xf8\x23\x44\xcf\x45\x59\x2c\x55\x93\x93\xc6\x58\x10\xb3\x64\xd4\x25\x05\x0a\x52\x50\x0f\xf8\x15\x36\xf4\xf0\xe8\x11\x38\x1e\xa6\x0b\xfc\x7c\x7d\xeb\x71\xdd\x2c\x7f\x8e\x17\xa5\x47\x0a\xc0\x25\x8b\xe5\xc8\x5f\xa4\x01\x93\x22\xeb\x17\x1d\xeb\x9d\xdd\xd6\xe9\x74\xed\xc4\x69\xa8\xb8\xc6\xe9\x02\x6d\xc0\xa6\x93\xb5\x82\xc6\xaf\xa6\xcb\xaf\xcc\x30\xcd\xea\x8e\x98\xd9\xfd\x91\x1d\x3a\x31\x27\xca\x93\xd4\x0f\xdc\x5e\xba\x98\xe6\x5d\x68\x30\xec\xff\xd9\x6a\x8f\x27\xbd\xd6\xb9\xe2\x8d\x26\x8a\xc5\xc2\x97\x6d\x91\x86\xf2\x78\xef\x31\xa5\x68\xcc\xaf\x8c\xc0\x4f\x24\x56\xa2\xc2\x03\xc3\xa1\x97\x07\xca\x1b\x71\x99\x29\x9e\x30\xd3\x24\x36\x03\x7f\xca\xaf\xb9\x63\x0e\xe8\xdc\x49\xea\xba\x2b\x30\x1c\xa8\x0e\x62\x3f\x94\xd0\x7e\x7b\x92\x86\xd8\xbe\xde\xa1\xb7\x7d\x11\x56\x31\xa5\x4c\x3b\x9c\x89\x7a\x44\xd4\x07\xa8\x43\xc8\x97\x45\xa6\xd5\x4d\xd0\x0b\xda\x55\xc1\x98\x4b\x7a\x74\x47\x8b\x62\x26\xdc\x62\x55\x64\xb0\x06\xc7\xdb\x34\x8f\x1f\x6f\x61\xfa\x73\xe3\xe0\x40\x25\x41\x65\xe7\x3e\x13\xb1\xf7\xc2\xab\x5b\x16\xc2\x5e\x59\x42\x95\x82\x55\x30\xb9\x8a\x3c\x77\xa1\xe5\xba\x60\x8f\x47\xad\x28\x42\xa8\x4e\x7a\x22\xb4\xae\xf9\x22\x92\x16\xc6\x6e\x15\x49\x62\xc3\x12\x98\x31\x54\x19\xd0\x19\x18\x17\x3f\x09\xf7\x11\x95\x38\x1a\xc2\xc2\x64\xc9\xe3\xb1\xd8\x10\x7f\x53\x24\xee\x15\x77\x47\xcb\x03\x1d\x85\x0f\xb0\x77\x57\x1c\x55\xe1\x93\x6a\x47\xf0\x04\x7a\x42\x82\x75\x4d\x07\x9e\xc0\xa7\x4d\x20\xee\xd3\x86\x4c\x7f\x75\xbf\xed\x53\x21\x02\x6d\xfd\x5d\xef\x65\x0d\x09\x13\x5d\x39\xb9\x9c\xd9\xe3\xdf\x07\xba\x6a\xf2\x07\xeb\x31\x6a\xd4\x3e\xb3\xce\x35\x12\xe7\xc5\xf5\xb4\x38\x69\x3d\xc3\xc1\x0e\xa3\x69\x08\x88\xfc\x88\xcf\x98\x1f\x50\xb9\x5e\x3b\xc2\xe5\x53\x92\x03\x86\xaa\x39\x35\x0b\x18\x89\xe3\x61\x85\xe9\xbe\x6d\x78\x3e\x42\xa2\xc7\x83\x40\xe3\xa2\x15\x5e\xf9\xb1\x08\xa9\x00\x91\xd0\xbd\x04\x3f\xf2\x44\xc8\x93\xbc\xc0\xc1\x70\x71\xe6\xf4\x43\xa6\x2c\xad\x46\xf8\x70\x26\xe2\xc5\xf1\x2d\xb2\x5a\xc8\x16\x1c\x75\xac\x12\x7d\xec\x5f\x71\xb7\xc3\x24\x1b\x30\xe9\x41\x3d\x07\x2d\xad\x98\x6e\x22\xd5\xbd\x67\x34\x43\x5c\x3b\x51\xcc\xa5\x5c\x65\x2e\xa2\xf1\xf6\x07\x7a\xe8\xda\x91\x14\x99\x2f\xba\xe2\x47\x98\x2b\x91\xbc\x60\x53\x66\x48\x2b\x76\x3c\x74\xc2\x77\xd8\x52\x06\xbd\x1f\x14\xf3\xaf\x84\xc4\x60\x5a\xdd\xf2\xbb\xbd\xa7\xf5\x6b\x27\x7b\x03\xf9\xef\xfb\xa2\x67\x5d\x47\x22\x96\xdb\xb1\xbb\xbc\x24\x7c\xc5\x0c\xae\x18\x65\x3e\xcc\x3f\xf6\x55\xad\x25\xaa\x3a\xa1\x1e\xa1\x41\x38\xe6\x98\xfa\x9d\x2e\xb6\x2f\xd9\xd1\x28\xd8\x91\x31\x2b\x53\x14\xa7\x1b\xe5\xbd\xb2\x69\x6f\xb9\x74\xbc\x56\x48\x83\x21\xf3\xe3\x41\x2c\xae\x7c\x42\x4e\x3f\x9c\xe3\xdf\x33\x3f\xe0\x89\xb6\x79\x17\x76\xc7\xfd\x4e\x1f\x7a\xfd\x31\x5c\x8c\xec\xde\x29\x8c\xcf\xec\x11\xb4\x7a\xbf\xbf\x3f\xb3\x86\x56\x0d\x7a\x96\xd5\x81\x71\x1f\x3a\x56\xdb\xee\x58\x60\xbf\x85\xf7\xd6\xe6\x61\x5f\x91\x13\x1b\xe9\xe1\x94\x8e\x73\x40\x02\x89\x3f\xf7\xe8\x89\x2b\x96\x61\x20\x98\x0b\xd4\xe4\x10\x1d\xc5\xda\x03\x30\x13\x01\x86\x97\x88\x58\xe8\x2a\x40\x03\xea\xc0\x34\x3e\xcf\xd2\xd0\x51\x79\x3c\x10\x11\xe5\x2d\xdf\xa6\x7b\x65\xa7\xd5\x6e\xf7\x2f\x7a\xe3\x89\x75\xde\xb2\xf5\x58\x45\x62\x69\xce\x45\x73\xc1\x48\x61\xfd\x28\x57\x63\xa2\x7a\xad\x7e\xb1\xb8\x82\x27\xf5\x85\x98\x22\xaf\x28\x67\xbf\xd6\x0e\x13\xe1\x3e\xd1\xe8\x5c\x84\xd7\xd1\x12\x83\x30\x12\x69\xec\xe4\x9e\x6c\x0d\xdb\x67\xf6\x3b\x6b\x93\x3d\xf6\xa0\xb5\xf9\xa0\xda\xad\xe1\x42\x75\x6b\x88\x4d\xcd\x2e\x8d\x28\xce\x66\xb1\xdd\x46\xd4\x57\x66\x0a\xd1\x51\x09\x28\x8a\x05\xf4\x28\x79\x0c\xe5\xa0\x43\x63\x34\xec\x63\x88\xd8\xbd\x93\x86\x7f\xf3\x23\x30\xfe\x5a\xc8\xa6\x66\xdd\x8f\x18\x89\x5f\x3f\x92\x8b\x08\x49\x69\x54\x2a\x13\xe1\xc3\xc5\xa5\x4b\x2e\x8c\x4b\xc4\x65\x0d\x35\xb2\x08\x8c\xc3\x8e\x83\xa2\xe2\xd9\xf6\xcc\xdd\x7e\xc8\x7c\x52\x77\x57\xd8\xb8\xbe\x81\x7f\x4e\x4a\x72\xee\x28\xaf\xac\x44\x2d\xeb\xb9\x7d\xf5\x8c\xac\x6e\xd6\xeb\xda\xb8\x92\x66\xea\x54\xb6\xa6\x46\x94\x11\xe8\x38\x0c\xed\x38\x0d\xf3\x10\x22\x26\x5b\xdd\xfe\xc0\x1a\x4e\xb2\xf4\x5a\xc7\x71\x8d\x02\x91\x1f\x60\x3b\x4e\xd5\x79\x9c\xdc\x68\xf0\x25\x58\xa5\x8d\xc3\x30\x48\x09\x8d\x64\x46\x72\xe9\x47\x93\x25\xf3\x11\x96\xe7\x13\x8c\xce\x44\xc1\xc4\x04\xb3\x0d\x23\x97\x50\x28\x69\xc4\xde\xec\x62\xaa\x66\xfd\xd0\xdd\x92\x72\xf7\xe9\x76\x72\xd1\xeb\x74\xad\x09\x56\x66\x6f\x6c\xbf\xb5\xad\xa1\x86\x2a\xca\x7b\x95\xea\x08\x2f\xd9\x1d\x46\x3b\xe6\x98\xd1\x38\x10\xf4\x43\x5b\x7e\xcd\xe4\xed\x6c\xcb\xf8\x88\xb8\x8f\xd6\xb8\xa9\xc3\x8b\xa2\x68\xa6\x8d\xa2\x89\xf2\x09\xe1\xb8\xde\x4f\xbf\x5c\x4e\x5f\x43\xa1\xf3\xfe\x17\x41\xe8\xbd\xdd\xed\x16\x11\xe8\x14\x01\x9a\xea\xe1\xe2\xc2\xee\xc0\x2c\x16\x8b\x42\x45\xef\x42\xbe\xb4\xcc\x11\x74\xb3\xad\x45\xad\x2a\x8b\xeb\x28\x36\x5f\x34\x0f\x5f\x34\x5f\xbc\x64\xbf\x1c\x39\xec\x29\x3f\x62\x47\xcf\xd8\x53\x3a\xd4\x15\x22\x42\x9e\xb1\x48\xd1\xa1\x84\x1f\x4a\xe7\x1a\xcd\x8b\x2b\x91\xe2\x5e\x2f\x81\xc1\x45\xc7\xee\xd4\x80\xb9\x0a\xc8\x16\x79\x55\x2a\x70\x17\x33\x88\x72\xdc\x28\x62\x80\xb9\xee\x05\xe5\xbb\x8e\x31\x1e\xbc\x05\x92\xc0\x69\xf4\xa3\x4a\xa3\x1a\xcf\xb8\xf5\xc8\xbd\xfe\x06\xb2\xcc\x3b\x68\xf6\x1a\x71\x8f\xee\x2e\xd2\xd4\x77\xef\x1f\x5d\xf7\xf5\xe8\x4a\x5e\xdb\x07\xb5\xed\x24\x12\xb1\x06\xde\xbc\x79\x03\x7b\x8f\x13\x8e\x93\xbb\x2f\x57\xe0\x2c\x70\x2b\xea\x80\xe1\xd3\xa2\x56\x50\xe3\x86\xee\xcb\xd6\x4b\xd2\x01\x6d\x1b\x64\x89\x3d\x23\xcf\x50\x24\x94\xfe\x35\x0d\xf2\x8e\x88\x56\x38\x69\xd7\xb2\x81\xdb\x63\x6a\xe2\x66\x01\xe6\x26\x2a\x33\xe5\x9a\xc4\xe7\x74\x79\xb2\x5e\x4b\xc9\x84\x9b\x2d\x57\x3b\x9a\xe0\x27\x5c\x1f\xe1\xef\x66\xd7\x9f\xc6\x2c\x5e\x99\xe7\xca\x0d\x1d\x7e\xe5\x3b\xdc\x2c\x26\xdc\x47\xc8\x53\xce\xcc\x58\xde\x69\x00\x45\xde\x74\xf1\x44\xca\xd2\x09\x0a\xa9\x4e\xaa\xac\x6d\xd1\x3f\xc2\xbd\xd9\x5d\x5f\xfc\x10\x4d\xb4\x84\x1c\xfa\xcf\xf1\x29\xe2\x45\x59\x12\x7c\xc8\xce\x7e\x22\xed\x32\x99\x1a\xff\xf5\x3d\x55\xf6\xd3\x45\x1c\xd5\xab\xf6\xe6\x8e\x01\xc7\x82\x58\xf8\x6e\x97\x61\xab\xf5\xac\xe2\x52\x5c\xd9\x89\xb9\xdb\x16\x01\x36\x98\xe3\xfd\x8f\x87\x47\x47\x1f\x0e\x5f\x1f\x35\x16\xfb\x74\xbb\x8a\xc1\xb9\xfd\xa6\x49\x6f\xa6\x41\xca\x6f\xbf\x78\x4a\x2f\x42\x51\x7e\x8c\xcf\x2a\x3b\xd6\xf9\x45\xb7\x35\xee\x0f\xbf\x30\x64\xad\x5f\x0f\xad\xd1\x45\x77\x3c\xc2\xd4\x0d\x85\x97\x46\xe8\xe8\x56\xaf\x33\xec\xdb\x9d\xc9\x59\xff\xdc\x32\x69\x46\x4e\x4c\x9e\xe9\x8e\x80\xcb\xae\xdc\xfc\xf2\x16\x41\xa8\x41\x3f\x1e\x1d\xa8\x35\x50\x01\xcb\x2b\x2c\x2d\x9c\x4f\xf0\x3f\x06\x53\x7f\x0e\xbb\x67\xad\xf6\x6f\x35\x10\x61\xb0\x02\x1e\xc7\x22\xc6\x17\x31\xc7\xf1\x41\xa6\x71\xc8\xdd\xfc\x2e\x6f\xe6\xc7\x58\xc5\x72\x29\x70\x2b\x74\x44\xe8\x62\xe9\xdb\x90\xa4\xce\xa5\x9a\x5b\x6c\xac\x31\xca\xdf\x4b\xba\x93\x64\xb0\x64\x2b\x10\xa9\x2c\xdc\x5e\x6f\xb1\xe6\xcd\x5e\x53\xab\xd5\xf6\x38\xb2\xc1\x14\x46\x39\x28\x79\xc9\x48\xb5\x41\xab\x67\xb7\xe1\x03\x41\x08\x8d\xe8\x34\x53\xd5\x20\x4a\x65\xae\xcf\x12\xb7\x9e\x39\xe4\x66\x03\xa1\xec\x27\xba\xd6\xc6\x53\x93\x0c\xbd\x1f\xab\x1b\x4f\xcc\xcb\xdb\xc2\x6f\x68\x44\xc4\x30\xa2\x2f\xd5\x01\x74\x9a\xa3\x55\xb1\xcb\x4a\x44\x2c\xf4\x9d\x9a\x82\xbd\x25\x55\x29\xd3\xb0\x4a\xad\x4e\x95\xf1\x0a\x16\xd8\xc2\xd0\x49\x69\x54\x83\x90\xba\x61\xb2\xb9\x43\x2a\xe8\x72\xa3\x2f\x14\x0e\xb7\x4c\x33\x84\x73\x6b\x2b\x96\xca\x89\xaa\xa1\xa6\x51\x1d\xce\xd9\x6a\xca\x95\xc4\xbd\xcf\xeb\x6c\xbc\xc9\xa9\x29\xf9\xf7\x3e\xe7\xa9\x75\x03\x97\xa8\x8e\xde\xdb\x1d\x11\xc7\xdc\x91\xba\x06\x72\x41\x67\x68\xd6\x7e\x02\x4b\x2f\x33\x22\x10\x73\x48\xd8\x2a\x79\xf5\x31\x2c\x13\x6e\xf1\x57\x4e\xa2\xaf\x7f\x0f\x61\x97\x7e\x10\x08\x0f\xc8\x41\x85\x9b\xe0\x11\xe7\x08\x8e\x81\x7f\xc9\x33\x3f\x62\x9a\x85\x22\xf7\x63\xc0\x25\x6a\xe0\xa8\x70\xd3\x69\x9d\x6e\x78\xd0\x1a\x0e\x51\xda\x7f\x11\x36\x75\x40\x87\x6d\x83\x8e\x05\x2e\x5b\x1c\xfe\x2d\xf6\x65\x06\x36\xc8\xc0\x86\x52\xd1\x22\x15\x0b\x17\xe0\xeb\x21\x14\x3b\x20\xad\x41\x53\x36\x5d\xd5\x30\x3c\x05\x50\xb8\x49\xe8\x8a\x0d\x71\xaa\x18\x1c\xcc\xe3\x2c\xac\xca\xf9\x79\x0c\x33\xb1\xbb\xd0\xea\x9c\xc0\x1c\xe7\xc4\x44\x6f\x0f\x42\xdf\x4c\xe0\x29\x1a\x9c\x94\x26\x74\xcc\x55\x10\x0a\xd2\xa7\x35\x82\xe2\x8c\xe9\xa7\x72\x4f\x7b\xf6\x2f\x29\x56\x8a\xcb\x23\x8e\x15\x89\xa7\xb1\xbb\x68\xe6\x32\x2b\x78\xec\x2d\x41\xa0\x73\x16\x96\xd8\xf7\x31\x5d\x31\x1f\x78\xb8\x89\x15\xa3\xb6\x3a\x0d\xb0\x77\xab\xf7\x45\x55\x81\x56\xbd\x64\x6d\xc8\x94\x3b\x0c\xeb\x80\xfa\xba\x4f\xb2\x71\xb5\x80\x69\x3a\xa7\x68\xee\x30\x77\xaa\xf4\x36\x50\x6f\x43\xeb\x9c\xf5\xc2\x1e\xd6\x91\xcc\x33\x30\xb3\x86\xc4\x5e\x21\x6f\x86\x72\x6b\xba\xb6\x05\x61\x0d\xb9\xe1\x4a\xf7\x98\x32\x46\x6c\x54\xf2\xe8\xda\xca\x0f\xfd\xc4\xc3\x1a\x9c\x0a\x49\x5e\x57\x1d\x15\x6b\xb1\x06\x04\x3e\x6e\xa4\x9c\xd7\xcc\x51\x4b\x6f\x59\xf1\x4a\xfb\x84\xcd\x99\x1f\xd6\xd6\xfe\xc1\x48\x11\x3b\x16\x20\x85\x3f\x9f\x6b\xd9\x79\xc4\xcb\xa9\x5d\x50\x9e\x20\xaf\x9c\x00\x6b\x73\x0a\x19\xa0\xbe\xb1\x21\x60\xc5\x49\x89\xd4\x04\x27\xc0\x59\x37\x8b\xff\xa8\x3d\xb4\xac\xde\xa4\xdb\x6f\x75\x70\xe2\xc3\x12\x20\x0f\x26\x74\xcb\x43\xe4\x18\x92\x08\x92\x55\x52\x9f\x0a\x21\x27\x18\xf4\x08\xc3\xcd\xd5\x55\x0c\x5d\x78\xc0\xfe\xc7\x78\x9f\xea\x60\x67\xe9\x51\x8b\xa6\x5a\x28\x33\xd4\x13\x43\x43\x8d\x0c\x7a\x16\xca\x80\xf9\x69\xa5\xd8\x5d\xbf\xc9\xc7\x42\xfb\x78\xe9\xad\xd4\x77\x51\x9e\xfe\x81\xf6\x24\x02\xbd\xb0\xe9\x80\x37\x2e\x5b\x84\xc5\x0a\x48\x02\xb1\xfc\x53\xde\x96\x7f\x90\xc1\xaa\xa5\x67\x05\x14\x60\xc8\x3c\x8c\x3a\xc7\x9c\x59\x69\x95\xb2\xe0\x10\x55\x7d\xdd\xf5\x54\x91\xa4\x04\xda\x98\xca\x29\xee\xc3\x68\xf3\x26\xa0\xf5\x72\x91\x2f\x04\x12\x97\x83\x4b\xdc\x4a\x71\x95\x22\x75\xbc\x62\x4e\x88\xd0\xc9\x03\xbb\x31\xcb\x0f\xa9\x79\x21\x46\xa3\x7e\x38\x63\xbe\x68\x96\x21\xa9\x28\x01\x57\x3f\x1e\xff\x54\xf4\x5d\xa9\x49\x64\x56\xc5\x69\x48\x23\x54\x1d\x7e\x17\xe9\x7e\x4c\x52\x11\xd3\xb1\x1f\xaf\x00\x4f\x27\x58\xfe\xff\xfe\xe7\x3f\xfe\x55\x84\xb5\xc3\xec\x6b\x3b\xba\x67\xc6\xd1\xe7\xf6\xbf\x6c\x14\xca\xbf\x75\xe9\xfc\x96\xef\x23\x6d\x35\x86\xea\x35\x42\xe1\x84\xa1\x36\x08\x5c\x20\x10\xe8\x9c\x4b\xaa\xd1\x19\xc6\x56\xad\x10\xcc\x3c\x6a\xbc\x3c\x3c\x7c\xda\x7c\x6e\x3e\x7b\xfe\xb2\xa1\x36\x07\x1c\x13\x14\x60\x15\x26\x04\x4f\x45\x25\x07\x3b\x2c\xf7\xcb\xca\xce\x63\xd0\x39\xf9\x8c\xae\x93\xf2\x4c\x6e\xe8\x94\xcd\x5e\x35\x5e\x83\xea\x0d\xab\xd7\x2a\xa6\x70\x80\x19\xc1\xb4\xda\xf9\xf7\x66\x74\x27\x68\x18\xa1\x30\x52\xbf\x30\xdf\x65\xdf\x74\xad\x8d\xd2\x5c\xbe\x74\x5a\x7f\x13\xa1\x78\xe0\x6f\x9c\x33\x25\xee\x1e\xd5\x8c\xd4\x68\xe2\x26\xf7\x30\x06\xcd\x87\x32\x68\x3c\x94\xc1\xe1\x03\x19\x34\x5e\x3e\x94\xc1\x8b\x87\x32\x78\xfe\x50\x06\xbf\x7c\x27\x03\x35\x6f\x7f\xe7\xd9\xfc\x3e\xda\x78\x08\x13\x7e\x2d\x63\x66\xe4\x76\x2c\x9a\xf4\x85\x76\xe2\x23\x32\xac\x1e\xc4\x70\x2e\xc4\x3c\xe0\x3f\x82\x1f\x22\xb7\xe1\x2f\xe6\x06\x8b\x17\x9c\x4d\x7d\xe3\xea\xf9\x46\x5d\x4a\xfe\x3b\x75\xd9\x3a\xb1\xbf\xbf\x2e\xbf\x5d\x5a\x76\xef\xf3\xae\xa3\x85\xad\xd7\xae\x71\x6b\x78\x6a\x8d\x37\xff\xdb\x0d\x0e\xac\x1b\x0d\x1c\x75\x08\x68\xa9\x32\x42\xbd\x57\x19\x52\x5d\x6d\x21\xe7\xff\x04\x00\x00\xff\xff\xbf\xbf\xd3\x71\xfc\x23\x00\x00")

func scriptsBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBash,
		"scripts.bash",
	)
}

func scriptsBash() (*asset, error) {
	bytes, err := scriptsBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.bash", size: 9212, mode: os.FileMode(420), modTime: time.Unix(1468308063, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.bash": scriptsBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.bash": &bintree{scriptsBash, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

