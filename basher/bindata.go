// Code generated by go-bindata.
// sources:
// scripts.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x5a\xff\x72\xda\xc8\x93\xff\x1b\x9e\xa2\x17\x53\x6b\x7b\xbf\x16\x18\xec\xec\x66\x93\xf5\x5e\x61\x50\x6c\xdd\x17\x03\x05\x38\xa9\xad\x24\x45\x0d\xd2\x00\x3a\x0b\x8d\x6e\x24\x19\x73\xf9\xfa\xde\xe0\x9e\xe1\xde\xe3\x9e\xea\x1e\xe1\xba\x67\x46\x20\xd9\xd8\xc9\xc5\xb9\x3f\x2e\x95\xb2\x41\x33\xd3\xbf\xfb\xd3\x3d\x2d\x8f\x79\x9c\x8c\x5c\xe9\x47\xc9\xc1\x21\x7c\x29\x97\xb8\xbb\x10\x50\x6d\x94\x4b\x71\xc0\x79\x04\xf8\x21\x88\xc1\x0a\x58\xf9\xbe\x5c\xde\xee\x6d\xea\xcd\x57\xf6\x68\xd4\xba\xb0\xcf\x68\x7f\xb7\x7f\xf1\xce\xe9\xda\xa3\xb3\x6a\xf3\x11\x95\x66\x46\x05\x9a\x7f\xfe\xdc\x80\x7f\x40\xc2\x39\xe0\x3e\xa4\x79\x21\x99\x17\x70\x27\x8c\x13\x16\x04\x9a\xaa\xd3\x1b\x8d\x5b\xdd\xee\xe4\x7a\xd8\x3d\xab\x2c\x92\x24\x8a\xdf\xd4\xeb\x31\x97\xb7\xbe\xcb\xe3\xda\x5c\x1d\xa8\x09\x39\xaf\x7b\x7e\x9c\x48\x7f\x9a\x26\xbe\x08\xe3\xba\x5e\xb0\x9a\xb5\xc6\xa9\x35\xf5\xc3\xda\xbf\xf9\x51\xa5\x5c\xf2\x67\xf0\x11\xac\x19\x54\x76\x2d\xc3\xe7\xb7\x90\x2c\x78\x58\x2e\x95\xdc\x54\x06\x60\x59\xf1\x42\xac\x2c\x2e\xa5\x90\xf8\x25\x92\x62\x2e\x79\x1c\x5b\x53\x46\x5f\x67\xcc\xa7\x2d\x81\x70\x19\x71\x84\x4a\xf5\x4b\x4e\xd4\xfb\x0a\xfc\x09\x3b\x98\x94\x4b\x33\xbf\x5c\x4a\x43\xfc\xb8\x7b\xb9\xe3\x0c\xcf\x2a\xd5\x03\x70\x3d\xa0\x5f\x9e\x2f\x43\xb6\xe4\x44\xfd\xbc\x35\xba\x9c\x8c\xfa\xd7\xc3\xb6\xfd\xf1\xf8\x33\x32\x38\xac\xc0\xcf\x3f\x43\xb4\xf2\xf0\x13\x1a\xf9\x2e\x12\x32\x81\x8b\x61\xab\xd3\xb5\x27\x97\xfd\x2b\x1b\xe9\x7c\x41\x72\xf7\x79\x5b\x6c\x37\x0e\x5a\xe3\xcb\xb3\x2a\xfd\x7c\x53\xcd\x1d\xaa\xa3\x24\x5b\x4f\x7c\x90\x2c\x8a\xb8\xd4\x9e\xd0\x64\x60\xa5\x9f\x6d\x37\xad\xc6\x2c\xbe\xd1\x5b\x06\xad\x61\xeb\x6a\x94\x45\xc0\x44\xf3\x40\x7f\xd7\x8c\x0c\x2b\x54\xa4\x51\x79\xec\xf7\x11\x4f\xd2\xe8\x82\x2f\x35\x95\x0b\xfb\x4a\x91\x68\x3b\xea\xf0\x50\x88\x64\xc0\xe2\x78\x25\xa4\x77\x56\x3d\x29\x1b\x37\x56\xaa\xcd\x0a\x9c\x9d\x41\x25\x91\x29\xcf\x3b\x6f\x0f\xda\x0e\xf8\x31\xd0\xf3\x23\x58\x71\x08\xc5\x0a\x42\xce\x3d\x88\x0c\x15\xdc\x64\x48\x9c\x54\xe0\x27\x24\x91\x3f\xae\xc3\xd5\xe2\x7a\xf5\x1f\x10\xa7\x1e\x7e\xbd\x01\x6b\x04\x73\xbe\x04\x5f\x07\x27\xc6\x33\x7a\x3f\x14\x96\xf4\xcd\x6f\x4f\xb8\xea\xf4\x9d\x9f\xc0\x31\x7e\xe2\x41\xcc\x37\x0f\x50\x1b\xe5\x79\xf3\x70\x0f\xae\x31\x84\x01\xe3\x2b\x0d\x3c\x48\xd6\x11\x47\xba\x24\x40\x5e\xc4\x8c\xf1\x37\x70\xcd\x98\x22\x0b\xb4\xe6\x75\x68\xb6\xff\xff\xb0\x68\x9a\x89\x0b\x16\x73\xee\x14\x50\xfc\x5f\x99\x71\x17\xab\xa2\xed\x06\xc2\x2b\xc0\x8f\x01\x32\x65\xbd\x48\x78\x1b\x47\xe4\x43\xb8\x61\x0e\x0e\x79\x24\xae\x23\x8f\x25\x7c\xf7\x59\x89\xeb\x90\xaa\x0d\xe8\xbd\x5b\x2e\xa7\x22\xe6\x8f\x29\x5d\xf8\xc9\x28\x9d\x2e\x85\x97\x12\x14\xfa\xc9\x63\x62\x73\x94\x38\xce\xb6\xa0\x48\xf8\xf5\x59\x2a\x4f\x09\x55\xa4\x63\x24\xdb\x45\x69\x90\x66\xf6\x18\xda\x57\xfd\xb1\x3e\x7d\x3e\x6c\xf5\xda\x3a\xbf\x37\x44\x4f\x34\xd1\x28\xd5\xb1\x5a\x6d\x16\xc8\x9d\x10\xb9\x73\xc9\x57\x05\x13\x8f\xfb\xfd\xae\x22\x38\xc5\x95\x5c\xa4\x97\x33\xd7\x98\x43\xd7\x11\x81\x08\xdf\x75\x28\xd5\x4b\xbb\x0e\x65\x1e\xdf\x79\x2c\xdc\xcd\xcd\x70\xca\x57\xc2\x73\x7b\xdc\x52\x07\x77\xd6\x23\xc9\x56\x35\xd4\x7b\x91\x4e\x53\x0c\x48\x57\x84\x09\x0f\x93\x9a\x2b\x96\xf5\x80\xcf\x92\x78\xe1\xcf\x12\x2e\xe3\x7a\x1a\xa9\x8f\xf5\x25\x8b\xf1\x7b\xdd\x30\xaf\xc5\x8b\xca\x26\x03\xbf\x10\xa3\xfb\xdd\x69\xf8\x23\x58\xcf\x45\x91\x2d\x65\x93\xae\x76\xb3\x78\xd4\x7d\x5c\xc5\xb0\x8c\x6d\xf7\x53\xbd\x71\x17\x18\x2e\xf0\xb7\xbb\x07\x8f\x6b\xf5\xe2\x77\xb9\x2c\x3c\x52\x20\x9f\x30\x99\x8c\xfc\x65\x1a\xb0\x44\x98\x9a\xd2\xb1\xdf\x3b\x6d\x1d\x4e\x77\xae\x4c\x43\x45\x55\xa6\x4b\xd4\x01\x5b\x04\x53\x2e\x1a\x7f\xd6\x3d\x7e\x5b\x0f\x53\x93\x77\x44\xcc\xe9\x8f\x9c\xd0\x95\x9c\x76\x9e\xa7\x7e\xe0\xf5\xd2\xe5\x34\xab\x54\x83\x61\xff\x9f\xed\xf6\x78\xd2\x6b\x5d\x29\xda\xa8\xa2\x58\x2e\xfd\xa4\x2d\xd2\x30\x39\xab\x1e\x50\x88\x4a\x7e\x6b\x05\xd8\x32\x60\x26\x2a\x3c\xb0\x5c\x5a\x3c\x54\xd6\x90\x45\xa2\x78\xa2\x9e\xc6\xb2\x1e\xf8\x53\x7e\xc7\xdd\xfa\x80\xce\x9d\xa7\x9e\xb7\x06\xcb\x85\xca\x40\xfa\x61\x02\xed\x77\xe7\x69\x88\x25\xee\x3d\x5a\x1b\xfb\x81\x0a\x86\x54\xdd\x09\x67\xa2\x16\xd1\xee\x43\x94\x21\xe4\xab\x3c\xd1\xca\xd6\xe9\x39\xe9\x2a\x60\xcd\x13\x7a\xf4\x48\x8a\x7c\x24\x3c\x20\x95\x27\xb0\x01\xc7\x87\x7b\x0e\x0e\x76\x10\xfd\x5b\xe3\xf0\x50\x05\x41\xb9\xf4\x9c\x8a\x58\x9f\xe1\xcd\x03\x0d\xa1\x5a\xe4\x50\x21\x67\xe5\x54\xae\x20\xcd\x3d\x68\x79\x1e\x38\xe3\x51\x2b\x8a\x10\xaa\xe3\x9e\x08\xed\x3b\xbe\x8c\x12\x1b\x7d\xb7\x8e\x54\xe3\xc4\x62\x98\x31\x14\x19\xd0\x18\xe8\x17\x3f\x0e\xf7\x11\x95\x38\x2a\xc2\xc2\x78\xc5\xe5\x58\x6c\x37\x7f\x93\x27\x9e\x65\xf7\x48\xca\x43\xed\x85\x8f\x50\x7d\xcc\x8e\xb2\xf0\x97\x4a\x47\xf0\x18\x7a\x22\x01\xfb\x8e\x0e\xfc\x02\x9f\xb7\x8e\x78\x4e\x1a\x52\xfd\xcd\xf3\xba\x4f\x85\x08\xb4\xf6\x8f\xad\x57\x2a\x45\xa4\x0e\x36\xab\xad\x40\xfa\xf3\x45\x72\x04\xcc\xf3\xb8\xf7\x29\xac\x64\xc5\x0a\x93\x40\x39\xa0\x18\xf5\xe3\xbf\x06\x3a\xa3\xb2\x07\x9b\x36\x6c\xd4\xbe\xb4\xaf\x34\x4a\x67\x89\x77\x9a\xef\xd4\x5e\x61\x8b\x8e\x9e\xb6\x04\x44\x7e\xc4\x55\x87\x8b\xa9\x7c\xe7\x0a\x8f\x4f\x89\x0f\x58\x2a\x1f\x55\x9f\x60\xc5\xee\x82\x2f\x4d\x4d\xb7\x16\x3e\xc2\xe5\x82\x07\x81\xc6\x4c\x3b\xbc\xf5\xa5\x08\x29\x39\x71\xa3\x77\x03\x7e\xb4\x10\x21\x8f\xb3\xe4\x07\xcb\xc3\xdb\x83\x1f\x9a\xd6\x39\xc2\x87\x33\x21\x97\x67\x0f\xb6\x1d\x51\xef\x8b\x32\x56\x68\xbf\xf4\x6f\xb9\xd7\x61\x09\x1b\xb0\x64\x01\xb5\x0c\xd0\xb4\x60\xba\xc0\x54\xaa\xaf\xa8\xbf\xb8\x73\x23\xc9\x93\x64\x6d\x4c\x44\x17\x95\x1f\x68\xa1\x3b\x37\x21\xaf\x3d\x69\x8a\x1f\xa1\x6e\x82\xdb\x73\x3a\x19\x45\x5a\xd2\x5d\xa0\x11\xbe\x43\x97\x22\x20\xfe\x20\x9f\x7f\xc5\x25\x16\xd3\xe2\x16\xd7\xaa\xa7\xb5\x3b\xd7\xac\x40\xf6\xfb\x39\xef\xd9\xea\xba\xb2\x1b\xd7\x8b\x97\x8c\xaf\xa8\xa1\xef\x3d\xc6\x86\xd9\xd7\xbe\xca\xc3\x58\x65\x2e\xd4\x30\xe1\x6e\xb1\x05\xaa\xeb\x35\x9d\x88\x4f\xe9\xd1\xc8\xe9\x61\x88\x15\x77\xe4\x3b\x1f\x65\xbd\xa2\x6a\xef\x78\xe2\x2e\x5a\x21\x35\x8d\xcc\x97\x03\x29\x6e\x7d\x42\x55\x3f\x9c\xe3\xe7\x99\x1f\xf0\x58\xeb\xbc\x07\x7b\xe3\x7e\xa7\x0f\xbd\xfe\x18\xae\x47\x4e\xef\x02\xc6\x97\xce\x08\x5a\xbd\xbf\x3e\x5c\xda\x43\xfb\x08\x7a\xb6\xdd\x81\x71\x1f\x3a\x76\xdb\xe9\xd8\xe0\xbc\x83\x0f\xf6\xf6\x61\x5f\x6d\x27\x32\xc9\x02\x3b\x78\xec\x11\x62\x88\x11\x4d\xe8\x89\x27\x56\x61\x20\x98\x07\x54\x00\x11\x6a\xc4\xc6\x02\x30\x13\x01\xba\x97\x36\xb1\xd0\x53\x60\x07\x54\x9d\xa9\xb5\x9e\xa5\xa1\xab\xe2\x78\x20\x22\x8a\x5b\xbe\x4b\xf6\x72\xa9\xd5\x6e\xf7\xaf\x7b\xe3\x89\x7d\xd5\x72\x74\xcb\x45\x6c\xa9\x07\x46\x75\xc1\x4a\x61\xf3\x28\x13\x63\xa2\xea\xb0\x5e\x58\xde\xc2\x2f\xb5\xa5\x98\x22\xad\x28\x23\xbf\x91\x0e\x03\xe1\x39\xd6\x68\x5c\x84\xde\xd1\x0a\x9d\x30\x12\xa9\x74\x33\x4b\xb6\x86\xed\x4b\xe7\xbd\xbd\x8d\x1e\x67\xd0\xda\x7e\xd1\xa3\x01\xbc\x75\xef\x74\x71\x5d\x93\x4b\x23\xf2\x73\x3d\x5f\x8a\x37\x20\xed\x79\x28\x04\xe4\xd9\x02\x5a\x94\x2c\x86\x7c\xd0\xa0\x12\x15\x53\xd8\x6d\xae\xff\xd6\xbf\xe6\xa2\xa9\x59\xf3\x23\x46\xec\x37\x8f\x92\x65\x84\x5b\xa9\x8d\x2a\x6e\xc2\x87\xcb\x1b\x8f\x4c\x28\x0b\x9b\x8b\x12\x6a\x64\x11\x31\xcd\x32\x90\x95\x9c\xed\x8e\xdc\xdd\x87\xea\xbf\xd4\xbc\x35\x16\xb5\x6f\xa0\x9f\x6d\x25\x3e\x8f\x84\x57\x5a\xa2\x94\xb5\x4c\xbf\x9a\xd9\x56\xab\xd7\x6a\x5a\xb9\x82\x64\xea\x94\xb9\xc2\x46\x14\x11\x68\x38\x74\xed\x38\x0d\x33\x17\x22\x26\xdb\xdd\xfe\xc0\x1e\x4e\x4c\x78\x6d\xfc\xb8\x41\x81\xc8\x0f\xb0\x54\xa7\xea\x3c\x76\x75\xd4\x14\xab\x09\x8a\xba\x39\x93\x10\x1a\xc9\xac\xf8\xc6\x8f\x26\x2b\xe6\x23\x2c\xcf\x27\xe8\x9d\x89\x82\x89\x09\x46\x1b\x7a\x2e\x26\x57\x52\xfb\xbd\xbd\xa7\xa9\x9c\xf5\x43\x6f\x47\xc8\x3d\x27\xdb\xf9\x75\x8f\x46\x2b\x98\x99\xbd\xb1\xf3\xce\xb1\x87\x1a\xaa\x28\xee\x55\xa8\x23\xbc\x98\x19\x48\x5b\x72\x8c\x68\x6c\x16\xfa\xa1\x93\x7c\x4d\xe5\xdd\x64\x8b\xf8\x88\xb8\x8f\xda\x78\xa9\xcb\xf3\xac\xa8\xdf\x8d\xa2\x89\x99\x2a\x9d\x54\xf4\xdd\xf5\xe9\x74\xfa\x1a\x0a\x5d\xf5\x9f\x04\xa1\x0f\x4e\xb7\x9b\x47\xa0\x0b\x04\x68\xca\x87\xeb\x6b\xa7\x03\x33\x29\x96\xb9\x8c\xde\x83\xec\x42\x33\x47\xd0\x35\x37\x1a\x75\x8d\x59\xde\x45\xb2\xfe\xba\x79\xfc\xba\xf9\xfa\x77\xf6\xeb\x89\xcb\x4e\xf9\x09\x3b\x79\xc5\x4e\xe9\x50\x57\x88\x08\x69\x4a\x91\xa2\x41\x09\x3f\x94\xcc\x47\xd4\x4b\xae\x45\x8a\x77\xfe\x04\x18\x5c\x77\x9c\x8e\x6a\x9e\x88\xfb\x32\xcb\x4a\x05\xee\x62\x06\x51\x86\x1b\x79\x0c\xa8\x6f\x6a\x41\x71\x0e\x32\xc6\x83\x0f\x40\x12\x38\xb5\x85\x94\x69\x94\xe3\x86\x5a\x8f\xcc\xeb\x6f\x21\xab\xfe\x08\xcd\xde\x22\xee\xd1\x5c\x23\x4d\x7d\xef\xf9\xb6\x76\x5f\xb7\xb5\x64\xb5\x7d\x50\x37\xa1\x38\x41\xac\x81\x3f\xfe\xf8\x03\xaa\x07\x31\xc7\xae\xde\x4f\xd6\xe0\x2e\xf1\xc6\xd4\x01\xcb\xa7\x4b\x5c\x4e\x8c\x7b\x9a\xb7\x6d\x2e\x50\x87\x74\x13\x21\x4d\x9c\x19\x59\x86\x3c\xa1\xe4\x3f\xd2\x20\xef\x8a\x68\x8d\x5d\xf8\x91\x69\xc6\x17\x4c\x75\xe3\x2c\xc0\xd8\x44\x61\xa6\x5c\x6f\xf1\x39\x0d\x56\x36\x57\x56\x52\xe1\x7e\xc7\xd8\x47\x6f\xf8\x89\x06\xae\xff\x5e\xef\xfa\x53\xc9\xe4\xba\x7e\xa5\xcc\xd0\xe1\x34\xbf\xad\xe7\x03\xee\x13\x64\x21\x57\x37\x24\x1f\x15\x80\x3c\x6d\x1a\x4a\x91\xb0\x74\x82\x5c\xaa\x83\xca\x94\x2d\xfa\x47\xb8\x37\x7b\x6c\x8b\x1f\x22\x89\xe6\x90\x41\xff\x15\x3e\x45\xbc\x28\x72\x82\x8f\xe6\xec\x67\x92\xce\xf0\xd4\xf8\xaf\x67\x58\xe6\xa7\x87\x38\xaa\xaf\xe1\xdb\xf9\x03\xb6\x05\x52\xf8\x5e\x97\x61\xa9\x5d\xd8\xf9\x0b\x73\xb9\x24\xb9\xd7\x16\x01\x16\x98\xb3\xfd\x4f\xc7\x27\x27\x1f\x8f\xdf\x9e\x34\x96\xfb\x34\x9d\x45\xe7\x3c\x5c\x69\xd2\xca\x34\x48\xf9\xc3\x85\x53\x5a\x08\x45\xf1\x31\x3e\x2b\x97\xec\xab\xeb\x6e\x6b\xdc\x1f\x3e\xd1\x64\x6d\x96\x87\xf6\xe8\xba\x3b\x1e\x61\xe8\x86\x62\x91\x46\x68\xe8\x56\xaf\x33\xec\x3b\x1d\x3d\x46\xa6\x1e\x39\xae\x73\x23\x3b\x02\x2e\xbb\xf5\xb2\xe1\x2f\x82\x50\x83\x7e\xfc\x7c\xa8\xae\x88\x0a\x58\xde\x60\x6a\x61\x7f\x82\xff\x19\x4c\xfd\x39\xec\x5d\xb6\xda\x7f\x3f\x02\x11\x06\x6b\x50\x13\x78\x5c\x90\x1c\xdb\x87\x24\x95\x21\xf7\xb2\x39\xdf\xcc\x97\x98\xc5\xc9\x4a\xe0\x8d\xd1\x15\xa1\x87\xa9\xef\x40\x9c\xba\x37\xaa\x6f\x71\x30\xc7\x28\x7e\x6f\x68\x5e\xc9\x60\xc5\xd6\x20\xd2\x24\xf7\x1e\x62\x87\x36\x7f\x54\x9b\x5a\xac\xf6\x82\x23\x19\x0c\x61\xe4\x83\x9c\x57\x8c\x44\x1b\xb4\x7a\x4e\x1b\x3e\x12\x84\x50\x8b\x4e\x3d\xd5\x11\x44\x69\x92\xc9\xb3\xc2\x5b\xcf\x1c\x32\xb5\x81\x50\xf6\x33\x8d\xc5\xf1\xd4\xc4\xa0\xf7\x81\x9a\x86\x62\x5c\x3e\x64\x7e\x4f\x2d\x22\xba\x11\x6d\xa9\x0e\xa0\xd1\x5c\x2d\x8a\x53\x14\x22\x62\xa1\xef\x1e\x29\xd8\x5b\x51\x96\x32\x0d\xab\x54\xea\x54\x1a\xaf\x61\x89\x25\x0c\x8d\x94\x46\x47\x10\x52\x35\x8c\xb7\xf3\xa5\x9c\x2c\xf7\x7a\xd8\x70\xbc\xa3\x9b\x21\x9c\xdb\x68\xb1\x52\x46\x54\x05\x35\x8d\x6a\x70\xc5\xd6\x53\xae\x38\x56\xbf\x6c\xa2\xf1\x3e\xdb\x4d\xc1\x5f\xfd\x92\x85\xd6\x3d\xdc\xa0\x38\xfa\x4e\xef\x0a\x29\xb9\x9b\xe8\x1c\xc8\x18\x5d\xa2\x5a\xfb\x31\xac\x16\x46\x89\x40\xcc\x21\x66\xeb\xf8\xcd\xa7\xb0\xb8\x71\x87\xbd\xb2\x2d\x7a\x34\x7c\x0c\x7b\xf4\x83\x40\x78\x40\x06\xca\x4d\x89\x47\x9c\x23\x38\x06\xfe\x0d\x37\x76\xc4\x30\x0b\x45\x66\xc7\x80\x27\x28\x81\xab\xdc\x4d\xa7\x75\xb8\xe1\x41\x7b\x38\x44\x6e\xff\x0b\xb7\xa9\x03\xda\x6d\x5b\x74\xcc\x51\xd9\x61\xf0\x6f\xd1\xcf\x28\xd8\x20\x05\x1b\x4a\x44\x9b\x44\xcc\x0d\xc7\xb7\x93\x82\x80\x46\x27\x30\x65\xd3\xf5\x11\xba\x27\x07\x0a\xf7\x31\x8d\xdf\x10\xa7\xf2\xce\xc1\x38\x36\x6e\x55\xc6\xcf\x7c\x68\xd8\xee\x41\xab\x73\x0e\x73\xec\x13\x63\x7d\x7b\x10\x7a\x6a\x81\xa7\xa8\x71\x52\x92\xd0\x31\x4f\x41\x28\x24\x3e\x5d\x23\xc8\xcf\x18\x7e\x2a\xf6\xb4\x65\xff\x25\xc5\x4c\xf1\x78\xc4\x31\x23\xf1\x34\x56\x17\x4d\x3c\x31\x09\x8f\xb5\x25\x08\x74\xcc\xc2\x0a\xeb\x3e\x86\x2b\xc6\x03\x0f\xb7\xbe\x62\x54\x56\xa7\x01\xd6\x6e\xb5\x9e\x17\x15\xe8\xaa\x17\x6f\x14\x99\x72\x97\x61\x1e\x50\x5d\xf7\x89\x37\x5e\x2d\x60\x9a\xce\xc9\x9b\x25\xe6\x4d\x95\xdc\x16\xca\x6d\x69\x99\x4d\x2d\xec\x61\x1e\x25\x59\x04\x1a\x6d\x88\xed\x2d\xd2\x66\xc8\xf7\x48\xe7\xb6\x20\xac\x21\x33\xdc\xea\x1a\x53\xc4\x88\xad\x48\x0b\x1a\x69\xf9\xa1\x1f\x2f\x30\x07\xa7\x22\x21\xab\xab\x8a\x8a\xb9\x78\x04\x04\x3e\x5e\xa4\x8c\xd7\xcc\x50\x4b\xdf\xb2\xe4\x5a\xdb\x84\xcd\x99\x1f\x1e\x6d\xec\x83\x9e\x22\x72\x2c\xc0\x1d\xfe\x7c\xae\x79\x67\x1e\x2f\x86\x76\x4e\x78\x82\xbc\x62\x00\x6c\xd4\xc9\x45\x80\x7a\x9b\x43\xc0\x8a\x9d\x12\x89\x09\x6e\x80\xbd\xae\xf1\xff\xa8\x3d\xb4\xed\xde\xa4\xdb\x6f\x75\xb0\xe3\xc3\x14\x20\x0b\xc6\x34\xe5\xa1\xed\xe8\x92\x08\xe2\x75\x5c\x9b\x0a\x91\x4c\xd0\xe9\x11\xba\x9b\xab\x51\x0c\x0d\x3c\x60\xff\x93\xdc\xa7\x3c\x28\xad\x16\x54\xa2\x29\x17\x8a\x04\x75\xc7\xd0\x50\x2d\x83\xee\x85\x0c\x30\x9f\x96\xf3\xd5\xf5\x9b\x6c\x2c\xb4\x8d\x57\x8b\xb5\x7a\x4f\xb5\xd0\x3f\x50\x9f\x58\xa0\x15\xb6\x15\xf0\xde\x63\xcb\x30\x9f\x01\x71\x20\x56\xff\x94\x95\xe5\x1f\xa4\xb0\x2a\xe9\x26\x81\xb2\xd1\x1d\xc7\x98\x59\x6b\x91\x8c\x73\x68\x57\x6d\x53\xf5\x54\x92\xa4\x04\xda\x18\xca\x29\xde\x87\x51\xe7\xad\x43\x6b\xc5\x24\x5f\x0a\xdc\x5c\x74\x2e\x51\x2b\xf8\x35\x11\xa9\xbb\xc8\xc7\x84\x08\xdd\xcc\xb1\x5b\xb5\xfc\x90\x8a\x17\x62\x34\xca\x87\x3d\xe6\xeb\x66\x11\x92\xf2\x1c\xf0\xea\xc7\xe5\x4f\x79\xdb\x15\x8a\x84\xd1\x4a\xa6\x21\xb5\x50\x35\xf8\x4b\xa4\xfb\x92\xb8\x22\xa6\x63\x3d\x5e\x03\x9e\x8e\x31\xfd\xff\xfb\x3f\xff\xe3\xbf\xf2\xb0\x76\x6c\x5e\xe9\xd1\x0c\x1a\x5b\x9f\x87\xff\x4c\x2b\x94\xbd\x91\xe9\xfc\x3d\xbb\x8f\xb4\x55\x1b\xaa\xaf\x11\x0a\x27\x2c\x75\x83\xa0\x3f\x0e\x48\x98\x7b\x43\x39\x3a\x43\xdf\xaa\x2b\x04\xab\x9f\x34\x7e\x3f\x3e\x3e\x6d\xfe\x56\x7f\xf5\xdb\xef\x0d\x75\x73\xc0\x36\x41\x01\x56\xae\x43\x58\x28\xaf\x64\x60\x87\xe9\x7e\x53\x2e\x1d\x80\x8e\xc9\x57\x34\x4e\xca\x22\xb9\xa1\x43\xd6\x2c\x35\xde\x82\xaa\x0d\xeb\xb7\xca\xa7\x70\x88\x11\xc1\xb4\xd8\xd9\x3b\x35\x9a\x09\xaa\xf7\xb5\xa9\x9f\xeb\xef\xcc\x5b\xb0\xad\x52\x9a\xcc\x53\xc7\xf5\x6b\x0a\x45\x84\xfe\xfe\xc0\x0f\x12\xbc\x7c\x54\xcc\x56\xab\x79\x52\x31\x7f\x69\xf1\xbd\x04\x9a\x95\x97\x8a\xd0\x78\x31\x85\xe3\x97\x52\x68\xfc\xfe\x62\x0a\xaf\x5f\x4c\xe1\xb7\x17\x53\xf8\xf5\x3b\x9d\xa9\xda\xee\xef\x3c\x9b\x8d\xa5\xad\x97\x10\xe1\x77\x89\x64\x56\xa6\xc7\xb2\x49\xef\xbc\x63\x1f\x01\x62\xfd\x22\x82\x73\x21\xe6\x01\xff\x11\xf4\x10\xc0\x2d\x7f\x39\xb7\xee\x5e\xff\x6a\xe5\x43\xff\x51\x5a\xb6\xce\x9d\x17\xa4\x65\xc6\x86\xc9\x25\x67\x53\xdf\xba\xfd\x8d\x59\x2f\xcf\xb4\xa7\x84\xdf\x40\xf6\x20\xe0\x8c\x5e\xa5\x99\xd7\xda\x04\xff\xda\x74\x40\x47\x7e\x3d\x05\x94\x45\xa1\xaf\xf9\x73\x8a\xad\xd6\x66\xfc\xf4\xbe\xa3\x95\xde\xdc\xfe\xc6\xad\xe1\x85\x3d\x56\x77\x3f\xb4\xc8\xc3\x37\x23\x4a\x09\x6c\xa5\xb7\x5a\x58\xb7\xe0\x2a\x52\x40\x37\x3e\x2b\xd4\x97\x3e\x2b\xc9\xe6\x6e\x28\x80\x79\x7f\x60\x7a\x30\xfc\x46\x2f\x78\xa8\x2b\x73\x69\xca\xf6\x3f\x01\x00\x00\xff\xff\x2f\x2b\x5d\x34\x84\x26\x00\x00")

func scriptsBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsBash,
		"scripts.bash",
	)
}

func scriptsBash() (*asset, error) {
	bytes, err := scriptsBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts.bash", size: 9860, mode: os.FileMode(420), modTime: time.Unix(1468510883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts.bash": scriptsBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts.bash": &bintree{scriptsBash, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

