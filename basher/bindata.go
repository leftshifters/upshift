// Code generated by go-bindata.
// sources:
// scripts/main.bash
// DO NOT EDIT!

package basher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsMainBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\x7f\x72\xe3\xb6\x15\xfe\x5b\x3a\xc5\x8b\xac\x59\x27\xad\x28\x5a\xf2\x26\xd9\x24\xeb\xed\x28\x92\xe2\x55\x63\x5b\x1a\xcb\x4e\x27\x93\xcd\x6c\x20\x12\x12\x51\x93\x04\x07\x00\x2d\x6b\x5c\xf7\x06\x3d\x43\xef\xd1\x53\xf5\x08\x7d\x0f\x20\x65\x52\xb6\x27\x4e\x9c\xce\xec\xda\x26\x01\x7c\xef\xf7\x7b\x1f\x78\xca\xae\xf8\x77\x32\x0e\xb9\xd2\x9f\x7e\x06\xb7\xcd\x46\x72\x15\x0a\x05\x5e\x06\xdd\x3c\xd3\x91\x58\x1a\x3f\x96\x2b\xed\x3f\xb6\xb0\xc8\x45\x1c\xfa\xcd\xbb\x66\xf3\x32\x5b\x29\x16\xf2\x79\xa0\x44\x66\x1c\x4e\x90\xab\x18\xbc\xa5\x9e\x9f\x40\x64\x4c\xa6\xbf\xf6\x7d\xc5\xd6\xdd\x95\x30\x51\xbe\xc8\x35\x57\x81\x4c\x0d\x4f\x4d\x37\x90\x89\x1f\xf3\xa5\xb1\x98\xa8\x86\x5f\xc2\x27\x4c\xe3\xb3\x2f\x52\x6d\x58\x1c\x77\x75\x04\xef\xa0\x58\xeb\x1a\x9e\x64\xf0\xea\x15\x04\x51\x22\x43\xf8\xf3\xcd\x83\x85\xae\xbf\xfb\x46\x25\xb5\x4d\xa4\xf6\x9c\x9b\x3c\x3b\xe6\x89\xd3\xf8\x78\x7c\x7a\xd4\xee\x35\x1b\xc3\xc9\x51\xbb\xdf\x6c\x9c\x4b\x69\x66\x4c\xeb\xb5\x54\xe1\x51\xfb\xb0\xd9\x6c\x88\x25\xfc\x04\xad\x76\xbf\x05\x47\x47\xd0\x32\x2a\xe7\x2d\xf8\xf9\x1b\x30\x11\x4f\x9b\x8d\xc6\x1e\x0c\x27\x20\x34\xd0\xfb\x0e\xac\x39\xa4\x72\x0d\x29\xe7\x21\x64\x05\x0a\x6e\x2a\x20\x0e\x5b\xf0\x09\x42\x54\x8f\x37\x78\x10\x49\xf0\xb8\x5b\xfd\x07\xe8\x3c\xc4\xc7\x39\xac\x78\x02\x85\x0b\x80\xb4\xc3\x8d\x37\xc2\xc0\x01\xfe\xc5\x63\xcd\xb7\x2f\x68\x69\x29\x9a\xe5\xcb\x3d\xb8\x44\x1f\x83\x8e\x64\x1e\x87\x60\x36\x19\x47\x14\x92\x55\xd5\xe6\x49\x19\xa5\x08\x04\x44\x37\x1d\x0b\x33\xcb\xe3\xd8\x79\xe9\x7c\x7c\x3a\xbd\x18\x5b\x47\x7d\x7b\x3e\x38\x1b\xbe\xb7\xce\x3a\x99\x1e\x7f\x37\x39\x19\x93\x9f\x1a\x95\x94\x6a\x36\x30\xde\x90\xe5\x16\x17\xda\x7d\xe8\xbf\x7b\xd5\x43\xe3\x0c\xe7\x80\x5b\x1d\xf6\x3c\x5f\x60\x10\xf3\x98\x4f\x52\x51\x24\xcf\x16\xae\xf7\x08\x9c\x2e\xf7\xa3\xce\xf8\x58\x85\xec\xed\x42\x5e\x66\x21\x33\xfc\x37\x81\xe6\xf6\xc8\x43\xd8\x99\x0c\x27\xce\x47\xbf\x02\x97\x61\x46\x96\xde\xac\xa1\x34\xee\x73\x0e\xab\x25\xe6\x7f\x73\x40\x75\x5d\xec\x0a\xac\x15\xcb\x32\xae\xec\x01\xc3\x94\x99\x8b\x24\x8f\x99\x91\xca\x1d\x19\x8d\x7f\x98\x0c\x1f\x11\x7d\x13\xa8\x3c\xb5\xc2\x55\x9e\x60\x71\x69\xf0\xd6\x98\x50\xbd\x16\xf4\xde\xf9\x21\xbf\xf6\xd3\xbc\x50\x8a\x90\x87\x32\xc9\x04\xba\x7d\x3a\x77\xa8\xb3\xf3\xe9\x5f\xc7\xc3\x8b\x8f\x17\x3f\xce\x1c\x76\xf9\x62\x36\xb8\x70\x61\x9e\x0f\xdf\x8f\x4f\x5d\x94\x4b\x15\x5e\x5b\x4f\x14\x5b\x3e\xdf\xd1\x47\x73\x03\x9e\x84\x4c\x64\x7c\xc9\x44\x4c\x65\x78\x13\xc8\x90\xdb\xce\x01\x9e\xd5\xcc\x16\x94\xa7\x83\x88\x27\x45\xf2\x7b\x91\xc0\x5e\x12\xf1\x38\x76\x0d\x65\x9c\x5e\x0b\x25\x53\x32\x08\x37\x86\x57\x20\xb2\x48\xa6\x5c\x97\x3e\x01\x2f\xe4\xda\x88\x94\x19\x21\x53\x68\x65\xf8\x72\x29\x55\x72\xb4\xb3\xad\x93\xb2\x84\xa3\xc2\x2d\xda\xaf\xc4\x35\x0f\x47\xcc\xb0\x19\x33\xd1\x4e\x4b\x2b\x02\xd6\x6a\x7f\x4e\x85\x78\x13\x64\x8a\x1b\xb3\x21\x8f\x0d\x54\x10\xe1\xc1\xdf\xe7\xb1\x72\xed\x6c\x70\xfa\x7f\xf2\xdb\xaf\x98\xe5\x31\xa7\x7e\x7d\xad\xfd\xba\x7b\x13\x14\x2b\x50\xfe\x7e\xd2\x03\xe3\x9b\x4c\x2a\xf3\xc0\x01\xce\xa6\x5e\xd5\xa6\xfe\x6f\xb3\x89\x5b\xe0\xc2\xc1\xe5\xe3\x34\xa3\x90\xea\x59\x2c\xb4\x81\x6e\x86\xd6\x61\x69\xfa\x6e\xad\x9b\xd9\xb7\x4f\x18\xd5\xab\x18\x55\x80\x3d\xd8\x21\x32\x56\x2d\x50\xeb\xd0\xba\xb5\x33\x99\x51\xee\xf0\x99\x92\xd7\x42\xa3\x2a\x22\x5d\xe1\xdf\x4b\xac\x9a\x62\x5c\xee\xc1\x31\xda\x45\x7d\xf5\xf2\x72\x32\x82\xa5\x92\xc9\x56\x51\x5a\x2d\x67\xdf\x0a\x75\x2d\x86\x9f\x9d\x78\xc9\x4d\xa6\xfc\x37\xfd\x83\x37\xfd\x37\x5f\xb1\x2f\x0e\x03\xf6\x9a\x1f\xb2\xc3\xcf\xd9\x6b\x3a\x74\x22\x65\x86\x98\x4a\xe6\xab\x08\xa8\x8d\x58\x81\x1d\xc0\xe9\xb1\x91\x39\xb6\x6b\x03\x0c\x2e\x47\x93\x51\x07\x58\x18\x92\xf4\x04\x8c\xb4\x5a\x58\x9f\xc8\x25\x64\x85\x96\x3b\x41\xb0\xf3\xc7\x0b\xa1\xd5\xf5\xb7\xee\xac\x0f\xb1\x0b\x04\x29\x97\x60\x69\xcf\x01\x8e\x03\x6d\x34\x0d\x18\x99\xa7\x61\xe9\x80\xa3\x25\x73\xb3\x06\x8b\xad\x94\x77\x86\x25\x46\x83\x66\x0b\xfe\xa7\x6e\x22\x17\xb8\x90\x95\x1e\xfc\x06\x42\x49\x43\x2b\xcf\x05\x8e\xd5\x4f\xfd\x5c\x2b\x3f\x16\x0b\x7e\xc3\x03\xdf\xc6\xf9\xdb\x3c\x0c\x37\xe0\x05\xb0\x3f\x53\x02\x2b\x9e\xfc\xba\x0f\xb6\x7b\x69\x13\x22\xf6\xdb\xb7\x6f\xa1\xfd\xa9\xe6\xc8\x30\x84\xd9\x40\x90\x60\x97\x1b\x81\x27\x30\x80\xb7\x15\x35\xee\x5a\x18\xdc\x6d\xd3\xfb\xec\xb3\x26\x49\xdd\x83\xc9\x92\x7c\x47\xb1\xb2\x56\x75\xac\xe5\x10\xc8\x6c\x03\xc2\x58\x17\xe3\x34\x88\x98\x4e\xf7\xd1\xc9\xb1\xe2\x0c\x95\x59\x70\xb7\x45\x70\x9a\x9a\xe5\x10\xbf\x25\x13\xee\x1e\x99\xe4\x44\x05\x08\x8f\x34\xa1\xb8\xb8\xcc\xb0\xae\xb4\xcb\xbf\x04\x19\x32\x23\xa8\x6b\x0b\xff\xf4\x4f\xc4\x42\x31\xb5\xf1\x4f\xad\xc7\x46\xfc\x5a\x04\xdc\xaf\xa6\xde\x07\x28\x7d\xef\x17\xd2\x77\xbd\xfb\x8b\x15\x90\x91\xe3\x96\xd0\xba\x50\x2c\xd5\x94\xfa\x78\xd6\x69\xf3\xc4\xb1\x7a\xde\x92\xce\x85\x2e\x1f\xd2\x96\x45\xac\x07\x9e\x28\x0e\xbd\x26\xbe\xd1\x08\xb1\xc7\x36\xef\xa9\x4d\x6d\xa7\x65\x4a\xb4\xbb\x46\x74\x76\xf9\x4b\xa9\xee\x28\x0f\x91\x39\xfd\x88\x19\x6e\x69\x13\x6a\x41\xd9\xad\x25\xa6\x54\x56\xf1\xc2\x36\xb7\xab\x89\x56\x28\xfa\x18\x15\x2a\xe1\xdf\xf3\x4d\xc7\xd6\x4f\x15\x1d\x9f\xd5\x73\xd1\x4b\x70\xc7\x8a\x06\x69\xa8\xa4\x08\x87\x31\x67\xe9\x96\x11\x14\xbd\x6f\x77\x2e\x77\x7d\x37\xd7\xd7\x10\xd0\xf6\x87\xe4\xa2\x00\xbb\x4c\xc5\x0e\xc5\xf8\x55\xc0\xbc\x3c\x32\xd8\xa5\x1b\x15\xdc\x82\xb8\x8c\xb0\xd9\xae\x9e\x0f\x2d\x2a\xa7\xc0\xf3\xf0\x21\xb8\x32\x8a\x05\x8f\x90\xa3\x42\xce\x40\x6b\x9e\x2c\x62\xfe\x7c\x19\xac\x38\xf1\x3c\xfc\x13\x8c\xe4\xf3\xb1\x63\x6a\x1f\x4f\x41\x59\x5a\x35\x08\x8c\xb8\xc6\x26\x52\x0c\xb3\xc1\xf0\xfb\xc1\x71\x41\xab\x06\x93\xb3\x8f\x83\xe1\xc5\xe4\x87\xc9\xc5\x8f\x0f\x87\x19\x0b\x17\xc8\xad\x91\xa1\x00\x4b\x40\x13\x14\x78\x29\x0a\xa0\xb1\x82\x9b\x2b\x1a\xb3\x3c\x0d\xa2\x71\x95\xbd\xd5\xa1\x9a\x0d\xc5\xc3\xa1\x8c\x31\x0f\x8f\xf6\x3f\x1c\x1c\x1e\xfe\x74\xf0\xcd\x61\x2f\xd9\x27\x2a\x88\x6d\x67\x77\xa5\x4f\x2b\x8b\x38\xe7\xbb\x0b\xaf\x69\x21\x95\xf5\xd7\xf8\xae\xd9\x18\x9f\x5e\x9e\x0c\x2e\xa6\xe7\x4f\x0c\xe9\xed\xf2\xf9\x78\x7e\x79\x72\x31\xc7\xa6\x9c\xca\x28\xcf\xb0\x96\x07\x67\xa3\xf3\xe9\x64\xf4\xf1\xfd\xf4\x74\xec\x1b\x29\x63\xed\xf3\xc2\x12\x64\x1b\xec\x3a\x74\xdc\xb2\xff\x0e\x99\x7d\x8f\x7e\xbc\xa2\x2e\x8b\x33\x64\x3a\x9a\xc2\xd7\x38\x4a\xf0\x3a\x84\xff\x18\x2c\xc4\x0a\xf6\xde\xa3\x7b\x3b\x20\xd3\x78\x03\x5c\x29\xa9\x70\x41\x71\xc0\x59\x9b\xab\x94\x87\xe5\xf5\x64\x29\x14\x4e\x30\xb3\x96\x80\x1d\x5e\xa6\x21\x8e\xbd\x09\xb2\xf3\xe0\x0a\x58\x1a\xe2\x9f\xd8\x6e\xb0\x33\x5f\xd1\xe5\x8a\xc1\x9a\x6d\x40\xe6\x06\xc9\x45\xcc\x79\x06\x8f\x5b\xf3\xb6\xdd\x77\x6a\x0d\x23\x8e\x30\xd8\xa7\x50\x0e\x4a\x5e\x33\x52\x6d\x36\x38\x9b\x0c\xe1\x27\x1a\x9f\x9c\x04\xa3\xce\x1d\xbc\xb1\x98\x52\x9f\x35\x32\xcf\x15\x94\x66\x03\x71\xc8\x9f\x29\x55\xf0\xd4\xc7\xe1\xf4\xf2\xec\x02\x25\xd8\xab\x1b\x0e\x84\x5d\xe1\x77\xc4\x27\x30\x8c\xe8\x4b\x7b\x00\x9d\x16\x38\x55\x26\x75\x25\x32\x96\x8a\xa0\x63\x47\xfe\x9a\xe6\x0f\x73\x94\x82\xae\xc9\x76\x40\x6d\x20\xe1\x58\x28\x21\x5e\x4e\x3a\x78\xaf\x34\xb8\xb2\xbd\x8e\xde\x56\x74\x41\x81\xde\x0a\x9b\x6b\xa5\xdd\x6e\x67\x01\xe2\x6d\xad\x58\x5b\x27\xc6\x92\x11\x62\x17\x4e\xd9\x66\xc1\xad\xc4\xf6\xed\x36\x1b\xef\xca\xdd\x34\x9e\xda\xb7\x65\x6a\xdd\xc1\x15\xaa\x23\xec\x7c\x0c\xa4\x52\x3c\x30\xae\x3b\xde\xb7\x59\xc5\xf7\x35\xac\xa3\xc2\x88\x58\xae\x40\xb3\x8d\xfe\xfa\x43\x5a\xdf\xf8\x88\xbf\xca\x2d\xae\xd3\x1e\xc0\x1e\xfd\x20\x7a\x31\x23\x07\x55\x2e\xb7\x73\xce\x71\xec\xc7\xe2\x8a\x17\x7e\xc4\x34\x4b\x65\xe9\xc7\x98\x1b\xd4\x20\xb0\xe1\xa6\xd3\x2e\xdd\xf0\xe0\xf8\xfc\x1c\xa5\xfd\x86\xb0\xd9\x03\x2e\x6c\xf7\x73\xbf\x82\xf2\x88\xc3\x9f\x63\x5f\x61\x60\x8f\x0c\xec\x59\x15\xc7\xa4\xe2\x23\x33\x91\xba\x3a\x31\xe7\x05\x5b\xe0\xf4\x6a\xdf\x56\x9a\xc2\x9d\xed\x3b\x38\xb2\xaa\xc1\xc1\x3c\x2e\xc2\x6a\x9d\x5f\xc6\xb0\x10\xbb\x07\x83\xd1\xb7\xb0\x42\x52\xac\x6d\xa6\x83\xb4\x04\x9b\x4e\xad\x19\x6a\x44\x9a\xd0\xb1\xd0\x72\x0f\x30\x02\xa5\x0b\x8a\x33\xa6\x9f\xcd\x3d\xe7\xd9\xbf\xe7\x58\x29\x21\xcf\x38\x56\x24\x9e\x46\xde\xe4\xc0\x4d\x51\xf0\xc8\x9a\xe2\xd8\xe5\x2c\xac\x91\xf3\x62\xba\x62\x3e\xf0\xf4\x3e\x56\x8c\xc6\x2c\xb6\xfd\xc4\xad\x57\x55\x05\xba\x1d\xe8\xad\x21\x0b\x1e\x30\xac\x03\xe2\xb4\x82\x64\xcb\x75\x0a\x38\x8f\x28\x9a\xb6\x0b\x93\xde\x1e\xea\xed\x39\x9d\x0b\x96\x77\x86\x75\x64\xca\x0c\x2c\xac\x21\xb1\xd7\x88\xcd\x50\x6e\xc7\xd5\xb6\xa4\x5e\x43\x6e\xb8\x76\xd4\xac\xde\x23\xee\x55\x42\x3e\x88\x8d\x29\x15\xd8\xf2\x51\x23\x69\xc8\xeb\x96\x2b\x62\x2d\x76\x80\x9a\x4f\x98\x59\xe7\xf5\xcb\xae\x65\xbb\x95\x51\x1b\xe7\x13\xb6\x62\x22\xed\x6c\xfd\x43\x9c\x03\xe1\x58\x8c\x3b\xc4\x6a\xe5\x64\x97\x11\xaf\xa7\x76\x45\x79\x6a\x79\xf5\x04\xd8\x9a\x53\xc9\x00\xfb\xe9\x89\x1a\x2b\xde\x12\x2c\xef\x0b\x62\xa9\x4b\x7a\x34\x1f\x9e\x8f\xc7\x67\x1f\x4f\xa6\x83\xd1\xe4\xec\x18\x4b\xe0\x7e\x8e\xe1\x76\x0c\x49\x06\x7a\xa3\xbb\x0b\x29\xcd\x47\x0c\x7a\x86\xe1\xe6\xf6\x3a\x4c\x77\x6c\xd8\xff\xa0\xf6\xa9\x0e\x1a\xeb\x88\xb8\x24\xd5\x42\x1d\xd0\x71\xe1\x9e\x25\xc3\x8e\xe5\x17\x8d\xf9\x75\x8d\x96\x3e\xcb\xc7\xd2\xf9\x78\x1d\x6d\xec\x47\xb5\xc8\xfd\x40\x7b\xb4\x44\x2f\xdc\x4f\xc0\xbb\x90\x25\x69\xb5\x02\x74\x2c\xd7\x7f\x29\x79\xeb\x1f\x64\x70\xc9\x71\xa9\x80\x62\x0c\x59\x84\x51\xe7\x98\x33\x1b\xa7\x52\x11\x1c\xda\xd5\xdd\x4e\x3d\x5b\x24\xb9\x76\x54\x33\x4f\x63\x89\x36\xdf\x07\xb4\x5b\x2f\xf2\x44\xe2\xe6\x7a\x70\x09\xad\x16\x57\x23\xf3\x20\xaa\xe6\x84\x4c\x83\x32\xb0\xf7\x66\x89\x94\x86\x17\xf6\x68\xd4\x0f\xe9\xcf\x9b\x7e\xbd\x25\x55\x25\xcc\xf3\x8c\xab\x4f\xaa\xbe\xab\x0d\x89\xc2\x2a\x95\xa7\xc4\x8b\xbb\x44\xcc\xf7\x15\x49\xc5\x9e\x8e\xf3\x78\x03\x78\x5a\x63\xf9\xff\xf7\xdf\xff\xfa\x4f\xb5\xad\x1d\x14\xf4\x1b\xff\x57\xa9\x6d\xf1\x89\x78\xf4\xbd\x23\x5b\xb6\xf9\x6e\xd0\xd5\xcc\xad\x97\xdf\xdd\xe8\xfb\x8e\xe7\xd1\xa5\xd7\xf3\x52\xe9\xe5\x02\x7f\x23\x1f\x37\x78\x0d\x6d\x15\x5b\xbd\xfe\x61\xeb\x85\x00\xfd\x97\x02\xf4\x5e\x0a\x70\xf0\x42\x80\xde\x57\x2f\x05\x78\xf3\x52\x80\x2f\x5f\x0a\xf0\xc5\xef\x04\xb0\x54\xf4\x77\x9e\x2d\xbf\x0e\x7a\x2f\x01\xe1\x37\x78\x4f\xf1\x4a\x3b\x92\x3e\x72\x05\xa9\x05\x16\xcd\xe6\x45\x80\x2b\x29\x57\x31\xff\x23\xf0\xb0\xa9\x79\x22\x59\x79\x4c\x25\x9c\x2d\x84\x77\xfd\xe5\xbd\xba\x94\xfc\x77\xff\x0b\x00\x00\xff\xff\xb4\x44\xf6\x68\xf8\x19\x00\x00")

func scriptsMainBashBytes() ([]byte, error) {
	return bindataRead(
		_scriptsMainBash,
		"scripts/main.bash",
	)
}

func scriptsMainBash() (*asset, error) {
	bytes, err := scriptsMainBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/main.bash", size: 6648, mode: os.FileMode(420), modTime: time.Unix(1465972682, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/main.bash": scriptsMainBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"main.bash": &bintree{scriptsMainBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

