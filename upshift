#!/usr/bin/env bash

# 1. Read the configuration files
debug=false
alwaysCleanBeforeBuild=true
alwaysUninstallOlderBuilds=true
package=""
mainActivity=""
gitRepositoryURL=""
gitRepositoryBranch=""
masterPassword=""
projectName=""
useWorkspace=false
scheme=""
iPhone="iPhone 6"
xcodeVersion="7.3.1"

# 2. Load up config from config file
if [ -f "./config.ci" ]; then
  # shellcheck disable=SC1091
  source ./config.ci
fi

#2.1 Load default values for variables which might have been null in config.ci
if [ "${xcodeVersion}" == "" ]; then
  xcodeVersion="7.3.1"
fi

if [ "${iPhone}" == "" ]; then
  iPhone="iPhone 6"
fi

# 3. Dump commands to the screen, only if one wants to debug
if [ "${debug}" == true ];then
  set -v
fi

# 4. Make sure things look good. Here are some font and color adjustments

# To avoid getting the "tput: No value for $TERM and no -T specified" error, export TERM in the script
termInEnv=$(printenv TERM)

if [ "${termInEnv}" == "" ]; then
  export TERM="xterm"
fi

redColour='\033[0;31m'
greenColour='\033[0;32m'
yellowColour='\033[0;33m'
blueColour='\033[0;34m'
grayColour='\033[0;90m'
whiteColour='\033[0;97m'
noColour='\033[0m'

grayBgColor='\033[0;100m'

boldStyle=$(tput bold)
normalStyle=$(tput sgr0)
underlineStyle=$(tput smul)
noUnderlineStyle=$(tput rmul)


# 5. Exit script on error
# set -e
# (Maye not)

# 6. Setup Global Variables
next=true
platform=$1
job=$2

# 7. Application Version
version="0.7.3"

# 8. Set time functions
startTime=$(date +%s)
endTime=""

# 9. Use the env variables to override the user defined ones
# Currently only reading masterPassword

# Test: export masterPasswordFromEnv="1231"
masterPasswordFromEnv=$(printenv masterPasswordFromEnv)

if [ "${masterPasswordFromEnv}" != "" ]; then
  masterPassword=${masterPasswordFromEnv}
  printf "\nSet the value of masterPassword from the environment\n\n"
fi

# 10. Find out if this is running via CI
# We could have multiple, so one variable for each type of service
GITLAB_CI=$(printenv GITLAB_CI)

# Overall, OR all of them to find out is it is running via CI
CI=${GITLAB_CI}

# 11. Find out if you are in docker or not
DOCKER_COUNT=0
if [ -f /proc/1/cgroup ]; then
  DOCKER_COUNT=$(cat /proc/1/cgroup | grep "docker" -c)
fi

DOCKER=false
if [ "${DOCKER_COUNT}" -gt 0 ]; then
  DOCKER=true
fi



# Setup Internal Functions
# ⚡ ⚙

function StartScript {
  printf ""
  printf "\n${boldStyle}◀ BOOTING UP THE ENGINES ►${normalStyle}\n"
}

function EndScript {
  endTime=$(date +%s)
  totalTime=$((endTime - startTime))
  printf "This job took ${blueColour}${totalTime} seconds${noColour}\n"

  if [ "${next}" == false ]; then
    exit 1
  fi

}

function ShowError {
  printf "${boldStyle}ERROR ${normalStyle}\n"
}

function ShowPreviousFailed {
  printf "${redColour}Skipping${noColour} action because the previous actions failed\n"
}

function ShowCIFailed {
  printf "${redColour}Skipping${noColour} action because this is running via CI\n"
}

function StartAction {
  printf "\n${blueColour}◀ ACTION: $1 ►${noColour}\n\n"
}


# Setup Jobs

jobQueue=()

function RunJobs {
  for action in "${jobQueue[@]}"
    do
      :
      "${action}"
  done
}

function FindJobQueue {

  case "${platform}" in
    "android")
      StartScript
      case "${job}" in
        "build")      jobQueue=("UpgradeVersion" "GitPull" "GitSubmodules" "SetupGradle" "AssembleAndroid");;
        "run")   jobQueue=("UpgradeVersion" "StartEmulator" "GitPull" "GitSubmodules" "SetupGradle" "InstallOnAndroid");;
        *)
                      ShowError
                      printf "Yo! We only support two commands for Android right now, build and emulator\n"
                      ;;
      esac
      ;;
    "ios")
      StartScript
      case "${job}" in
        "build")      jobQueue=("UpgradeVersion" "XCodeVersion" "GitPull" "GitSubmodules" "SetupPods" "XCPretty" "BuildiOS");;
        "run") jobQueue=("UpgradeVersion" "XCodeVersion" "GitPull" "GitSubmodules" "SetupPods" "XCPretty" "BuildiOS" "DeployiOSSimulator");;
        "deploy") jobQueue=("UpgradeVersion" "XCodeVersion" "GitPull" "GitSubmodules" "SetupPods" "XCPretty" "ArchiveIOS");;
        *)
                      ShowError
                      printf "Yo! We only support one commands for iOS right now: build\n"
                      ;;
      esac
      ;;
    "setup")
      case "${job}" in
        "clone")      jobQueue=("UpgradeVersion" "GitClone" "GitSubmodules" "SetupPods");;
        "config")     jobQueue=("UpgradeVersion" "AddConfig");;
        *)
                      ShowError
                      printf "Yo! We only support one commands for Setup right now: clone\n"
                      ;;
      esac
      ;;
    "install")
      jobQueue=("SetupScript");;
    "-v")
      printf "Upshift v${version}\n"
      exit
      ;;
    "action")
      case "${job}" in
        "SetupSSH")           jobQueue=("SetupSSH");;
        "InstallOnAndroid")   jobQueue=("InstallOnAndroid");;
        "GitPull")            jobQueue=("GitPull");;
        "GitClone")           jobQueue=("GitClone");;
        "StartEmulator")      jobQueue=("StartEmulator");;
        "AndroidDevices")     jobQueue=("AndroidDevices");;
        "AssembleAndroid")    jobQueue=("AssembleAndroid");;
        "GitSubmodules")      jobQueue=("GitSubmodules");;
        "SetupPods")          jobQueue=("SetupPods");;
        "XCodeVersion")       jobQueue=("XCodeVersion");;
        "XCPretty")           jobQueue=("XCPretty");;
        "BuildiOS")           jobQueue=("BuildiOS");;
        "ArchiveIOS")         jobQueue=("ArchiveIOS");;
        "DeployiOSSimulator") jobQueue=("DeployiOSSimulator");;
        "SetupScript")        jobQueue=("SetupScript");;
        "SetupGradle")        jobQueue=("SetupGradle");;
        "UpgradeVersion")     jobQueue=("UpgradeVersion");;
        *)
                      ShowError
                      printf "Yo! This command is not supported right now\n"
                      ;;
        esac
        ;;
    *)
      printf "
UPSHIFT(1)               Upshift Commands Manual               UPSHIFT(1)

${boldStyle}NAME${normalStyle}
    ${boldStyle}upshift${normalStyle} -- help you build and test mobile apps

${boldStyle}SYNOPSIS${normalStyle}
    ${boldStyle}upshift${normalStyle} ${underlineStyle}platform${noUnderlineStyle} ${underlineStyle}job${noUnderlineStyle}

${boldStyle}DESCRIPTION${normalStyle}
     The ${boldStyle}upshift${normalStyle} utility helps you clone, build and test your iOS and
     Android projects.

     The following options are currently available

     ${boldStyle}upshift${normalStyle} ${underlineStyle}android${noUnderlineStyle} ${underlineStyle}build${noUnderlineStyle}

     This command pulls the latest code, checks and install submodules
     and finally builds the Android project.

     ${boldStyle}upshift${normalStyle} ${underlineStyle}android${noUnderlineStyle} ${underlineStyle}emulator${noUnderlineStyle}

     This command starts up the emulator on the system, pulls the latest
     code, installs the git submodules and installs the app on the emulator.

     ${boldStyle}upshift${normalStyle} ${underlineStyle}ios${noUnderlineStyle} ${underlineStyle}build${noUnderlineStyle}

     This command checks if you are building on the correct Xcode version,
     pulls the code, installs submodules, installs pods, build the latest
     iOS project and deploys it on the iOS simulator

     ${boldStyle}upshift${normalStyle} ${underlineStyle}setup${noUnderlineStyle} ${underlineStyle}clone${noUnderlineStyle}

     This command helps you clone a new repository, install submodules and
     installs pods.

     ${boldStyle}upshift${normalStyle} ${underlineStyle}setup${noUnderlineStyle} ${underlineStyle}config${noUnderlineStyle}

     This command will create an empty config file in the current folder
     that you are in. Config files are setup in the main folder and are
     called config.ci . The variable defined in this file gets more
     priority than the ones defined inside upshift

     ${boldStyle}upshift${normalStyle} ${underlineStyle}install${noUnderlineStyle}

     This command installs this script on your machine

     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}SetupSSH${noUnderlineStyle}
     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}InstallOnAndroid${noUnderlineStyle}
     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}GitPull${noUnderlineStyle}
     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}GitClone${noUnderlineStyle}
     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}StartEmulator${noUnderlineStyle}
     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}AndroidDevices${noUnderlineStyle}
     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}AssembleAndroid${noUnderlineStyle}
     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}GitSubmodules${noUnderlineStyle}
     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}SetupPods${noUnderlineStyle}
     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}XCodeVersion${noUnderlineStyle}
     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}XCPretty${noUnderlineStyle}
     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}BuildiOS${noUnderlineStyle}
     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}DeployiOSSimulator${noUnderlineStyle}
     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}SetupScript${noUnderlineStyle}
     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}SetupGradlepSSH${noUnderlineStyle}
     ${boldStyle}upshift${normalStyle} ${underlineStyle}action${noUnderlineStyle} ${underlineStyle}UpgradeVersion${noUnderlineStyle}

     These commands will allow you to run each specific action separately

     ${boldStyle}upshift${normalStyle} ${underlineStyle}-v${noUnderlineStyle}

     This command gets you the latest version number

${boldStyle}COMPATIBILITY${normalStyle}
      This software has only been tried and tested on Mac OSX 10.11.4. If
      you're planning to use this on windows, your're on your own!

Leftshift Tech.               May 10, 2016                Leftshift Tech.
      "
      ;;
  esac
}

# Start running the scripts
FindJobQueue
RunJobs




# Ending

EndScript
